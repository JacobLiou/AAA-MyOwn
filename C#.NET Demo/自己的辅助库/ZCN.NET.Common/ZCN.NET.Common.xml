<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ZCN.NET.Common</name>
    </assembly>
    <members>
        <member name="T:ZCN.NET.Common.Component.CallContext">
            <summary>
             模拟实现 .NET Framework 中  System.Runtime.Remoting.Messaging.CallContext 类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Component.CallContext.SetData(System.String,System.Object)">
            <summary>
            存储给定对象并将其与指定名称关联
            </summary>
            <param name="name">要与新项关联的调用上下文中的名称。</param>
            <param name="data">要存储在调用上下文中的对象。</param>
        </member>
        <member name="M:ZCN.NET.Common.Component.CallContext.GetData(System.String)">
            <summary>
            检索具有指定名称的对象
            </summary>
            <param name="name">调用上下文中的项的名称</param>
            <returns></returns>
        </member>
        <member name="P:ZCN.NET.Common.Component.Singleton`1.Current">
            <summary>
             获取具体组件的实例
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Component.SingletonBase`1">
            <summary>
            泛型类型的单例模式
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:ZCN.NET.Common.Component.SingletonLazy`1">
            <summary>
             多线程下的单例模式实现(即Lazy模式):保证在整个应用程序的生命周期中，在任何时刻，被指定的类只有一个实例，
             并为客户程序提供一个获取该实例的全局访问点
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
        </member>
        <member name="P:ZCN.NET.Common.Component.SingletonLazy`1.Instance">
            <summary>
             获取具体组件的实例
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Component.SingletonHunger">
            <summary>
                饿汉模式的单例
                这种模式的特点是自己主动实例化
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_BOOLEAN">
            <summary>
            System.Boolean，对应 C# 为 bool
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_BYTE">
            <summary>
            System.Byte，对应 C# 为 byte
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_SBYTE">
            <summary>
            System.SByte，对应 C# 为 sbyte
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_CHAR">
            <summary>
            System.Char，对应 C# 为 char
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_DECIMAL">
            <summary>
            System.Decimal，对应 C# 为 decimal
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_DOUBLE">
            <summary>
            System.Double，对应 C# 为 double
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_SINGLE">
            <summary>
            System.Single，对应 C# 为 float
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_INT16">
            <summary>
            System.Int16，对应 C# 为 short
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_U_INT16">
            <summary>
            System.UInt16，对应 C# 为 uint16
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_INT32">
            <summary>
            System.Int32，对应 C# 为 int
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_U_INT32">
            <summary>
            System.UInt32，对应 C# 为 uint32
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_INT64">
            <summary>
            System.Int64，对应 C# 为 long
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_U_INT64">
            <summary>
            System.UInt64，对应 C# 为 ulong
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_OBJECT">
            <summary>
            System.Object，对应 C# 为 object
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.DotNetSystemType.SYSTEM_STRING">
            <summary>
            System.String，对应 C# 为 string
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Constants.EncodingNames">
            <summary>
             编码方式常量类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM037">
            <summary>
             IBM EBCDIC(美国-加拿大)。代码页标识符号：37
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM437">
            <summary>
             OEM 美国。代码页标识符号：437
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM500">
            <summary>
             IBM EBCDIC (国际)。代码页标识符号：500       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ASMO_708">
            <summary>
             阿拉伯字符(ASMO-708)。代码页标识符号：708 
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.DOS_720">
            <summary>
             阿拉伯字符(DOS)。代码页标识符号：720       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM737">
            <summary>
             希腊字符(DOS)。代码页标识符号：737       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM775">
            <summary>
             波罗的海字符(DOS)。代码页标识符号：775       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM850">
            <summary>
             西欧字符(DOS)。代码页标识符号：850       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM852">
            <summary>
             中欧字符(DOS)。代码页标识符号：852       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM855">
            <summary>
             OEM 西里尔语。代码页标识符号：855       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM857">
            <summary>
             土耳其字符(DOS)。代码页标识符号：857       
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM00858">
            <summary>
             OEM 多语言拉丁语 I。代码页标识符号：858       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM860">
            <summary>
             葡萄牙语(DOS)。代码页标识符号：860       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM861">
            <summary>
             冰岛语(DOS)。代码页标识符号：861       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.DOS_862">
            <summary>
             希伯来字符(DOS)。代码页标识符号：862      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM863">
            <summary>
             加拿大法语(DOS)。代码页标识符号：863       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM864">
            <summary>
             阿拉伯字符(864)。代码页标识符号：864       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM865">
            <summary>
             北欧字符(DOS)。代码页标识符号：865       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.CP866">
            <summary>
             西里尔字符(DOS)。代码页标识符号：866       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM869">
            <summary>
             现代希腊字符(DOS)。代码页标识符号：869       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM870">
            <summary>
             IBM EBCDIC(多语言拉丁语 2)。代码页标识符号：870       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_874">
            <summary>
             泰语(Windows)。代码页标识符号：874  windows-874     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.CP875">
            <summary>
             IBM EBCDIC (现代希腊语)。代码页标识符号：875      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.SHIFT_JIS">
            <summary>
             日语(Shift-JIS)。代码页标识符号：932       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.GB2312">
            <summary>
             简体中文(GB2312)。代码页标识符号：936      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.KS_C_5601_1987">
            <summary>
             朝鲜语。代码页标识符号：949   
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.BIG5">
            <summary>
             繁体中文(Big5)。代码页标识符号：950       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM1026">
            <summary>
             IBM EBCDIC (土耳其拉丁语 5)。代码页标识符号：1026       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01047">
            <summary>
             IBM 拉丁语 1。代码页标识符号：1047       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01140">
            <summary> 
             IBM EBCDIC (美国-加拿大-欧洲)。代码页标识符号：1140       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01141">
            <summary>
             IBM EBCDIC (德国-欧洲)。代码页标识符号：1141       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01142">
            <summary>
             IBM EBCDIC (丹麦-挪威-欧洲)。代码页标识符号：1142       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01143">
            <summary>
             IBM EBCDIC (芬兰-瑞典-欧洲)。代码页标识符号：1143       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01144">
            <summary>
             IBM EBCDIC (意大利-欧洲)。代码页标识符号：1144       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01145">
            <summary>
             IBM EBCDIC (西班牙-欧洲)。代码页标识符号：1145      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01146">
            <summary>
             IBM EBCDIC (英国-欧洲)。代码页标识符号：1146       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01147">
            <summary>
             IBM EBCDIC (法国-欧洲)。代码页标识符号：1147       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01148">
            <summary>
             IBM EBCDIC (国际-欧洲)。代码页标识符号：1148       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM01149">
            <summary>
             IBM EBCDIC (冰岛语-欧洲)。代码页标识符号：1149       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_16">
            <summary>
             Unicode。代码页标识符号：1200      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_16_BE">
            <summary>
             Unicode (Big-Endian)。代码页标识符号：201       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1250">
            <summary>
             中欧字符(Windows)。代码页标识符号：1250  windows-1250     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1251">
            <summary>
             西里尔字符(Windows)。代码页标识符号：1251  windows-1251     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1252">
            <summary>
              西欧字符(Windows)。代码页标识符号：1252      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1253">
            <summary>
             希腊字符(Windows)。代码页标识符号：1253       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1254">
            <summary>
             土耳其字符(Windows)。代码页标识符号：1254       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1255">
            <summary>
             希伯来字符(Windows)。代码页标识符号：1255       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1256">
            <summary>
             阿拉伯字符(Windows)。代码页标识符号：1256       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1257">
            <summary>
             波罗的海字符(Windows)。代码页标识符号：1257       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.WINDOWS_1258">
            <summary>
             越南字符(Windows)。代码页标识符号：1258      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.JOHAB">
            <summary>
             朝鲜语(Johab)。代码页标识符号：1361      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.MACINTOSH">
            <summary>
             西欧字符(Mac)。代码页标识符号：10000       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_JAPANESE">
            <summary>
             日语(Mac)。代码页标识符号：10001       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_CHINESETRAD">
            <summary>
             繁体中文(Mac)。代码页标识符号：10002    
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_KOREAN">
            <summary>
             朝鲜语(Mac)。代码页标识符号：10003       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_ARABIC">
            <summary>
             阿拉伯字符(Mac)。代码页标识符号：10004       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_HEBREW">
            <summary>
             希伯来字符(Mac)。代码页标识符号：10005       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_GREEK">
            <summary>
             希腊字符(Mac)。代码页标识符号：10006       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_CYRILLIC">
            <summary>
             西里尔字符(Mac)。代码页标识符号：10007       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_CHINESESIMP">
            <summary>
             简体中文(Mac)。代码页标识符号：10008       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_ROMANIAN">
            <summary>
             罗马尼亚语(Mac)。代码页标识符号：10010       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_UKRAINIAN">
            <summary>
             乌克兰语(Mac)。代码页标识符号：10017       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_THAI">
            <summary>
             泰语(Mac)。代码页标识符号：10021      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_CE">
            <summary>
             中欧字符(Mac)。代码页标识符号：10029      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_ICELANDIC">
            <summary>
             冰岛语(Mac)。代码页标识符号：10079       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_TURKISH">
            <summary>
             土耳其字符(Mac)。代码页标识符号：10081  x-mac-turkish     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_MAC_CROATIAN">
            <summary>
             克罗地亚语(Mac)。代码页标识符号：10082       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_32">
            <summary>
             Unicode (UTF-32)。代码页标识符号：12000       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_32_BE">
            <summary>
             Unicode (UTF-32 Big-Endian)。代码页标识符号：12001  utf-32BE     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CHINESE_CNS">
            <summary>
             繁体中文(CNS)。代码页标识符号：20000       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20001">
            <summary>
             TCA 台湾。代码页标识符号：20001       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CHINESE_ETEN">
            <summary>
             繁体中文(Eten)。代码页标识符号：20002       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20003">
            <summary>
             IBM5550 台湾。代码页标识符号：20003       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20004">
            <summary>
             TeleText 台湾。代码页标识符号：20004       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20005">
            <summary>
             Wang 台湾。代码页标识符号：20005       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_IA5">
            <summary>
             西欧字符(IA5)。代码页标识符号：20105       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_IA5_GERMAN">
            <summary>
             德语(IA5)。代码页标识符号：20106       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_IA5_SWEDISH">
            <summary>
             瑞典语(IA5)。代码页标识符号：20107       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_IA5_NORWEGIAN">
            <summary>
             挪威语(IA5)。代码页标识符号：20108      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.US_ASCII">
            <summary>
             US-ASCII。代码页标识符号：20127       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20261">
            <summary>
             T.61。代码页标识符号：20261  x-cp20261     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20269">
            <summary>
             ISO-6937。代码页标识符号：20269       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM273">
            <summary>
             IBM EBCDIC (德国)。代码页标识符号：20273       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM277">
            <summary>
             IBM EBCDIC (丹麦-挪威)。代码页标识符号：20277       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM278">
            <summary>
             IBM EBCDIC (芬兰-瑞典)。代码页标识符号：20278       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM280">
            <summary>
             IBM EBCDIC (意大利)。代码页标识符号：20280       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM284">
            <summary>
             IBM EBCDIC (西班牙)。代码页标识符号：20284       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM285">
            <summary>
             IBM EBCDIC (UK)。代码页标识符号：20285       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM290">
            <summary>
             IBM EBCDIC (日语片假名)。代码页标识符号：20290       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM297">
            <summary>
             IBM EBCDIC (法国)。代码页标识符号：20297       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM420">
            <summary>
             IBM EBCDIC (阿拉伯语)。代码页标识符号：20420       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM423">
            <summary>
             IBM EBCDIC (希腊语)。代码页标识符号：20423       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM424">
            <summary>
             IBM EBCDIC (希伯来语)。代码页标识符号：20424       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_EBCDIC_KOREAN_EXTENDED">
            <summary>
             IBM EBCDIC (朝鲜语扩展)。代码页标识符号：20833       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM_THAI">
            <summary>
             IBM EBCDIC (泰语)。代码页标识符号：20838      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.KOI8_R">
            <summary>
             西里尔字符(KOI8-R)。代码页标识符号：20866       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM871">
            <summary>
             IBM EBCDIC (冰岛语)。代码页标识符号：20871       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM880">
            <summary>
             IBM EBCDIC (西里尔俄语)。代码页标识符号：20880       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM905">
            <summary>
             IBM EBCDIC (土耳其语)。代码页标识符号：20905       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.IBM00924">
            <summary>
             IBM 拉丁语 1。代码页标识符号：20924       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.EUC_JP">
            <summary>
             v。代码页标识符号：20932  
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20936">
            <summary>
             简体中文(GB2312-80)。代码页标识符号：20936       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP20949">
            <summary>
             朝鲜语 Wansung。代码页标识符号：20949      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.CP1025">
            <summary>
             IBM EBCDIC (西里尔塞尔维亚-保加利亚语)。代码页标识符号：21025     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.KOI8_U">
            <summary>
             西里尔字符(KOI8-U)。代码页标识符号：21866       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_1">
            <summary>
             西欧字符(ISO)。代码页标识符号：28591       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_2">
            <summary>
             中欧字符(ISO)。代码页标识符号：28592       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_3">
            <summary>
             拉丁语 3 (ISO)。代码页标识符号：28593
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_4">
            <summary>
             波罗的海字符(ISO)。代码页标识符号：28594       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_5">
            <summary>
             西里尔字符(ISO)。代码页标识符号：28595       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_6">
            <summary>
             阿拉伯字符(ISO)。代码页标识符号：28596      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_7">
            <summary>
             希腊字符(ISO)。代码页标识符号：28597       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_8">
            <summary>
             希伯来字符(ISO-Visual)。代码页标识符号：28598       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_9">
            <summary>
             土耳其字符(ISO)。代码页标识符号：28599      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_13">
            <summary>
             爱沙尼亚语(ISO)。代码页标识符号：28603       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_15">
            <summary>
             拉丁语 9 (ISO)。代码页标识符号：28605       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_EUROPA">
            <summary>
             欧罗巴。代码页标识符号：29001       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_8859_8_I">
            <summary>
             希伯来字符(ISO-Logical)。代码页标识符号：38598       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_2022_JP">
            <summary>
             日语(JIS)。代码页标识符号：50220       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.CS_ISO2022_JP">
            <summary>
             日语(JIS-允许 1 字节假名)。代码页标识符号：50221       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.ISO_2022_KR">
            <summary>
             朝鲜语(ISO)。代码页标识符号：50225       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_CP50227">
            <summary>
             简体中文(ISO-2022)。代码页标识符号：50227       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.euc_jp">
            <summary>
             日语(EUC)。代码页标识符号：51932     
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.EUC_CN">
            <summary>
             简体中文(EUC)。代码页标识符号：51936      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.EUC_KR">
            <summary>
             朝鲜语(EUC)。代码页标识符号：51949      
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.HZ_GB_2312">
            <summary>
             简体中文(HZ)。代码页标识符号：52936       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.GB18030">
            <summary>
             简体中文(GB18030)。代码页标识符号：54936       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_DE">
            <summary>
             ISCII 梵文。代码页标识符号：57002       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_BE">
            <summary>
             ISCII 孟加拉语。代码页标识符号：57003       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_TA">
            <summary>
             ISCII 泰米尔语。代码页标识符号：57004       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_TE">
            <summary>
             ISCII 泰卢固语。代码页标识符号：57005       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_AS">
            <summary>
             ISCII 阿萨姆语。代码页标识符号：57006       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_OR">
            <summary>
             ISCII 奥里雅语。代码页标识符号：57007       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_KA">
            <summary>
             ISCII 卡纳达语。代码页标识符号：57008       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_MA">
            <summary>
             ISCII 马拉雅拉姆语。代码页标识符号：57009       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_GU">
            <summary>
             ISCII 古吉拉特语。代码页标识符号：57010       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.X_ISCII_PA">
            <summary>
             ISCII 旁遮普语。代码页标识符号：57011       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_7">
            <summary>
             Unicode (UTF-7)。代码页标识符号：65000       
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Constants.EncodingNames.UTF_8">
            <summary>
             Unicode (UTF-8)。代码页标识符号：65001     
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Dependency.DefaultDependencyResolver">
            <summary>
             对象依赖解析器的默认实现类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Dependency.DefaultDependencyResolver.CreateInstance(System.Type)">
            <summary>
             创建对象实例
            </summary>
            <param name="objectType">任意类型对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Dependency.ICustomDependency">
            <summary>
             用于依赖注入的接口
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Dependency.ICustomDependencyResolver">
            <summary>
             对象依赖解析器接口
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Dependency.ICustomDependencyResolver.CreateInstance(System.Type)">
            <summary>
             创建对象实例
            </summary>
            <param name="objectType">任意类型对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Entity.BaseEntity">
            <summary>
             所有实体类的基类
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Entity.IBaseEntity">
            <summary>
             所有实体类的基类接口
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Enums.CaseType">
            <summary>
             字符串的大小写枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.CaseType.Lower">
            <summary>
            小写格式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.CaseType.Upper">
            <summary>
             大写格式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.CaseType.Ignore">
            <summary>
             忽略大小写
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Enums.DBNullHandling">
            <summary>
             IDataReader 转换为实体类时，针对DBNull字段的处理方式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DBNullHandling.SetDefaultValue">
            <summary>
             设置类型对应的默认值
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DBNullHandling.Ignore">
            <summary>
             忽略，不赋值
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Enums.DigitBit">
            <summary>
             进制位枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DigitBit.DigitBit_2">
            <summary>
            2进制
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DigitBit.DigitBit_8">
            <summary>
            8进制
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DigitBit.DigitBit_10">
            <summary>
            10进制
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.DigitBit.DigitBit_16">
            <summary>
            16进制
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Enums.GuidFormat">
            <summary>
            Guid 格式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.GuidFormat.N">
            <summary>
            32位数：00000000000000000000000000000000
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.GuidFormat.D">
            <summary>
            32的数字，由连字符分隔：00000000-0000-0000-0000-000000000000
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.GuidFormat.B">
            <summary>
            32位，用连字符隔开，括在大括号中：{00000000-0000-0000-0000-000000000000}
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.GuidFormat.P">
            <summary>
            32位，用连字符隔开，括在括号中：(00000000-0000-0000-0000-000000000000)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.GuidFormat.X">
            <summary>
            括在大括号中的四个十六进制值，其中第四个值是八个十六进制值的子集（也括在大括号中）：{0x00000000，0x0000，0x0000，{0x00，0x00，0x00，0x00，0x00，0x00，0x00，0x00}}
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Enums.HeritableEnum">
            <summary>
             可以供枚举继承的类。
             可以比较大小，可以转化成string，可以与int互转，值传递的效果。还比原生的enum多了ForEach功能。
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.#ctor(System.String)">
            <summary>
            不指定数值构造实例
            </summary>
            <param name="name">枚举项的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.#ctor(System.String,System.Int32)">
            <summary>
            指定数值构造实例
            </summary>
            <param name="name">枚举项的名称</param>
            <param name="value">枚举项对应的数值</param>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.CompareTo(ZCN.NET.Common.Enums.HeritableEnum)">
            <summary>
              将当前实例与同一类型的另一个对象进行比较，并返回一个整数，该整数指示当前实例在排序顺序中的位置是位于另一个对象之前、之后还是与其位置相同。
            </summary>
            <param name="other">与此实例进行比较的对象。</param>
            <returns>
            一个值，指示要比较的对象的相对顺序。
             返回值的含义如下：
                    值
                    含义
                    小于零
                    此实例在排序顺序中位于 <paramref name="other" /> 之前。
                    零
                    此实例中出现的相同位置在排序顺序中是 <paramref name="other" />。
                    大于零
                    此实例在排序顺序中位于 <paramref name="other" /> 之后。
                  </returns>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.Equals(ZCN.NET.Common.Enums.HeritableEnum)">
            <summary>指示当前对象是否等于同一类型的另一个对象。</summary>
            <param name="other">一个与此对象进行比较的对象。</param>
            <returns>
              如果当前对象等于 <paramref name="other" /> 参数，则为 <see langword="true" />；否则为 <see langword="false" />。
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.ToString">
            <summary>
            向string转换
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.op_Explicit(System.Int32)~ZCN.NET.Common.Enums.HeritableEnum">
            <summary>
            显式强制从int转换
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Enums.HeritableEnum.op_Explicit(ZCN.NET.Common.Enums.HeritableEnum)~System.Int32">
            <summary>
            显式强制向int转换
            </summary>
            <param name="e"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Enums.Sex">
            <summary>
             性别枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.Sex.UnKnown">
            <summary>
            未知
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.Sex.F">
            <summary>
             男
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Enums.Sex.M">
            <summary>
             女
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.BaseException">
            <summary>
                自定义异常基类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.BaseException.#ctor(System.String,System.Boolean)">
            <summary>
               使用指定错误消息来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.BaseException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
                使用指定错误消息和对作为此异常原因的内部异常来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="innerException">导致当前异常的异常，即内部异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.BusinessException">
            <summary>
                业务逻辑异常类，用于封装业务逻辑层引发的异常，以供 UI 层抓取
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.BusinessException.#ctor(System.String,System.Boolean)">
            <summary>
                使用指定错误消息来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.BusinessException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
                使用指定错误消息和对作为此异常原因的内部异常来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="innerException">导致当前异常的异常，即内部异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.CacheException">
            <summary>
              缓存异常
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.CacheException.#ctor(System.String,System.Boolean)">
            <summary>
                使用指定错误消息来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.CacheException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
                使用指定错误消息和对作为此异常原因的内部异常来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="innerException">导致当前异常的异常，即内部异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.ComponentException">
            <summary>
                组件异常类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ComponentException.#ctor(System.String,System.Boolean)">
            <summary>
               使用指定错误消息来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ComponentException.#ctor(System.String,System.Exception,System.Boolean)">
            <summary>
                使用指定错误消息和对作为此异常原因的内部异常来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="innerException">导致当前异常的异常，即内部异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.DataAccessException">
            <summary>
                数据访问层异常类，用于封装数据访问组件引发的异常以及数据库返回的异常，以供业务逻辑层抓取
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.DataAccessException.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
               使用指定错误消息来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="isDbException">是否是数据库返回警告或错误时引发的异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.DataAccessException.#ctor(System.String,System.Exception,System.Boolean,System.Boolean)">
            <summary>
                使用指定错误消息和对作为此异常原因的内部异常来初始化该类的新实例
            </summary>
            <param name="message">描述错误的消息</param>
            <param name="innerException">导致当前异常的异常，即内部异常</param>
            <param name="isDbException">是否是数据库返回警告或错误时引发的异常</param>
            <param name="log">是否记录日志。默认为true</param>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.ExceptionHandler">
            <summary>
                异常信息处理类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.CheckArgument(System.Object[],System.String,System.Boolean)">
            <summary>
                检验参数合法性，数值类型不能小于0，引用类型不能为null，否则抛出相应异常
            </summary>
            <param name="args">待检数组参数</param>
            <param name="argName">待检参数名称</param>
            <param name="canBeEmpty">集合为空是是否抛出异常</param>
            <exception cref="T:ZCN.NET.Common.Exceptions.ComponentException" />
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.CheckArgument``1(System.Collections.Generic.List{``0},System.String,System.Boolean)">
            <summary>
                检验参数合法性，引用类型不能为null，否则抛出相应异常
            </summary>
            <param name="arrArgs">待检数组参数</param>
            <param name="argName">待检参数名称</param>
            <param name="canBeEmpty">集合为空是是否抛出异常</param>
            <exception cref="T:ZCN.NET.Common.Exceptions.ComponentException" />
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.ThrowBusinessException(System.String,System.Exception)">
            <summary>
                向调用层抛出业务逻辑异常
            </summary>
            <param name="msg">自定义异常消息</param>
            <param name="ex">实际引发异常的异常实例</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.ThrowComponentException(System.String,System.Exception)">
            <summary>
                向调用层抛出组件异常
            </summary>
            <param name="msg">自定义异常消息</param>
            <param name="ex">实际引发异常的异常实例</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.ThrowCacheException(System.String,System.Exception)">
            <summary>
                向调用层抛出缓存异常
            </summary>
            <param name="msg">自定义异常消息</param>
            <param name="ex">实际引发异常的异常实例</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.ThrowDataAccessException(System.String,System.Exception)">
            <summary>
                向调用层抛出数据访问组件异常
            </summary>
            <param name="msg">自定义异常消息</param>
            <param name="ex">实际引发异常的异常实例</param>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionHandler.GetSqlExceptionMessage(System.Int32)">
            <summary>
                由错误码返回指定的自定义SqlException异常信息
            </summary>
            <param name="exceptionCode">错误码</param>
            <returns> </returns>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.ExceptionMessage">
            <summary>
                异常信息类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Exceptions.ExceptionMessage.#ctor(System.Exception,System.String,System.Boolean)">
            <summary>
                以自定义用户信息和异常对象实例化一个异常信息对象
            </summary>
            <param name="ex">异常对</param>
            <param name="userCustomMessage">自定义用户信息</param>
            <param name="isHideStackTrace">是否隐藏异常堆栈信息</param>
        </member>
        <member name="P:ZCN.NET.Common.Exceptions.ExceptionMessage.UserMessage">
            <summary>
                用户信息，用于报告给用户的异常消息
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Exceptions.ExceptionMessage.ExMessage">
            <summary>
                直接的Exception异常信息，即ex.Message属性值
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Exceptions.ExceptionMessage.ErrorDetails">
            <summary>
                异常输出的详细描述，包含异常消息，规模信息，异常类型，异常源，引发异常的方法及内部异常信息
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Exceptions.ExceptionType">
            <summary>
               异常类型枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Exceptions.ExceptionType.Warning">
            <summary>
                警告
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Exceptions.ExceptionType.Error">
            <summary>
                错误
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CompressByGZip(System.String)">
            <summary>
              自定义扩展方法：使用操作系统当前的ANSI编码格式压缩字符串。返回压缩后的字节数组。
              如果字符串为 Null、空、空白，则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CompressByGZip(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用指定的编码格式压缩字符串。返回压缩后的字节数组。
              如果字符串为 Null、空、空白，则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CompressToFileByGZip(System.String,System.String)">
            <summary>
              自定义扩展方法：使用指定的编码格式压缩字符串到指定的文件。
              如果字符串为 Null、空、空白，则不创建压缩文件。
              如果需要解压缩，请调用对应的 DecompressFormFileByGZip()方法
            </summary>
            <param name="compressData">待压缩字符串</param>
            <param name="zipFilePath">压缩后的文件名称(包含完全路径)</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DecompressByGZip(System.Byte[])">
            <summary>
              自定义扩展方法：使用操作系统当前的ANSI编码格式解压缩。返回解压缩后的字符串。
              如果字节数组为 Null 或者 长度为0，则返回空字符串
            </summary>
            <param name="this">扩展对象。8位无符号整数数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DecompressByGZip(System.Byte[],System.Text.Encoding)">
            <summary>
              自定义扩展方法： 使用指定的编码格式解压缩。返回解压缩后的字符串。
              如果字节数组为 Null 或者 长度为0，则返回空字符串
            </summary>
            <param name="this">扩展对象。8位无符号整数数组</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DecompressFromFileByGZip(System.String)">
            <summary>
             自定义扩展方法：从指定的压缩文件中解压出字符串。
             如果指定的压缩文件不存在，则返回空字符串。
            </summary>
            <param name="zipFilePath">待解压的文件路径</param>
            <returns>返回解压后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateGZip(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：创建压缩文件。
             如果文件属性为隐藏或者文件扩展名为 .gz，则不创建压缩文件。
            </summary>
            <param name="this">扩展对象。文件信息对象,需要包含文件全路径名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateGZip(System.IO.FileInfo,System.String)">
            <summary>
              自定义扩展方法：创建压缩文件.
             如果文件属性为隐藏或者文件扩展名为 .gz，则不创建压缩文件。
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="destination">压缩文件的名称，包含全路径</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateGZip(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
              自定义扩展方法：创建压缩文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="destFileInfo">压缩文件信息的对象，需要包含文件全路径名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractGZipToDirectory(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：根据指定文件对象信息创建一个压缩文件，并从文件信息中拷贝内容到一个新的文件中
            </summary>
            <param name="this">扩展对象。文件信息对象,需要包含文件全路径名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractGZipToDirectory(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：根据指定文件对象信息创建一个压缩文件，并从文件信息中拷贝内容到一个新的文件中
            </summary>
            <param name="this">扩展对象。文件信息对象,需要包含文件全路径名称</param>
            <param name="destination">压缩文件的名称，包含全路径</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractGZipToDirectory(System.IO.FileInfo,System.IO.FileInfo)">
            <summary>
              自定义扩展方法：创建压缩文件到指定目录下
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="destFileInfo">压缩文件信息的对象，需要包含文件全路径名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.String)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包含文件和指定目录的目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFileName">要创建的存档路径，指定为相对路径或绝对路径。相对路径被解释为相对于当前工作目录
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包括文件和指定目录的目录，使用指定压缩级别，以及可以选择包含基目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFileName">要生成的存档路径，指定为相对路径或绝对路径。
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="compressionLevel">创建项时，指示是否要强调速度或压缩有效性的枚举值之一</param>
            <param name="includeBaseDirectory">包括从在存档的根的 sourceDirectoryName 的目录名称，则为 true；
             仅包含目录中的内容，则为 false
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包括文件和指定目录的目录，使用指定压缩级别和条目名称的字符编码，以及可以选择包含基目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFileName">要生成的存档路径，指定为相对路径或绝对路径。
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="compressionLevel">创建项时，指示是否要强调速度或压缩有效性的枚举值之一</param>
            <param name="includeBaseDirectory">包括从在存档的根的 sourceDirectoryName 的目录名称，则为 true；
             仅包含目录中的内容，则为 false
            </param>
            <param name="entryNameEncoding">在归档中读取或写入条目名称时使用的编码。 
             仅当需要针对具有不支持条目名称的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定值
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包含文件和指定目录的目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFile">要生成的存档路径，指定为相对路径或绝对路径。 相对路径被解释为相对于当前工作目录</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包括文件和指定目录的目录，使用指定压缩级别，以及可以选择包含基目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFile">文件信息。要生成的存档路径，指定为相对路径或绝对路径。
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="compressionLevel">创建项时，指示是否要强调速度或压缩有效性的枚举值之一</param>
            <param name="includeBaseDirectory">包括从在存档的根的 sourceDirectoryName 的目录名称，则为 true；
             仅包含目录中的内容，则为 false
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateZipFile(System.IO.DirectoryInfo,System.IO.FileInfo,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)">
            <summary>
             自定义扩展方法：创建 zip 存档，该存档包括文件和指定目录的目录，使用指定压缩级别和条目名称的字符编码，以及可以选择包含基目录
            </summary>
            <param name="this">扩展对象</param>
            <param name="destinationArchiveFile">文件信息。要生成的存档路径，指定为相对路径或绝对路径。
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="compressionLevel">创建项时，指示是否要强调速度或压缩有效性的枚举值之一</param>
            <param name="includeBaseDirectory">包括从在存档的根的 sourceDirectoryName 的目录名称，则为 true；
             仅包含目录中的内容，则为 false
            </param>
            <param name="entryNameEncoding">在归档中读取或写入条目名称时使用的编码。 
             仅当需要针对具有不支持条目名称的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定值
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：将指定 zip 存档中的所有文件都解压到文件系统的一目录下
            </summary>
            <param name="this">扩展对象，包含要解压缩存档的路径</param>
            <param name="destinationDirectoryName">放置解压缩文件的目录的路径，指定为相对路径或绝对路径。 
             相对路径被解释为相对于当前工作目录
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
             自定义扩展方法：将指定 zip 存档中的所有文件都解压到文件系统的一目录下
            </summary>
            <param name="this">扩展对象，包含到要解压缩存档的路径</param>
            <param name="destinationDirectoryName">放置解压缩文件的目录的路径，指定为相对路径或绝对路径。 
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="entryNameEncoding">在归档中读取或写入条目名称时使用的编码。 
             仅当需要针对具有不支持条目名称的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定值
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：将指定 zip 存档中的所有文件都解压到文件系统的一目录下
            </summary>
            <param name="this">扩展对象，文件信息对象，包含到要解压缩存档的路径</param>
            <param name="destinationDirectory">目录信息对象，包含到放置解压缩文件的目录的路径，指定为相对路径或绝对路径。 
             相对路径被解释为相对于当前工作目录
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractZipFileToDirectory(System.IO.FileInfo,System.IO.DirectoryInfo,System.Text.Encoding)">
            <summary>
             自定义扩展方法：将指定 zip 存档中的所有文件都解压到文件系统的一目录下
            </summary>
            <param name="this">扩展对象，包含到要解压缩存档的路径</param>
            <param name="destinationDirectory">目录信息对象，放置解压缩文件的目录的路径，指定为相对路径或绝对路径。 
             相对路径被解释为相对于当前工作目录
            </param>
            <param name="entryNameEncoding">在归档中读取或写入条目名称时使用的编码。 
             仅当需要针对具有不支持条目名称的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定值
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.OpenReadZipFile(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：打开在指定路径用于读取的 zip 存档
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode)">
            <summary>
             自定义扩展方法：以指定的模式打开指定路径上的 zip 归档
            </summary>
            <param name="this">扩展对象。
             文件对象，包含要打开的存档的路径，指定为相对路径或绝对路径。相对路径被解释为相对于当前工作目录
            </param>
            <param name="mode">一个枚举值指定在开放的存档项的操作</param>
            <returns>打开的 zip 存档</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.OpenZipFile(System.IO.FileInfo,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)">
            <summary>
             自定义扩展方法：在指定的模式中用指定的项名称汉字解码打开指定路径的 zip 存档
            </summary>
            <param name="this">扩展对象</param>
            <param name="mode">一个枚举值指定在开放的存档项的操作</param>
            <param name="entryNameEncoding">在归档中读取或写入条目名称时使用的编码。 
             仅当需要针对具有不支持条目名称的 UTF-8 编码的 zip 归档工具和库的互操作性进行编码时，为此参数指定值
            </param>
            <returns>打开的 zip 存档</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeToJson``1(``0,System.Boolean)">
            <summary>
                自定义扩展方法：将指定的对象对象(一般是实体类等)序列化为 Json 字符串。
                如果参数为null，则返回空字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="isFormat">是否需要格式化，缩进显示</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeToJson``1(System.Xml.XmlNode,System.Boolean,System.Boolean)">
            <summary>
                自定义扩展方法：将 XML 文档中的单个节点序列化为 Json 字符串。
                如果参数为null，则返回空字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this">XML 文档中的单个节点</param>
            <param name="isFormat">是否需要格式化，缩进显示</param>
            <param name="omitRootObject">是否省略写入根对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeToJson``1(System.Xml.Linq.XObject,System.Boolean,System.Boolean)">
            <summary>
                自定义扩展方法：将 System.Xml.Linq.XNode 对象序列化为Json字符串。
                如果参数为null，则返回空字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this"></param>
            <param name="isFormat">是否需要格式化，缩进显示</param>
            <param name="omitRootObject">是否省略写入根对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeToXml(System.Object,System.Boolean)">
            <summary>
                自定义扩展方法：将 object 对象(一般是实体类等)序列化为 XML 字符串。
                如果参数为null，则返回空字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="isFormat">是否需要格式化，缩进显示</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeToBinary``1(``0)">
            <summary>
                自定义扩展方法：使用当前操作系统默认的ANSI编码方式将泛型类型对象(一般是实体类等)序列化为二进制字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SerializeBinary``1(``0,System.Text.Encoding)">
            <summary>
                自定义扩展方法：使用指定的编码方式将泛型类型对象(一般是实体类等)序列化为二进制字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeJsonToObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
                自定义扩展方法:将 Json 字符串反序列化为指定类型的对象(一般是实体类等)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this">json字符串</param>
            <param name="settings">json字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeJsonToXmlNode(System.String,System.String,System.Boolean)">
            <summary>
                自定义扩展方法:将json格式的<see cref="T:System.Xml.XmlNode" /> 字符串转换为XmlNode
            </summary>
            <param name="this">json字符串</param>
            <param name="deserializeRootElementName">反序列化时要附加的根元素的名称</param>
            <param name="writeArrayAttribute">指示是否写入json.net数组属性的标志。此属性有助于在将写入的XML转换回json时保留数组。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeJsonToXNode(System.String,System.String,System.Boolean)">
            <summary>
                自定义扩展方法:将 Json格式的<see cref="T:System.Xml.Linq.XNode" /> 字符串反序列化为XDocument
            </summary>
            <param name="this">json字符串</param>
            <param name="deserializeRootElementName">反序列化时要附加的根元素的名称</param>
            <param name="writeArrayAttribute">指示是否写入json.net数组属性的标志。此属性有助于在将写入的XML转换回json时保留数组。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeXmlToObject``1(System.String)">
            <summary>
                自定义扩展方法： 将 XML 字符串反序列化为指定类型的对象。类及属性需要做xml特性标记，与xml文件格式对应。
            </summary>
            <typeparam name="T">泛型类型参数，例如 typeof(实体、DataTable、List集合等对象)</typeparam>
            <param name="this">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeXmlToTObject``1(System.String)">
            <summary>
                自定义扩展方法： 将 XML 字符串反序列化为泛型类型对象。类及属性需要做xml特性标记，与xml文件格式对应。
            </summary>
            <typeparam name="T">泛型类型参数，例如 typeof(实体、DataTable、List集合等对象)</typeparam>
            <param name="this">XML字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeFromBinary``1(System.String)">
            <summary>
              自定义扩展方法：使用当前操作系统默认的 ANSI 编码方式将二进制字符串反序列化为泛型类型对象
            </summary>
            <param name="this">扩展对象。二进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeserializeFromBinary``1(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用指定的编码方式将二进制字符串反序列化为泛型类型对象
            </summary>
            <param name="this">扩展对象。二进制字符串</param>
            <param name="encoding">编码方式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BinarySearch(System.Array,System.Object)">
            <summary>
            自定义扩展方法： 在Array数组中搜索特定元素。
            如果找到 value，则为指定 array 中的指定 value 的索引。
            如果找不到 value 且 value 小于 array 中的一个或多个元素，则为一个负数，该负数是大于value 的第一个元素的索引的按位求补。
            如果找不到 value 且 value 大于 array 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加1）的按位求补
            </summary>
            <param name="array">要搜索的已排序一维 System.Array</param>
            <param name="value">要搜索的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)">
            <summary>
            自定义扩展方法： 在Array数组中搜索特定元素。
            如果找到 value，则为指定 array 中的指定 value 的索引。
            如果找不到 value 且 value 小于 array 中的一个或多个元素，则为一个负数，该负数是大于value 的第一个元素的索引的按位求补。
            如果找不到 value 且 value 大于 array 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加1）的按位求补
            </summary>
            <param name="array">要搜索的已排序一维数组</param>
            <param name="index">要搜索的范围的起始索引</param>
            <param name="length">要搜索的范围的长度</param>
            <param name="value">要搜索的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BinarySearch(System.Array,System.Object,System.Collections.IComparer)">
            <summary>
            自定义扩展方法： 在Array数组中搜索特定元素。
            如果找到 value，则为指定 array 中的指定 value 的索引。
            如果找不到 value 且 value 小于 array 中的一个或多个元素，则为一个负数，该负数是大于value 的第一个元素的索引的按位求补。
            如果找不到 value 且 value 大于 array 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加1）的按位求补
            </summary>
            <param name="array">要搜索的已排序一维数组</param>
            <param name="value">要搜索的对象</param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
                                   如果为 null，则使用每个元素的 System.IComparable实现
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)">
            <summary>
            自定义扩展方法： 在Array数组中搜索特定元素。
            如果找到 value，则为指定 array 中的指定 value 的索引。
            如果找不到 value 且 value 小于 array 中的一个或多个元素，则为一个负数，该负数是大于value 的第一个元素的索引的按位求补。
            如果找不到 value 且 value 大于 array 中的任何元素，则为一个负数，该负数是（最后一个元素的索引加1）的按位求补
            </summary>
            <param name="array">要搜索的已排序一维数组</param>
            <param name="index">要搜索的范围的起始索引</param>
            <param name="length">要搜索的范围的长度</param>
            <param name="value">要搜索的对象</param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
                                   如果为 null，则使用每个元素的 System.IComparable实现
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Clear(System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法： 将数组中的一系列元素设置为零、false 或 null，具体取决于元素类型
            </summary>
            <param name="array">需要清除的一维数组</param>
            <param name="index">要清除的一系列元素的起始索引</param>
            <param name="length">要清除的元素数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ClearAll(System.Array)">
            <summary>
            自定义扩展方法： 将数组中的所有元素设置为零、false 或 null，具体取决于元素类型
            </summary>
            <param name="this">需要清除的一维数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法： 从指定的源索引开始，复制 System.Array 数组中的一系列元素，
             将它们粘贴到另一 System.Array 数组中（从指定的目标索引开始）。
             保证在复制未成功完成的情况下撤消所有更改
            </summary>
            <param name="sourceArray">源数组</param>
            <param name="sourceIndex">表示源数组中复制开始处的索引</param>
            <param name="destinationArray">目标数组</param>
            <param name="destinationIndex">表示目标数组中存储开始处的索引</param>
            <param name="length">它表示要复制的元素数目</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Array,System.Array,System.Int32)">
            <summary>
            自定义扩展方法：从第一个元素开始复制 System.Array 数组中的一系列元素，
            将它们粘贴到另一 System.Array 数组中（从第一个元素开始）
            </summary>
            <param name="sourceArray">源数组</param>
            <param name="destinationArray">目标数组</param>
            <param name="length">表示要复制的元素数目(指定为32 位整数)</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从第一个元素开始复制 System.Array 数组中的一系列元素，
            将它们粘贴到另一 System.Array 数组中（从第一个元素开始）
            </summary>
            <param name="sourceArray">源数组</param>
            <param name="sourceIndex">表示源数组中复制开始处的索引(指定为32 位整数)</param>
            <param name="destinationArray">目标数组</param>
            <param name="destinationIndex">表示目标数组中存储开始处的索引(指定为32 位整数)</param>
            <param name="length">它表示要复制的元素数目(指定为32 位整数)</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Array,System.Array,System.Int64)">
            <summary>
            自定义扩展方法：从第一个元素开始复制 System.Array 数组中的一系列元素，
            将它们粘贴到另一 System.Array 数组中（从第一个元素开始）
            </summary>
            <param name="sourceArray">源数组</param>
            <param name="destinationArray">目标数组</param>
            <param name="length">表示要复制的元素数目(指定为64 位整数)</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            自定义扩展方法：从第一个元素开始复制 System.Array 数组中的一系列元素，
            将它们粘贴到另一 System.Array 数组中（从第一个元素开始）
            </summary>
            <param name="sourceArray">源数组</param>
            <param name="sourceIndex">表示源数组中复制开始处的索引(指定为64 位整数)</param>
            <param name="destinationArray">目标数组</param>
            <param name="destinationIndex">表示目标数组中存储开始处的索引(指定为64 位整数)</param>
            <param name="length">它表示要复制的元素数目(指定为64 位整数)</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IndexOf(System.Array,System.Object)">
            <summary>
            自定义扩展方法： 搜索指定的对象，并返回整个一维 System.Array 中第一个匹配项的索引
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            自定义扩展方法： 搜索指定的对象，并返回一维 System.Array 中从指定索引到最后一个元素这部分元素中第一个匹配项的索引
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法： 搜索指定的对象，并返回一维 System.Array 中从指定索引开始包含指定个元素的这部分元素中第一个匹配项的索引
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值</param>
            <param name="count">要搜索的部分中的元素数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LastIndexOf(System.Array,System.Object)">
            <summary>
            自定义扩展方法： 搜索指定的对象，并返回整个一维 System.Array 数组中最后一个匹配项的索引
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LastIndexOf(System.Array,System.Object,System.Int32)">
            <summary>
            自定义扩展方法：搜索指定的对象，并返回一维 System.Array 数组中从第一个元素到指定索引这部分元素中最后一个匹配项的索引 
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法： 搜索指定的对象，并返回一维 System.Array 数组中到指定索引为止包含指定个元素的这部分元素中最后一个匹配项的索引
            </summary>
            <param name="array">要搜索的一维 System.Array 数组</param>
            <param name="value">要在 array 数组中查找的对象</param>
            <param name="startIndex">搜索的起始索引。空数组中 0（零）为有效值</param>
            <param name="count">要搜索的部分中的元素数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Reverse(System.Array)">
            <summary>
            自定义扩展方法：反转整个一维 System.Array 数组中元素的顺序
            </summary>
            <param name="array">要反转的一维 System.Array 数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Reverse(System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：反转一维 System.Array 中某部分元素的元素顺序
            </summary>
            <param name="array">要反转的一维 System.Array 数组</param>
            <param name="index">要反转的部分的起始索引</param>
            <param name="length">要反转的部分中的元素数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array)">
            <summary>
            自定义扩展方法：对整个一维 System.Array 数组中的元素进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Array)">
            <summary>
            自定义扩展方法：基于第一个 System.Array 中的关键字，使用每个关键字的 System.IComparable 实现，
            对两个一维 System.Array 对象（一个包含关键字，另一个包含对应的项）进行排序
            </summary>
            <param name="array">一维 System.Array，它包含要排序的关键字</param>
            <param name="items"> 一维 System.Array，它包含与 keysSystem.Array 中的每一个关键字对应的项。
             如果为 null，则只对 keysSystem.Array进行排序
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：对一维 System.Array 数组中某部分元素进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
            <param name="index">排序范围的起始索引</param>
            <param name="length">排序范围内的元素数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：基于第一个 System.Array 中的关键字，使用每个关键字的 System.IComparable 实现，
            对两个一维 System.Array 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序
            </summary>
            <param name="array">一维 System.Array，它包含要排序的关键字</param>
            <param name="items"> 一维 System.Array，它包含与 keysSystem.Array 中的每一个关键字对应的项。
             如果为 null，则只对 keysSystem.Array进行排序
            </param>
            <param name="index">排序范围的起始索引</param>
            <param name="length">排序范围内的元素数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Collections.IComparer)">
            <summary>
            自定义扩展方法：使用指定的 System.Collections.IComparer，对一维 System.Array 数组中的元素进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
            如果为 null，则使用每个元素的 System.IComparable 实现</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Array,System.Collections.IComparer)">
            <summary>
            自定义扩展方法：基于第一个 System.Array 中的关键字，使用指定的 System.Collections.IComparer，
            对两个一维 System.Array对象（一个包含关键字，另一个包含对应的项）进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
            <param name="items"> 一维 System.Array，它包含与 keysSystem.Array 中的每一个关键字对应的项。
             如果为 null，则只对 keysSystem.Array进行排序
            </param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
            如果为 null，则使用每个元素的 System.IComparable 实现</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            自定义扩展方法：对一维 System.Array 的部分元素进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
            <param name="index">排序范围的起始索引</param>
            <param name="length">排序范围内的元素数</param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
            如果为 null，则使用每个元素的 System.IComparable 实现</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)">
            <summary>
            自定义扩展方法： 基于第一个 System.Array 中的关键字，使用指定的 System.Collections.IComparer，
            对两个一维 System.Array 对象（一个包含关键字，另一个包含对应的项）的部分元素进行排序
            </summary>
            <param name="array">要排序的一维 System.Array 数组</param>
            <param name="items"> 一维 System.Array，它包含与 keysSystem.Array 中的每一个关键字对应的项。
             如果为 null，则只对 keysSystem.Array进行排序
            </param>
            <param name="index">排序范围的起始索引</param>
            <param name="length">排序范围内的元素数</param>
            <param name="comparer">比较元素时要使用的 System.Collections.IComparer 实现。
            如果为 null，则使用每个元素的 System.IComparable 实现</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：将指定数目的字节从起始于特定偏移量的源数组复制到起始于特定偏移量的目标数组
            </summary>
            <param name="src">源缓冲区</param>
            <param name="srcOffset">源缓冲区中从零开始的字节偏移量</param>
            <param name="dst">目标缓冲区</param>
            <param name="dstOffset">目标缓冲区中从零开始的字节偏移量</param>
            <param name="count">要复制的字节数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ByteLength(System.Array)">
            <summary>
            自定义扩展方法：返回指定数组中的字节数
            </summary>
            <param name="array">一个数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetByte(System.Array,System.Int32)">
            <summary>
            自定义扩展方法：在指定数组中检索指定位置处的字节
            </summary>
            <param name="array">一个数组</param>
            
            <param name="index">数组中的位置</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetByte(System.Array,System.Int32,System.Byte)">
            <summary>
            自定义扩展方法：将指定的值分配给指定数组中特定位置处的字节
            </summary>
            <param name="array">一个数组</param>
            <param name="index">数组中的位置</param>
            <param name="value">要分配的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty(System.Array)">
            <summary>
             自定义扩展方法：判断数组是否为 null 或者元素数量等于0
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty(System.Array)">
            <summary>
             自定义扩展方法：判断数组是否不为 null 且元素数量大于0。
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WithinIndex(System.Array,System.Int32)">
            <summary>
            自定义扩展方法：判断指定的索引是否存在于数组中
            </summary>
            <param name="this">扩展对象。一维 System.Array 数组</param>
            <param name="index">指定的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：判断指定的索引是否存在于数组中
            </summary>
            <param name="this">扩展对象。一维 System.Array 数组</param>
            <param name="index">指定的索引</param>
            <param name="dimension">维度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Boolean,System.String,System.String)">
            <summary>
            自定义扩展方法：如果扩展对象的值为 true 则返回 trueValue；
            如果扩展对象的值为 false 则返回 falseValue
            </summary>
            <param name="value">扩展对象</param>
            <param name="trueValue">如果这个值为 true，则返回的真正值</param>
            <param name="falseValue">如果这个值是 false，则返回的false值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            自定义扩展方法：如果扩展对象的值为 true 则返回 trueValue；
            如果扩展对象的值为 false 则返回 falseValue
            </summary>
            <param name="value">扩展对象</param>
            <param name="trueValue">如果这个值为 true，则返回的真正值</param>
            <param name="falseValue">如果这个值是 false，则返回的false值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 8 位无符号整数。
            如果无法转换则返回 default(byte) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 8 位带符号整数。
            如果无法转换则返回 default(byte) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的十进制数。
            如果无法转换则返回 default(decimal) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的单精度浮点数。
            如果无法转换则返回 default(float) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的双精度浮点数。
            如果无法转换则返回 default(double) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 16 位带符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 16 位无符号整数。
            如果无法转换则返回 default(ushort) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 32 位带符号整数。
            如果无法转换则返回 default(int) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 32 位无符号整数。
            如果无法转换则返回 default(uint) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 64 位带符号整数。
            如果无法转换则返回 default(long) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Boolean)">
            <summary>
            自定义扩展方法：将指定布尔值转换为等效的 64 位无符号整数。
            如果无法转换则返回 default(ulong) 值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Byte[],System.Byte[],System.Int64)">
            <summary>
              复制字节数据
            </summary>
            <param name="input">输入字节数组</param>
            <param name="output">输出字节数组</param>
            <param name="outputOffset">字节偏移位置</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Byte[],System.IO.Stream)">
            <summary>
             向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="output">流(输出)</param>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>		
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Byte[],System.IO.StreamWriter)">
            <summary>
              使用操作系统默认的编码方式将输入中的字节复制并转换为 streamwriter 上的字符
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="outputWriter">流(输出)</param>
            <exception cref="T:System.IO.IOException">in the case of an I/O problem</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.Byte[],System.IO.StreamWriter,System.String)">
            <summary>
             使用指定的的编码方式将输入中的字节复制并转换为 streamwriter 上的字符
            <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="outputWriter">流(输出)</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Resize(System.Byte[],System.Int32)">
            <summary>
            自定义扩展方法：将数组的大小更改为指定的新大小
            </summary>
            <param name="this">扩展对象。要调整大小的一维数组，该数组从零开始；如果为 null 则新建具有指定大小的数组</param>
            <param name="newSize">新数组的大小</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToImage(System.Byte[])">
            <summary>
            自定义扩展方法：将 8 位无符号整数的数组转换为图像
            </summary>
            <param name="this">扩展对象。8 位无符号整数的数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMd5Hash(System.Byte[])">
            <summary>
             自定义扩展方法：将 8 位无符号整数的数组转换为 MD5 方式加密的字符串
            </summary>
            <param name="this">扩展对象。字节数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            自定义扩展方法：将 8 位无符号整数的数组转换为 MemoryStream 内存流对象
            </summary>
            <param name="this">扩展对象。8位无符号整数的数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的两个字节转换来的 Unicode 字符。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于 0，且小于数组减 2 的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的一个字节转换来的布尔值。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于 0，且小于数组减 1 的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的四个字节转换来的单精度浮点数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于 0，且小于数组减 4 的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返返回由字节数组中指定位置的八个字节转换来的双精度浮点数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于 0，且小于数组减 8 的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的两个字节转换来的 16 位有符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减2的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的两个字节转换来的 16 位无符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减2的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减4的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返回由字节数组中指定位置的四个字节转换来的 32 位无符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减4的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返返回由字节数组中指定位置的八个字节转换来的 64 位有符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减8的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：返返回由字节数组中指定位置的八个字节转换来的 64 位无符号整数。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减8的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Byte[])">
            <summary>
             自定义扩展方法：将指定的字节数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Byte[],System.Int32)">
            <summary>
             自定义扩展方法：将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减 1 的长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Byte[],System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：将指定的字节子数组的每个元素的数值转换为它的等效十六进制字符串表示形式。
            </summary>
            <param name="value">扩展对象</param>
            <param name="startIndex">起始位置。大于等于0，且小于数组减 1 的长度</param>
            <param name="length">要转换的数组中的数组元素数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            自定义扩展方法：将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
            参数将子集指定为输入和输出数组中的偏移量和输入数组中要转换的元素数。
            如果参数为null，则返回0
            </summary>
            <param name="inArray">8 位无符号整数的输入数组</param>
            <param name="offsetIn">inArray 内的一个位置</param>
            <param name="length">要转换的 inArray 的元素数</param>
            <param name="outArray">Unicode 字符的输出数组</param>
            <param name="offsetOut">outArray 内的一个位置</param>
            <returns>包含 outArray 中的字节数的 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64CharArray(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32,System.Base64FormattingOptions)">
            <summary>
            自定义扩展方法： 将 8 位无符号整数数组的子集转换为用 Base64 数字编码的 Unicode 字符数组的等价子集。
            参数指定作为输入和输出数组中偏移量的子集、输入数组中要转换的元素数以及是否在输出数组中插入分行符。
            如果参数为null，则返回0
            </summary>
            <param name="inArray">8 位无符号整数的输入数组</param>
            <param name="offsetIn">inArray 内的一个位置</param>
            <param name="length">要转换的 inArray 的元素数</param>
            <param name="outArray">Unicode 字符的输出数组</param>
            <param name="offsetOut">outArray 内的一个位置</param>
            <param name="options">如果每 76 个字符插入一个分行符，则使用 System.Base64FormattingOptions.InsertLineBreaks，
            如果不插入分行符，则使用System.Base64FormattingOptions.None</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64String(System.Byte[])">
            <summary>
            自定义扩展方法：将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式
            </summary>
            <param name="inArray">一个 8 位无符号整数数组</param>
            <returns> inArray 的内容的字符串表示形式，以 Base64 表示</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64String(System.Byte[],System.Base64FormattingOptions)">
            <summary>
            自定义扩展方法：将 8 位无符号整数的数组转换为其用 Base64 数字编码的等效字符串表示形式。参数指定是否在返回值中插入分行符
            </summary>
            <param name="inArray">一个 8 位无符号整数数组</param>
            <param name="options">如果每 76 个字符插入一个分行符，则使用 System.Base64FormattingOptions.InsertLineBreaks，
            如果不插入分行符，则使用System.Base64FormattingOptions.None</param>
            <returns> inArray 的内容的字符串表示形式，以 Base64 表示</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义扩展方法： 将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
            参数将子集指定为输入数组中的偏移量和数组中要转换的元素数
            </summary>
            <param name="inArray">一个 8 位无符号整数数组</param>
            <param name="offset">inArray 中的偏移量</param>
            <param name="length">要转换的 inArray 的元素数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBase64String(System.Byte[],System.Int32,System.Int32,System.Base64FormattingOptions)">
            <summary>
            自定义扩展方法：将 8 位无符号整数数组的子集转换为其用 Base64 数字编码的等效字符串表示形式。
            参数指定作为输入数组中偏移量的子集、数组中要转换的元素数以及是否在返回值中插入分行符
            </summary>
            <param name="inArray">一个 8 位无符号整数数组</param>
            <param name="offset">inArray 中的偏移量</param>
            <param name="length">要转换的 inArray 的元素数</param>
            <param name="options">如果每 76 个字符插入一个分行符，则使用 System.Base64FormattingOptions.InsertLineBreaks，
            如果不插入分行符，则使用System.Base64FormattingOptions.None</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByASCII(System.Byte[])">
            <summary>
              自定义扩展方法：使用ASCII编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByBigEndianUnicode(System.Byte[])">
            <summary>
              自定义扩展方法：使用 Big Endian 字节顺序的 UTF-16 格式的编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByDefault(System.Byte[])">
            <summary>
              自定义扩展方法：使用操作系统的当前 ANSI 代码页的编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByGB2312(System.Byte[])">
            <summary>
              自定义扩展方法：使用 GB2312 编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByUTF7(System.Byte[])">
            <summary>
              自定义扩展方法：使用 UTF7 编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByUTF8(System.Byte[])">
            <summary>
              自定义扩展方法：使用 UTF8 编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByUTF32(System.Byte[])">
            <summary>
              自定义扩展方法：使用 UTF32 编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByUnicode(System.Byte[])">
            <summary>
              自定义扩展方法：使用 Unicode 编码方式将二进制字节数组转换为字符串 
            </summary>
            <param name="bytes">字节数组</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByEncoding(System.Byte[],System.Text.Encoding)">
            <summary>
              自定义扩展方法：以指定的编码方式将字符串转换为字节数组 
            </summary>
            <param name="bytes">字节数组</param>
            <param name="encoding">编码方式。如果为null，则使用系统默认的编码方式</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringByEncoding(System.Byte[],System.String)">
            <summary>
              自定义扩展方法：以指定的编码方式将字符串转换为字节数组 
            </summary>
            <param name="bytes">字节数组</param>
            <param name="encodingName">编码方式。建议使用 EncodingNames 类中的常量值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Byte,System.Byte)">
            <summary>
            自定义扩展方法：返回两个 8 位无符号整数中较大的一个
            </summary>
            <param name="val1">要比较的两个 8 位无符号整数中的第一个</param>
            <param name="val2">要比较的两个 8 位无符号整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.SByte,System.SByte)">
            <summary>
            自定义扩展方法：返回两个 8 位有符号整数中较大的一个
            </summary>
            <param name="val1">要比较的两个 8 位有符号整数中的第一个</param>
            <param name="val2">要比较的两个 8 位有符号整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Byte,System.Byte)">
            <summary>
            自定义扩展方法：返回两个 8 位无符号整数中较小的一个
            </summary>
            <param name="val1">要比较的两个 8 位无符号整数中的第一个</param>
            <param name="val2">要比较的两个 8 位无符号整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.SByte,System.SByte)">
            <summary>
            自定义扩展方法：返回两个 8 位有符号整数中较小的一个
            </summary>
            <param name="val1">要比较的两个 8 位有符号整数中的第一个</param>
            <param name="val2">要比较的两个 8 位有符号整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.SByte)">
            <summary>
             自定义扩展方法：返回 8 位有符号整数的绝对值
            </summary>
            <param name="value">扩展对象</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.SByte)">
            <summary>
             自定义扩展方法：返回一个值，该值表示 8 位有符号整数的符号
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHex(System.Byte)">
            <summary>
               自定义扩展方法： 转换为16进制字符串
            </summary>
            <param name="b">字节实例</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHex(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                自定义扩展方法：转换为16进制字符串
            </summary>
            <param name="bytes">字节的IEnumerable集合实例</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHexWithWhiteSpace(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
                自定义扩展方法：转换为16进制字符串，中间用空格分开
            </summary>
            <param name="bytes">字节的IEnumerable集合实例</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHexWithSeparator(System.Collections.Generic.IEnumerable{System.Byte},System.String)">
            <summary>
                自定义扩展方法：转换为16进制字符串，中间用空格分开
            </summary>
            <param name="bytes">字节的IEnumerable集合实例</param>
            <param name="separator">分隔符。例如：横线、下划线、点号等</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.SByte)">
            <summary>自定义扩展方法：将指定 8 位有符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.SByte)">
            <summary>自定义扩展方法：将指定 8 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.SByte)">
            <summary>自定义扩展方法：将指定的 8 位带符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Byte)">
            <summary>自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.SByte)">
            <summary>自定义扩展方法：将指定 8 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为等效的 16 位有符号整数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.SByte)">
            <summary>
            自定义扩展方法：将指定的 8 位有符号整数的值转换为等效的 16 位无符号整数。
            如果参数小于0，则返回 default(ushort) 值。
            </summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Byte)">
            <summary>
            自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的 16 位无符号整数。
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.SByte)">
            <summary>自定义扩展方法：将指定 8 位带符号整数的值转换为等效的 32 位带符号整数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.SByte)">
            <summary>
            自定义扩展方法：将指定 8 位带符号整数的值转换为等效的 32 位带符号整数。
            如果参数小于0，则返回 default(uint) 值。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.SByte)">
            <summary>自定义扩展方法：将指定 8 位带符号整数的值转换为等效的 16 位带符号整数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.SByte)">
            <summary>
            自定义扩展方法：将指定的 8 位有符号整数的值转换为等效的 64 位无符号整数。
            如果参数小于0，则返回 default(ulong)。
            </summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Byte)">
            <summary>自定义扩展方法：将指定 8 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Byte)">
            <summary>自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.SByte)">
            <summary>自定义扩展方法：将指定的 8 位带符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Byte)">
            <summary>自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit2String(System.Byte)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 8 位无符号整数的值转换为其等效的二进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的二进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit8String(System.Byte)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 8 位无符号整数的值转换为其等效的八进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的八进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit10String(System.Byte)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 8 位无符号整数的值转换为其等效的十进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit16String(System.Byte)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 8 位无符号整数的值转换为其等效的十六进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十六进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.SByte)">
            <summary>自定义扩展方法：将指定的 8 位带符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 8 位带符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Byte)">
            <summary>自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Repeat(System.Char,System.Int32)">
            <summary>
            自定义扩展方法：将 System.String 类的新实例初始化为由重复指定次数的指定 Unicode 字符指示的值
            </summary>
            <param name="this">扩展对象</param>
            <param name="repeatCount">重复的次数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateRange(System.Char,System.Char)">
            <summary>
            自定义扩展方法：生成指定范围内的整数的序列。
            例如：@this 为 A，toCharacter 为 D，则返回 A B C D 的集合
            </summary>
            <param name="this">扩展对象</param>
            <param name="toCharacter"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Char)">
            <summary>
            自定义扩展方法：将指定的 Unicode 字符的值转换为等效的 8 位有符号整数。
            如果参数大于 SByte.MaxValue ，则返回 default(short)值
            </summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Char)">
            <summary>
            自定义扩展方法：将指定 Unicode 字符的值转换为等效的 16 位有符号整数。
            如果参数大于 Int16.MaxValue ，则返回 default(short)值
            </summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Char)">
            <summary>
            自定义扩展方法：将指定 Unicode 字符的值转换为等效的 16 位无符号整数。
            </summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Char)">
            <summary>
            自定义扩展方法：将指定 Unicode 字符的值转换为等效的 32 位有符号整数。
            </summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Char)">
            <summary>
            自定义扩展方法：将指定 Unicode 字符的值转换为等效的 32 位无符号整数。
            </summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Char)">
            <summary>自定义扩展方法：将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Char)">
            <summary>自定义扩展方法：自定义扩展方法：将指定的 Unicode 字符的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 Unicode 字符。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertToUtf32(System.Char,System.Char)">
            <summary>
            自定义扩展方法： 将 UTF-16 编码的代理项对的值转换为 Unicode 码位
            </summary>
            <param name="highSurrogate">高代理项码位（即码位从 U+D800 到 U+DBFF）</param>
            <param name="lowSurrogate">低代理项码位（即码位从 U+DC00 到 U+DFFF）</param>
            <returns> 高代理项码位和低代理项码位参数表示的 21 位 Unicode 码位</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetNumericValue(System.Char)">
            <summary>
            自定义扩展方法：将指定数字 Unicode 字符转换为双精度浮点数
            </summary>
            <param name="c">扩展对象</param>
            <returns>如果该字符表示数字，则为 c 的数值；否则为 -1.0</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetUnicodeCategory(System.Char)">
            <summary>
            自定义扩展方法：将指定 Unicode 字符分类到由某个 System.Globalization.UnicodeCategory 值标识的组中
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsControl(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于控制字符类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDigit(System.Char)">
            <summary>
             自定义扩展方法：判断指定的 Unicode 字符是否属于十进制数字类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetter(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于字母
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetterOrDigit(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符分类是字母还是十进制数字
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLower(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于小写字母类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNumber(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于数字类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPunctuation(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于标点符号类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSeparator(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于分隔符类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSurrogate(System.Char)">
            <summary>
            自定义扩展方法：判断指定的字符是否具有代理项码位
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsHighSurrogate(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 System.char 对象是否为高代理项
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLowSurrogate(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 System.char 对象是否为低代理项
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSurrogatePair(System.Char,System.Char)">
            <summary>
            自定义扩展方法：判断两个指定的 System.Char 对象是否形成代理项对
            </summary>
            <param name="highSurrogate">要作为代理项对的高代理项进行计算的字符</param>
            <param name="lowSurrogate"> 要作为代理项对的低代理项进行计算的字符</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSymbol(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于符号字符类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUpper(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于大写字母类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsWhiteSpace(System.Char)">
            <summary>
            自定义扩展方法：判断指定的 Unicode 字符是否属于空白类别
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLower(System.Char,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：将指定区域性特定格式设置信息将指定 Unicode 字符的值转换为它的小写等效项
            </summary>
            <param name="c">扩展对象</param>
            <param name="culture">提供区域性特定的大小写规则的对象，或 null</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLower(System.Char)">
            <summary>
            自定义扩展方法：将 Unicode 字符的值转换为它的小写等效项
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLowerInvariant(System.Char)">
            <summary>
            自定义扩展方法：使用固定区域性的大小写规则，将 Unicode 字符的值转换为其小写等效项
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Char)">
            <summary>
             自定义扩展方法：将字符穿转为字符串
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUpper(System.Char,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：将指定区域性特定格式设置信息将指定 Unicode 字符的值转换为它的大写等效项
            </summary>
            <param name="c">扩展对象</param>
            <param name="culture">提供区域性特定的大小写规则的对象，或 null</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUpper(System.Char)">
            <summary>
            自定义扩展方法：将 Unicode 字符的值转换为它的大写等效项
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUpperInvariant(System.Char)">
            <summary>
            自定义扩展方法：使用固定区域性的大小写规则，将 Unicode 字符的值转换为其大写等效项
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.In(System.Char,System.Char[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为true，否则为false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotIn(System.Char,System.Char[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否不存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为false，否则为true</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：将泛型数据中的元素加入集合中
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">泛型数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
             自定义扩展方法：循环将泛型数组中的元素作为参数传入泛型委托中并执行，如果执行结果为 true 则将该元素加入集合中
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="predicate">泛型委托</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddRangeIfNotContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：判断如果集合中不包含数组中的元素则将元素加入集合中
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">泛型数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveIfContains``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
             自定义扩展方法：如果集合中包含指定的值则从集合中移除
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="value">指定的值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveRange``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：将泛型数据中的元素从集合中移除
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">泛型数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveRangeIf``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean},``0[])">
            <summary>
             自定义扩展方法：循环将泛型数组中的元素作为参数传入泛型委托中并执行，如果执行结果为 true 则将该元素从集合中移除
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="predicate">泛型委托</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveRangeIfContains``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：判断如果集合中包含数组中的元素则将元素从集合中移除
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">泛型数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <summary>
             自定义扩展方法： 从集合汇总移除满足条件的元素 
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="predicate">泛型委托</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyTo``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <summary>
             将源集合从指定位置开始到指定位置结束的元素复制到目标集合中
            </summary>
            <typeparam name="T"></typeparam>
            <param name="this">源集合</param>
            <param name="destCollection">目标集合</param>
            <param name="startIndex">起始位置(从0开始)</param>
            <param name="count">需要复制的总记录数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAll``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：判断集合中是否包含数组中的所有元素。
             全部包含时返回 true，否则返回false
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。泛型集合</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAny``1(System.Collections.Generic.ICollection{``0},``0[])">
            <summary>
             自定义扩展方法：判断集合中是否包含数组中的任意一个元素。
             包含任意一个时返回 true，否则返回false
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。泛型集合</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
             自定义扩展方法：判断集合是否为 null 或者元素的个数等于0 
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
             自定义扩展方法：判断集合是否不为 null 且元素的个数大于0。
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHashtable(System.Collections.IDictionary)">
            <summary>
            自定义扩展方法：将字典转换为 Hashtable 对象
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToExpandObject(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
             自定义扩展方法：将字典转换为 ExpandoObject 对象
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToNameValueCollection``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
             自定义扩展方法：将字典转换为 NameValueCollection 集合对象
            </summary>
            <param name="dict">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回 true ；否则返回 false
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="value">指定的泛型类型值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回 true ；否则返回 false
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="valueFactory">指定的泛型类型值(产生值的委托方法)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddIfNotContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回 true ；否则返回 false
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="valueFactory">指定的泛型类型值(产生值的委托方法)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回并返回泛型类型的值；
             如果包含键，则更新键对应的值并返回更新后的值
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="value">指定的泛型类型值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回并返回泛型类型的值；
             如果包含键，则更新键对应的值并返回更新后的值
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="addValue">指定的泛型类型值，用于添加</param>
            <param name="updateValueFactory">指定的泛型类型值，用于更新</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
             自定义扩展方法：判断如果字典中不包含指定的键，则将键与值加入字典中并返回并返回泛型类型的值；
             如果包含键，则更新键对应的值并返回更新后的值
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="addValueFactory">指定的泛型类型值，用于添加(产生值的泛型委托)</param>
            <param name="updateValueFactory">指定的泛型类型值，用于更新</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAllKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
             自定义扩展方法：判断字典中是否包含数组中的所有元素。
             全部包含时返回 true，否则返回false
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="keys">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAnyKey``2(System.Collections.Generic.IDictionary{``0,``1},``0[])">
            <summary>
             自定义扩展方法：判断字典中是否包含数组中的任意一个元素。
             包含任意一个时返回 true，否则返回false
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="keys">指定的泛型类型键</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            自定义扩展方法：如果字典中不包含指定的键则将键值加入集合中，返回键对应的值
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="value">指定的泛型类型值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            自定义扩展方法：如果字典中不包含指定的键则将键值加入集合中，返回键对应的值
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
            <param name="valueFactory">指定的泛型类型值(产生值的泛型方法)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveIfContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            自定义扩展方法：如果字典中包含指定的键则从字典中移除该键值对
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="key">指定的泛型类型键</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
             自定义扩展方法：将字典转换为排序的字段
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSortedDictionary``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
             自定义扩展方法：将字典转换为排序的字段
            </summary>
            <typeparam name="TKey">泛型类型键</typeparam>
            <typeparam name="TValue">泛型类型值</typeparam>
            <param name="this">扩展对象</param>
            <param name="comparer">在比较键时要使用的 System.Collections.Generic.IComparer`1 实现；
             或者为 null，表示为键类型使用默认的比较器</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.MergeDistinctInnerEnumerable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
             自定义扩展方法：将集合的集合合并为一个并集
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.MergeInnerEnumerable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
             自定义扩展方法：将集合的集合合转换为一个集合
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
             自定义扩展方法：遍历集合的同时并执行指定的方法
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="action">要执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <summary>
             自定义扩展方法：遍历集合的同时并执行指定的方法
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="action">要执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.JoinWith``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.JoinWith``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringWith``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.String)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串。每个元素都将指定包裹符号包裹。
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号</param>
            <param name="leftWrapSymbol">左侧包裹符合。不能是双引号，可以是单引号、小括号、方括号、大括号、等号、横线等等</param>
            <param name="rightWrapSymbol">右侧包裹符合。不能是双引号，可以是单引号、小括号、方括号、大括号、等号、横线等等</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringLine``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串。每个对象显示为单独的一行。
             该方法一般用于将自定义类的对象集合拼接成多行显示的字符串。
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="ignoreNullObj">是否忽略集合中为 NULL 的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringLineWith``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串。每个对象显示为单独的一行。
             该方法一般用于将自定义类的对象集合拼接成多行显示的字符串。
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号。</param>
            <param name="ignoreNullObj">是否忽略集合中为 NULL 的对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToStringWith``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
            <summary>
             自定义扩展方法：将指定分隔符号将集合中的元素串联成一个字符串
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符号</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            自定义扩展方法：将 IEnumerable 集合转换为 DataTable
            </summary>
            <typeparam name="T"> 非 DataRow 类型的泛型类</typeparam>
            <param name="source">要加载到DataTable中的对象序列（一般是 Linq 对 DataTable 查询操作的结果）</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Nullable{System.Data.LoadOption})">
            <summary>
            自定义扩展方法：将 IEnumerable 集合转换为 DataTable
            </summary>
            <typeparam name="T"> 非 DataRow 类型的泛型类</typeparam>
            <param name="source">要加载到DataTable中的对象序列</param>
            <param name="table">输入表。表的架构必须与类型T匹配。如果表为null，则将使用从T类型的公共属性和字段创建的架构创建新表。</param>
            <param name="options">指定如何将源序列中的值应用于表中的现有行</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAll``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
             自定义扩展方法：判断集合中是否包含数组中的所有元素。
             全部包含时返回 true，否则返回false
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。泛型集合</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAny``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
             自定义扩展方法：判断集合中是否包含数组中的任意一个元素。
             包含任意一个时返回 true，否则返回false
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。泛型集合</param>
            <param name="values">泛型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             自定义扩展方法：判断集合是否为 null 或者不包含任何元素
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
             自定义扩展方法：判断集合是否不为 null 且包含元素
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
             自定义扩展方法：将 NameValueCollection 集合转换为字典 
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEntity``1(System.Data.DataRow)">
            <summary>
             自定义扩展方法：将 DataRow 数据行转换为T类型的实体对象。
            【该方法使用反射机制实现，性能较低。推荐使用Emit实现方式】
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToExpandObject(System.Data.DataRow)">
            <summary>
            自定义扩展方法：将 DataRow 数据行转换为 ExpandoObject 对象
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHashTable(System.Data.DataRow)">
            <summary>
             自定义扩展方法：将 DataRow 数据行对象转换为 Hashtable 对象(列名作为键，列值作为值)
            </summary>
            <param name="dr">扩展对象。DataRow 数据行对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToJsonString(System.Data.DataRow)">
            <summary>
            自定义扩展方法：将 DataRow 数据行转换为 Json 格式字符串
            </summary>
            <param name="dataRow">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToNewDataRow(System.Data.DataRow,System.Data.DataRow,System.String[])">
            <summary>
            自定义扩展方法：根据数组中提供的列，从源数据行中映射到新数据行
            </summary>
            <param name="sourceRow">扩展对象。源数据行</param>
            <param name="newRow">扩展对象。目标数据行</param>
            <param name="fieldNames">要映射到新数据行中的列的名称(列名称如果不存在于源数据行的列中则被忽略)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEmpty(System.Data.DataRow)">
            <summary>
            自定义扩展方法：判断 DataRow 数据行中的所有列的数据值是否都是空值或者 DBNull
            </summary>
            <param name="dr">扩展对象。DataRow 数据行对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotEmpty(System.Data.DataRow)">
            <summary>
            自定义扩展方法：判断 DataRow 数据行中是否一部分列中有数值，不是所有列的数据值都是空值或者 DBNull
            </summary>
            <param name="dr">扩展对象。DataRow 数据行对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty(System.Data.DataSet)">
            <summary>
             自定义扩展方法：判断 DataSet 是否为 null 或者 Tables 数量等于0
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty(System.Data.DataSet)">
            <summary>
             自定义扩展方法：判断 DataSet 是否不为 null 且 Tables 数量大于0。
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FirstRow(System.Data.DataTable)">
            <summary>
            自定义扩展方法：返回 DataTable 的第一行。
            如果 DataTable 为 null 或者数据行数为0则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ImportRows(System.Data.DataTable,System.Data.DataRow[])">
            <summary>
            自定义扩展方法：将 DataRow 数据行数组对象复制到 DataTable 中，保留任何属性设置以及初始值和当前值
            </summary>
            <param name="dt">扩展对象</param>
            <param name="rows">需要导入的数据行数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LastRow(System.Data.DataTable)">
            <summary>
            自定义扩展方法：返回 DataTable 的最后一行。
            如果 DataTable 为 null 或者数据行数为0则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Paged(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：将 DataTable 分页
            </summary>
            <param name="dt">扩展对象。DataTable 数据表对象</param>
            <param name="pageIndex">当前页索引</param>
            <param name="pageSize">当前页的记录数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Select(System.Data.DataTable,System.String)">
            <summary>
            自定义扩展方法：根据筛选条件，过滤掉部分数据，返回剩下数据
            </summary>
            <param name="dt">扩展对象。DataTable 实例</param>
            <param name="filterExpression">要用来筛选行的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SelectDistinct(System.Data.DataTable,System.String[])">
            <summary>
            自定义扩展方法：根据提供的字段名称，去除重复信息并返回新的DataTable
            </summary>
            <param name="sourceTable">DataTable实例对象</param>
            <param name="fieldNames">自定义字段数组，用于存储目标字段</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetAllColumnsReadOnlyToFalse(System.Data.DataTable)">
            <summary>
            自定义扩展方法：设置 DataTable 中所有的列的 ReadOnly 属性为 false。
            如果 DataTable 为 null 或者数据行数为0则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetAllColumnsReadOnlyToTrue(System.Data.DataTable)">
            <summary>
            自定义扩展方法：设置 DataTable 中所有的列的 ReadOnly 属性为 true。
            如果 DataTable 为 null 或者数据行数为0则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sort(System.Data.DataTable,System.String[])">
            <summary>
            自定义扩展方法：将 DataTable 排序，返回排序后的 DataTable
            </summary>
            <param name="dt">扩展对象</param>
            <param name="sortsFieldsAndDirection">排序字段与排序顺序</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEntityList``1(System.Data.DataTable)">
            <summary>
            自定义扩展方法：将 DataTable 数据行转换为T类型的实体对象集合
            【该方法使用反射机制实现，性能较低。大量数据时推荐使用Emit实现方式】
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToExpandObjectList(System.Data.DataTable)">
            <summary>
            自定义扩展方法：将 DataTable 数据行转换为 ExpandoObject 对象集合
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHashtableList(System.Data.DataTable,System.Boolean)">
            <summary>
             自定义扩展方法：将 DataTable 转换为 Hashtable 对象的集合
            </summary>
            <param name="dt">扩展对象。DataTable 实例</param>
            <param name="excludeEmptyRow">如果数据行中的数据都是空的，是否排除并不添加到集合中。默认值为 false</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHashtable(System.Data.DataTable)">
            <summary>
             自定义扩展方法：将 DataTable 转换为 Hashtable。
            </summary>
            <param name="dt">扩展对象。DataTable 实例</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHashtableByKeyValue(System.Data.DataTable,System.String,System.String)">
            <summary>
             自定义扩展方法：将 DataTable 转换为指定的键值对的 Hashtable
            </summary>
            <param name="dt">扩展对象。DataTable实例</param>
            <param name="keyField">指定键</param>
            <param name="valFiled">键值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToXmlString(System.Data.DataTable)">
            <summary>
             自定义扩展方法：将 DataTable 内容转换为 XML 格式字符串。
             如果 DataTable 为 null 或者其行计数为0，则返回空字符串
            </summary>
            <param name="dt">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty(System.Data.DataTable)">
            <summary>
             自定义扩展方法：判断 DataTable 是否为 null 或者数据行数量等于0
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty(System.Data.DataTable)">
            <summary>
             自定义扩展方法：判断 DataTable 是否不为 null 且数据行数量大于0。
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsColumn(System.Data.IDataReader,System.Int32)">
            <summary>
             自定义扩展方法：判断 IDataReader 数据行中是否包含指定列的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="columnIndex">指定列的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsColumn(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：判断 IDataReader 数据行中是否包含指定列
            </summary>
            <param name="this">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Data.IDataReader,System.Action{System.Data.IDataReader})">
            <summary>
             自定义扩展方法：循环 IDataReader 过程中执行指定的方法。返回源 IDataReader 对象
            </summary>
            <param name="this">扩展对象</param>
            <param name="action">方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetColumnNames(System.Data.IDataRecord)">
            <summary>
             自定义扩展方法： 获取 IDataRecord 中的列的名称集合
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为bool类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBoolean2(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为bool类型数据。
             是、否、true、false、Y、N、Yes、no(忽略大小写)、整数都可以转换成功(小于等于0的整数转换为 false，大于0的整数转换为 true)。
             如果 value 为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回 bool 类型的默认值
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBooleanNullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为bool类型数据(可空)
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetByte(System.Data.IDataReader,System.String,System.Byte)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为8位无符号整数
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetByteNullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为8位无符号整数(可空)
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为8位无符号整数数组
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为DateTime类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为DateTime类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDateTimeNullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为DateTime类型数据(可空)
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为decimal类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDecimalNullable(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为decimal类型数据。
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDouble(System.Data.IDataReader,System.String,System.Double)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为双精度浮点数
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDoubleNullable(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为双精度浮点数(可空)
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFloat(System.Data.IDataReader,System.String,System.Single)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为float(Single)类型数据。
            该方法等同于GetSingle()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFloatNullable(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为float(Single)类型数据。
             该方法等同于GetSingleNullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetGuid(System.Data.IDataReader,System.String,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为Guid类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetGuidNullable(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为Guid类型数据(可空)。
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt16(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为16位有符号整数。
             该方法等同于GetShort()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt16Nullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为16位有符号整数(可空)。
            该方法等同于GetShortNullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为32位有符号整数
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt32Nullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为16位有符号整数(可空)
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为64位有符号整数。
            该方法等同于GetLongNullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetInt64Nullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为64位有符号整数(可空)
            该方法等同于GetLongNullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetLong(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为64位有符号整数。
            该方法等同于GetInt64()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetLongNullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为64位有符号整数。
            该方法等同于GetInt64Nullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetShort(System.Data.IDataReader,System.String,System.Int16)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为16位有符号整数。
            该方法等同于GetInt16()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetShortNullable(System.Data.IDataReader,System.String)">
            <summary>
            自定义扩展方法：获取指定列名称对应的值，并转换为16位有符号整数(可空)。
            该方法等同于GetInt16Nullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSingle(System.Data.IDataReader,System.String,System.Single)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为单精度浮点数。
             该方法等同于GetFloat()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSingleNullable(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为单精度浮点数。
             该方法等同于GetFloatNullable()方法
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值，并转换为String类型数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <param name="defaultValueIfNull">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetValue(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：获取指定列名称对应的值
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDbNull(System.Data.IDataReader,System.Int32)">
            <summary>
            通过列的索引判断该列的值是否为 DBNull
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="i">列的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetName(System.Data.IDataReader,System.Int32)">
            <summary>
             通过列的索引获取列的名称
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="i">列的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetOrdinal(System.Data.IDataReader,System.String)">
            <summary>
             返回命名字段的索引
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="name">列的名字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSchemaTable(System.Data.IDataReader)">
            <summary>
            返回一个 System.Data.DataTable，它描述 System.Data.IDataReader 的列元数据
            </summary>
            <param name="dataReader">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDataTypeName(System.Data.IDataReader,System.Int32)">
            <summary>
             获取指定字段的数据类型信息
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="i">列的索引</param>
            <returns>指定字段的数据类型信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDataTypeName(System.Data.IDataReader,System.String)">
            <summary>
             获取指定字段的数据类型信息
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="name">列的名称</param>
            <returns>指定字段的数据类型信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFieldType(System.Data.IDataReader,System.Int32)">
            <summary>
             获取索引对应的列的值的数据类型
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="i">列的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFieldType(System.Data.IDataReader,System.String)">
            <summary>
             获取列名对应的列的值的数据类型
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="name">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetData(System.Data.IDataReader,System.Int32)">
            <summary>
             返回指定的列序号的 System.Data.IDataReader
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="i">列的索引</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetData(System.Data.IDataReader,System.String)">
            <summary>
             通过列的名称，返回指定的列序号的 System.Data.IDataReader
            </summary>
            <param name="dataReader">扩展对象</param>
            <param name="name">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDataTable(System.Data.IDataReader)">
            <summary>
             自定义扩展方法：将 IDataReader 对象转换为为 DataTable
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEntity``1(System.Data.IDataReader,ZCN.NET.Common.Enums.DBNullHandling)">
            <summary>
             自定义扩展方法：将 IDataReader 对象转换为一个实体对象
            【该方法使用反射机制实现，性能较低。大量数据时推荐使用Emit实现方式】
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="handling">针对DBNull字段的处理方式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEntityList``1(System.Data.IDataReader,ZCN.NET.Common.Enums.DBNullHandling)">
            <summary>
             自定义扩展方法：将 IDataReader 对象转换为实体对象集合
            【该方法使用反射机制实现，性能较低。大量数据时推荐使用Emit实现方式】
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="handling">针对DBNull字段的处理方式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToExpandObject(System.Data.IDataReader)">
            <summary>
             自定义扩展方法：将 IDataReader 对象转换为一个 ExpandoObject 对象
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToExpandObjectList(System.Data.IDataReader)">
            <summary>
             自定义扩展方法：将 IDataReader 对象转换为 ExpandoObject 对象集合
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDBNull(System.Data.IDataReader,System.String)">
            <summary>
             自定义扩展方法：判断 IDataReader 数据行中的字段列是否为 DBNull
            </summary>
            <param name="this">扩展对象</param>
            <param name="columnName">列的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlDbTypeToCSharpType(System.Data.SqlDbType)">
            <summary>
             自定义扩展方法：将 SqlDbType 转换为 CSharp 数据类型
            </summary>
            <param name="sqlDbType">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCSharpTypeName(System.String,System.Boolean)">
            <summary>
            自定义扩展方法：将 DataType 或 DataType.Name 类型转换为 CSharp 对应的类型名称的字符串形式
            </summary>
            <param name="dataTypeName">数据类型名称</param>
            <param name="isNullable">是否转换为Nullable类型。默认值为true</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsVariableString(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是可变长度字符串类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFixedLengthString(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是固定长度字符串类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLongString(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是长字符串类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsBinary(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是二进制类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsBlob(System.String,System.Nullable{System.Int32})">
            <summary>
            自定义扩展方法：判数据库中的断数据类型是否是 Blob 类型
            </summary>
            <param name="dataType">数据类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HasPrecision(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否有精度
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateTime(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是 DateTime 类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInteger(System.String)">
            <summary>
            自定义扩展方法：判断数据库中的数据类型是否是 Integer 类型
            </summary>
            <param name="dataType">数据类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.OracleNumberConversion(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            自定义扩展方法：将 Oracle 数据库类型 Number 转换为字符串形式数据类型名称
            </summary>
            <param name="precision">精度</param>
            <param name="scale">数值范围</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlTypeNameToCSharpTypeName(System.String)">
            <summary>
             自定义扩展方法：将字符串形式的Sql类型名称转换为 CSharp 对应的类型名称的字符串形式
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlTypeNameToSqlDbType(System.String)">
            <summary>
             自定义扩展方法：将字符串形式的Sql类型名称转换为枚举类型SqlDbType
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlTypeNameToSqlDbType(System.Byte)">
            <summary>
             自定义扩展方法：将8位无符号整数形式的Sql类型转换为枚举类型SqlDbType
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlSystemTypeToSqlDbType(System.Int16)">
            <summary>
             自定义扩展方法：将16位有符号整数形式的Sql类型转换为枚举类型SqlDbType
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SqlSystemTypeToSqlDbType(System.Int32)">
            <summary>
             自定义扩展方法：将32位有符号整数形式的Sql类型转换为枚举类型SqlDbType
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTimeOffset,System.Int32)">
            <summary>
             自定义扩展方法：给指定的日期点设置指定的小时
            </summary>
            <param name="current">扩展对象。要转换的日期和时间</param>
            <param name="hour">小时数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：给指定的日期点设置指定的小时分钟
            </summary>
            <param name="current">扩展对象。要转换的日期和时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：给指定的日期点设置指定的小时分钟秒
            </summary>
            <param name="current">扩展对象。要转换的日期和时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <param name="second">秒</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：给指定的日期点设置指定的小时分钟秒毫秒
            </summary>
            <param name="current">扩展对象。要转换的日期和时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <param name="second">秒</param>
            <param name="millisecond">毫秒</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
             自定义扩展方法：将时间转换为特定时区的时间
            </summary>
            <param name="dateTimeOffset">扩展对象。要转换的日期和时间</param>
            <param name="destinationTimeZone">要将 dateTime 转换到的时区</param>
            <returns>目标时区的日期和时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)">
            <summary>
             自定义扩展方法：根据时区标识符将时间转换为另一时区中的时间
            </summary>
            <param name="dateTimeOffset">扩展对象。要转换的日期和时间</param>
            <param name="destinationTimeZoneId">目标时区的标识符</param>
            <returns>目标时区的日期和时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTime(System.DateTime,System.TimeZoneInfo)">
            <summary>
            自定义扩展方法：将时间转换为特定时区的时间
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="destinationTimeZone">目标时区</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
            <summary>
            自定义扩展方法：将时间从一个时区转换为另一个时区
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="sourceTimeZone">源时区</param>
            <param name="destinationTimeZone">目标时区</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：根据时区标识符将时间转换为另一时区中的时间
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="destinationTimeZoneId">目标时区的标识符</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)">
            <summary>
            自定义扩展方法：根据时区标识符将时间从一个时区转换到另一个时区
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="sourceTimeZoneId">源时区的标识符</param>
            <param name="destinationTimeZoneId">目标时区的标识符</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
            自定义扩展方法：将协调世界时 (UTC) 转换为指定时区中的时间
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="destinationTimeZone"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeToUtc(System.DateTime)">
            <summary>
            自定义扩展方法： 将当前日期和时间转换为协调世界时 (UTC)
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)">
            <summary>
            自定义扩展方法：将指定时区中的时间转换为协调世界时 (UTC)
            </summary>
            <param name="dateTime">扩展对象。日期时间</param>
            <param name="sourceTimeZone">目标时区</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)">
            <summary>
            自定义扩展方法：判断指定日期和时间是否处于指定的夏时制期间
            </summary>
            <param name="time">扩展对象。日期时间</param>
            <param name="daylightTimes">夏时制期间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            自定义扩展方法：获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="showSecond">是否显示秒</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            自定义扩展方法：获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="showSecond">是否显示秒</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateString(System.DateTime)">
            <summary>
            自定义扩展方法：获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            自定义扩展方法：获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            自定义扩展方法：获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeStringWithMillisecond(System.DateTime)">
            <summary>
            自定义扩展方法：获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeStringWithMillisecond(System.Nullable{System.DateTime})">
            <summary>
            自定义扩展方法：获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChineseDateString(System.DateTime)">
            <summary>
            自定义扩展方法：获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            自定义扩展方法：获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            自定义扩展方法：获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="showSecond">是否显示秒</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            自定义扩展方法：获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="showSecond">是否显示毫秒</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFullDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(F,完整日期和时间,长日期和长时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016年3月20日 12:20:33
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFullDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(F,完整日期和时间,长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFullDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(F,完整日期和时间,长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DateTimeToInt(System.DateTime)">
            <summary>
             自定义扩展方法：计算传入的日期时间与1970-01-01 00:00:00之间的秒数差(例如：微信里面的消息创建时间)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateShortTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(f，完整日期和时间,长日期和短时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016年3月20日 12:20
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateShortTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(f，完整日期和时间,长日期和短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(f，完整日期和时间,长日期和短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(D，长日期)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016年3月20日
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(D，长日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(D，长日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(F,长日期和长时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016年3月20日 12:20:30
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(F,长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(F,长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(T，长时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 12:20:30
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(T，长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(T，长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMonthDayString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(m，月份日期)设置。
            例如：中文简体区域性 DateTime.Now 转换为 11月15日
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMonthDayString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(m，月份日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMonthDayString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(m，月份日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToRFC1123String(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(r，GTM格式时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 Thu,09 Nov 2017 09:15:27 GMT
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToRFC1123String(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(r，GTM格式时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToRFC1123String(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(r，GTM格式时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateLongTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(G,短日期和长时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016/3/20 12:20:33
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateLongTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(G,短日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateLongTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(G,短日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(d，短日期)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016/3/12
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(d，短日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(d，短日期)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(g,短日期和短时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016/3/12 12:20
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(g,短日期和短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(g,短日期和短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(t，短时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 12:20
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(t，短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(t，短时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSortableDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(s，基于 ISO 8601)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016-12-20T09:20:30
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSortableDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(s，基于 ISO 8601)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(s，基于 ISO 8601)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(u，通用时间的格式)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016-12-20 09:20:30Z
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(u，通用时间的格式)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(u，通用时间的格式)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableLongDateTimeString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(U，通用时间的完整日期和时间，长日期和长时间)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016年12月20日 1:20:30
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableLongDateTimeString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(U，通用时间的完整日期和时间，长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniversalSortableLongDateTimeString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(U，通用时间的完整日期和时间，长日期和长时间)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToYearMonthString(System.DateTime)">
            <summary>
            自定义扩展方法：基于当前区域性将日期时间进行格式化(y，年份月份)设置。
            例如：中文简体区域性 DateTime.Now 转换为 2016月9日
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToYearMonthString(System.DateTime,System.String)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(y，年份月份)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToYearMonthString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：基于制定的区域性将日期时间进行格式化(y，年份月份)设置
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="culture">区域性</param>
            <returns>字符串形式的日期</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Age(System.DateTime)">
            <summary>
            自定义扩展方法：计算年龄
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DateDiff(System.DateTime,System.DateTime)">
            <summary>
            计算2个日期时间差(绝对值)。返回具体的差值信息(例如：2天6小时51分钟31秒234毫秒);
            如果天数等于0，则不显示天数；
            如果小时等于0，则不显示小时；
            如果分钟等于0，则不显示分钟；
            如果秒数等于0，则不显示秒数
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DateDiff2(System.DateTime,System.DateTime)">
            <summary>
             计算2个日期之间的日期时间差。例如：2天 8小时 3分钟 27秒 15毫秒
            </summary>
            <param name="dateTime1"></param>
            <param name="dateTime2"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DaysInMonth(System.DateTime)">
            <summary>
            自定义扩展方法：返回指定年和月中的天数。
             如果 month 等于 2（表示二月），则返回值为 28 或 29，具体取决于 year 是否为闰年
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DaysInMonth(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：返回指定年和月中的天数。
             如果 month 等于 2（表示二月），则返回值为 28 或 29，具体取决于 year 是否为闰年。
             如果 month 小于1或者大于12 则返回-1
            </summary>
            <param name="year">扩展对象。年份</param>
            <param name="month">月份，月（介于 1 到 12 之间的一个数字）</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Elapsed(System.DateTime)">
            <summary>
            自定义扩展方法：计算扩展对象的值与当前时间的时间间隔
            </summary>
            <param name="datetime">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EndOfDay(System.DateTime)">
            <summary>
            自定义扩展方法：返回一天的最后一刻，时间设置为“23:59:59:999”。使用“datetime2”格式SQL保持精度
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EndOfMonth(System.DateTime)">
            <summary>
            自定义扩展方法：返回一个月最后一天的最后一刻，时间设置为“23:59:59:999”。
            使用“datetime2”格式SQL保持精度
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EndOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
             自定义扩展方法： 返回一周的最后一天的最后一刻，时间设置为“23:59:59:999”
            </summary>
            <param name="dt">扩展对象。日期时间</param>
            <param name="startDayOfWeek">一周的第一天，默认设置为星期日</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EndOfYear(System.DateTime)">
            <summary>
            自定义扩展方法：返回一年最后一天的最后一刻，时间设置为“23:59:59:999”。
            使用“datetime2”格式SQL保持精度
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FirstDayOfWeek(System.DateTime)">
            <summary>
            自定义扩展方法：计算指定日期的一周的第一天
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsAfternoon(System.DateTime)">
            <summary>
            自定义扩展方法：计算指定日期时间是否是下午(12点(包含)以后为下午时间)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            自定义扩展方法：判断2个日期是否相等
            </summary>
            <param name="date">扩展对象。日期时间</param>
            <param name="dateToCompare">目标日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFuture(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期时间是否是未来(大于DateTime.Now)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLastDayOfMonth(System.DateTime)">
            <summary>
            自定义扩展方法：判断一个日期是否是一个月的最后一天
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DaysCountOfMonth(System.DateTime)">
            <summary>
            自定义扩展方法：计算每个月的天数
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLeapYear(System.DateTime)">
            <summary>
            自定义扩展方法：判断日期是否是闰年
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLeapYear(System.Int32)">
            <summary>
            自定义扩展方法：判断是否是闰年
            </summary>
            <param name="this">扩展对象。年份</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMorning(System.DateTime)">
            <summary>
            自定义扩展方法：计算指定日期时间是否是上午(12点以前为上午时间)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNow(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期时间是否是现在(等于DateTime.Now)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPast(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期时间是否是过去(小于DateTime.Now)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
            自定义扩展方法：判断2个时间是否相等
            </summary>
            <param name="time">扩展对象。日期时间</param>
            <param name="timeToCompare">目标日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsToday(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是今天
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsWeekDay(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是工作日(周一到周五)
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsWeekendDay(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是周六周日
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LastDayOfWeek(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是一周的最后一天
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTime,System.Int32)">
            <summary>
            自定义扩展方法：给指定的日期时间设置指定的小时
            </summary>
            <param name="current">扩展对象。日期时间</param>
            <param name="hour">小时数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTime,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：给指定的日期时间设置指定的小时分钟
            </summary>
            <param name="current">扩展对象。日期时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：给指定的日期时间设置指定的小时分钟秒
            </summary>
            <param name="current">扩展对象。日期时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <param name="second">秒</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：给指定的日期时间设置指定的小时分钟秒毫秒
            </summary>
            <param name="current">扩展对象。日期时间</param>
            <param name="hour">小时数</param>
            <param name="minute">分钟数</param>
            <param name="second">秒</param>
            <param name="millisecond">毫秒</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.StartOfDay(System.DateTime)">
            <summary>
            自定义扩展方法：返回一天中的第一刻，时间设置为“00:00:00:000”
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.StartOfMonth(System.DateTime)">
            <summary>
            自定义扩展方法：返回一个月的第一天的第一刻，时间设置为“00:00:00:000”
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.StartOfWeek(System.DateTime,System.DayOfWeek)">
            <summary>
            自定义扩展方法：返回指定日期所在星期的第一天的第一刻，时间设置为“00:00:00:000”
            </summary>
            <param name="dt">扩展对象。日期时间</param>
            <param name="startDayOfWeek">一周开始的第一天</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.StartOfYear(System.DateTime)">
            <summary>
            自定义扩展方法：返回指定日期所在年的第一个月的第一天的第一刻，时间设置为“00:00:00:000”
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Tomorrow(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是明天
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            自定义扩展方法：计算指定的日期是一年中的第几周
            </summary>
            <param name="this">扩展对象。日期时间</param>
            <param name="cultureInfo">区域性对象，例如：new CultureInfo("zh-CN")</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Yesterday(System.DateTime)">
            <summary>
            自定义扩展方法：判断指定的日期是否是昨天
            </summary>
            <param name="this">扩展对象。日期时间</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Decimal)">
            <summary>自定义扩展方法：将指定十进制数字的值转换为等效的布尔值。</summary>
            <param name="value">要转换的数字。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Decimal)">
            <summary>
            自定义扩展方法：将指定 System.decimal 的值转换为等效的 8 位无符号整数。
            如果参数小于 <see cref="F:System.Byte.MinValue" /> 或大于 <see cref="F:System.Byte.MaxValue" /> 则返回0
            </summary>
            <param name="value">扩展对象。大于 <see cref="F:System.Byte.MinValue" /> 或小于 <see cref="F:System.Byte.MaxValue" /></param>
            <returns>等效于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Decimal)">
            <summary>
            自定义扩展方法：将指定 System.decimal 的值转换为等效的 8 位有符号整数
            如果参数小于 <see cref="F:System.SByte.MinValue" /> 或大于 <see cref="F:System.SByte.MaxValue" /> 则返回0
            </summary>
            <param name="value">扩展对象</param>
            <returns>等效于 value 的 8 位有符号整数。大于 <see cref="F:System.SByte.MinValue" /> 或小于 <see cref="F:System.SByte.MaxValue" /></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.Decimal 的值转换为等效的双精度浮点数
            </summary>
            <param name="value">扩展对象</param>
            <returns> 等效于decimal值的双精度浮点数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 16 位有符号整数。
             如果参数 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />则返回 default(Int16)。
            </summary>
            <param name="value">扩展对象。 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /></param>
            <returns> 等效于decimal值的 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 16 位无符号整数
             如果参数 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则返回 default(UInt16)。
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /></param>
            <returns> 等效于decimal值的 16 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 16 位有符号整数。
             如果参数 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" />则返回 default(Int16)。
            </summary>
            <param name="value">扩展对象。 小于 <see cref="F:System.Int16.MinValue" /> 或大于 <see cref="F:System.Int16.MaxValue" /></param>
            <returns> 等效于decimal值的 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 16 位无符号整数
             如果参数 小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" />，则返回 default(UInt16)。
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.UInt16.MinValue" /> 或大于 <see cref="F:System.UInt16.MaxValue" /></param>
            <returns> 等效于decimal值的 16 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 32 位有符号整数。
             如果参数小于 Int32.MinValue 或大于 Int32.MaxValue，则返回 default(Int32)
            </summary>
            <returns> 等效于decimal值的 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 32 位无符号整数
             如果参数小于 UInt32.MinValue 或大于 UInt32.MaxValue，则返回 default(UInt32)值
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.UInt32.MinValue" /> 或大于 <see cref="F:System.UInt32.MaxValue" /></param>
            <returns> 等效于decimal值的 32 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 64 位有符号整数。
             如果参数小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则返回 default(Int64)
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /></param>
            <returns> 等效于decimal值的 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 64 位无符号整数
             如果参数小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则返回 default(UInt64)
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /></param>
            <returns> 等效于decimal值的 64 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong2(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 64 位有符号整数
             如果参数小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" />，则返回 default(Int64)
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.Int64.MinValue" /> 或大于 <see cref="F:System.Int64.MaxValue" /></param>
            <returns> 等效于decimal值的 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.decimal 值转换为等效的 64 位无符号整数
             如果参数小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" />，则返回 default(UInt64)
            </summary>
            <param name="value">扩展对象。小于 <see cref="F:System.UInt64.MinValue" /> 或大于 <see cref="F:System.UInt64.MaxValue" /></param>
            <returns> 等效于decimal值的 64 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToOACurrency(System.Decimal)">
            <summary>
             自定义扩展方法：将指定 System.Decimal 值转换为等效的 OLE 自动化货币值，该值包含在一个 64 位有符号整数中
            </summary>
            <param name="value">扩展对象</param>
            <returns>包含 value 的 OLE 自动化等效值的 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Decimal)">
            <summary>
             自定义扩展方法：将指定的双精度浮点数的值转换为等效的单精度浮点数。
             使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。
            </summary>
            <param name="value">扩展对象</param>
            <returns> 等效于decimal值的单精度浮点数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.Decimal)">
            <summary>
             自定义扩展方法：将指定的双精度浮点数的值转换为等效的单精度浮点数。
             使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。
            </summary>
            <param name="value">扩展对象</param>
            <returns> 等效于decimal值的单精度浮点数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Divide(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：除法运算。
             两个指定的 System.Decimal 值相除。如果除数为0则返回0
            </summary>
            <param name="d1">扩展对象。被除数</param>
            <param name="d2">除数</param>
            <returns>d1 除以 d2 的结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBits(System.Decimal)">
            <summary>
             自定义扩展方法：将 System.Decimal 的指定实例的值转换为其等效的二进制表示形式
            </summary>
            <param name="d">扩展对象</param>
            <returns>包含decimal值的二进制表示形式、由四个元素组成的 32 位有符号整数数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Multiply(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：乘法运算。  
             两个指定的 System.Decimal 值相乘
            </summary>
            <param name="d1">被乘数</param>
            <param name="d2">乘数</param>
            <returns>d1 和 d2 相乘的结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Negate(System.Decimal)">
            <summary>
             自定义扩展方法：取反运算。
             返回指定的 System.decimal 值乘以 -1 的结果
            </summary>
            <param name="d">扩展对象</param>
            <returns>取反的结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Remainder(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：取模(余数)运算。
             两个指定的 System.decimal 值相除，返回余数。如果除数为0则返回0
            </summary>
            <param name="d1">扩展对象。被除数</param>
            <param name="d2">除数</param>
            <returns>d1 除以 d2 的余数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Mode(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：两个指定的 System.decimal 值相除，返回余数。如果除数为0则返回0
            </summary>
            <param name="d1">扩展对象。被除数</param>
            <param name="d2">除数</param>
            <returns>d1 除以 d2 的余数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Subtract(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：减法运算。
             从一个 System.decimal 值中减去指定的另一个这种类型的值
            </summary>
            <param name="d1">扩展对象。被减数</param>
            <param name="d2">减数</param>
            <returns>d1 减 d2 所得的 System.decimal 结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Decimal)">
            <summary>
             自定义扩展方法：返回 16 位有符号整数的绝对值
            </summary>
            <param name="value">扩展对象</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Ceiling(System.Decimal)">
            <summary>
             自定义扩展方法：返回大于或等于指定的十进制数的最小整数值
            </summary>
            <param name="value">扩展对象</param>
            <returns>大于或等于指定的十进制数的最小整数值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Floor(System.Decimal)">
            <summary>
             自定义扩展方法：返回小于或等于指定小数的最大整数
            </summary>
            <param name="value">扩展对象</param>
            <returns>小于或等于指定小数的最大整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：返回两个十进制数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 System.Decimal 数字中的第一个</param>
            <param name="value2">要比较的两个 System.Decimal 数字中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Decimal,System.Decimal)">
            <summary>
             自定义扩展方法：返回两个十进制数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 System.Decimal 数字中的第一个</param>
            <param name="value2">要比较的两个 System.Decimal 数字中的第二个</param>
            <returns>val1 或 val2 参数中较小的一个</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Decimal)">
            <summary>
             自定义扩展方法：(四舍六入五取偶)将小数值舍入到最接近的整数值。
             如果 decimal 的值的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数
             (10.4 返回 10；10.5 返回 10；10.6 返回 11)。
             请注意，此方法返回 System.decimal，而不是整数类型
            </summary>
            <param name="d">扩展对象</param>
            <returns>最接近参数 d 的整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Decimal,System.Int32)">
            <summary>
             自定义扩展方法：(四舍六入五取偶)将小数值按指定的小数位数舍入
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <returns>其小数数字等于 decimals 的值的最接近的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Decimal,System.MidpointRounding)">
            <summary>
             自定义扩展方法：(四舍六入五取偶)将小数值舍入到最接近的整数。
             参数 MidpointRounding，指定当一个值正好处于另两个数中间时如何舍入这个值
            </summary>
            <param name="d">扩展对象</param>
            <param name="mode">在两个数字之间时如何舍入的规范</param>
            <returns>最接近 decimal 的值的整数。如果 decimal 的值是两个数字的中值，这两个数字一个为偶数，另一个为奇数，
            则 mode 确定返回两个数字中的哪一个</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Decimal,System.Int32,System.MidpointRounding)">
            <summary>
             自定义扩展方法：(四舍六入五取偶)将小数值按指定的小数位数舍入。
             参数 MidpointRounding，指定当一个值正好处于另两个数中间时如何舍入这个值
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <param name="mode">在两个数字之间时如何舍入的规范</param>
            <returns>最接近 decimal 值的 decimals 位小数的数字。如果 decimal值 的小数数字小于 decimals，则返回的 d 保持不变</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round2(System.Decimal,System.Int32)">
            <summary>
            自定义扩展方法：(真正的中国式四舍五入)将小数值按指定的小数位数舍入
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <returns>其小数数字等于 decimals 的值的最接近的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Decimal)">
            <summary>
             自定义扩展方法：返回表示数字符号的值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Truncate(System.Decimal)">
            <summary>
             自定义扩展方法：计算指定小数的整数部分
            </summary>
            <param name="d">扩展对象</param>
            <returns>整数部分(即舍弃小数位后剩余的数)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Combine(System.Delegate,System.Delegate)">
            <summary>
             自定义扩展方法：将两个委托的调用列表连接在一起。
             返回一个新委托，它的调用列表将 a 和 b 的调用列表按该顺序连接在一起。
             如果 b 为 null，则返回 a，
             如果 a 为 null，则返回 b，
             如果 a 和 b 均为空引用，则返回空引用
            </summary>
            <param name="a">扩展对象。最先出现其调用列表的委托</param>
            <param name="b">最后出现其调用列表的委托</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Remove(System.Delegate,System.Delegate)">
            <summary>
             自定义扩展方法：从一个委托的调用列表中移除另一个委托的最后一个调用列表。
             返回一个新委托，其调用列表的构成方法为：获取 source 的调用列表，
             如果在 source 的调用列表中找到了 value 的调用列表，则从中移除 value 的最后一个调用列表。 
             如果 value 为 null，或在 source 的调用列表中没有找到 value 的调用列表，则返回 source。
             如果 value 的调用列表等于 source 的调用列表，或 source 为空引用，则返回空引用
            </summary>
            <param name="source">扩展对象。委托，将从中移除 value 的调用列表</param>
            <param name="value">委托，它提供将从其中移除 source 的调用列表的调用列表</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveAll(System.Delegate,System.Delegate)">
            <summary>
             自定义扩展方法：从一个委托的调用列表中移除另一个委托的所有调用列表。
             返回一个新委托，其调用列表的构成方法为：获取 source 的调用列表，
             如果在 source 的调用列表中找到了 value 的调用列表，则从中移除 value 的最后一个调用列表。 
             如果 value 为 null，或在 source 的调用列表中没有找到 value 的调用列表，则返回 source。
             如果 value 的调用列表等于 source 的调用列表，或 source 为空引用，则返回空引用
            </summary>
            <param name="source">扩展对象。委托，将从中移除 value 的调用列表</param>
            <param name="value">委托，它提供将从其中移除 source 的调用列表的调用列表</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Double)">
            <summary>自定义扩展方法：将指定双精度浮点数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Double)">
            <summary>
            自定义扩展方法：将指定双精度浮点数的值转换为等效的 8 位无符号整数。
            如果参数大于 byte.MaxValue 或者小于 byte.MinValue， 则返回 default(byte)值。
            </summary>
            <param name="value">双精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的 8 位带符号整数。
            如果参数大于 sbyte.MaxValue 或者小于 sbyte.MinValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns> </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的十进制数。
            如果转换失败，则返回 default(decimal)值。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的 16 位带符号整数。
            如果参数小于 Int16.MinValue 或者 大于 Int16.MaxValue，则返回 default(Int16)。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的 16 位无符号整数。
            如果参数小于 UInt16.MinValue 或者 大于 UInt16.MaxValue，则返回 default(UInt16)。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToIn32(System.Double)">
            <summary>
             自定义扩展方法：将指定双精度浮点数的值转换为等效的 32 位带符号整数。
             如果参数小于 int.MinValue 或者 大于 int.MaxValue，则返回 default(Int32)。
            </summary>
            <param name="value">单精度浮点数。</param>
            <returns>
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUIn32(System.Double)">
            <summary>
             自定义扩展方法：将指定双精度浮点数的值转换为等效的 32 位无符号整数。
             如果参数小于 uint.MinValue 或者 大于 uint.MaxValue，则返回 default(UInt32)。
            </summary>
            <param name="value">单精度浮点数。</param>
            <returns>
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的 64 位带符号整数。
            如果参数小于 Int64.MinValue 或者 大于 Int64.MaxValue，则返回 default(Int64)。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns>
            <paramref name="value" />，舍入为最接近的 64 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Double)">
            <summary>
            自定义扩展方法：将指定的双精度浮点数的值转换为等效的 64 位无符号整数。
            如果参数小于 UInt64.MinValue 或者 大于 UInt64.MaxValue，则返回 default(UInt64)。
            </summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Double)">
            <summary>自定义扩展方法：将指定的双精度浮点数的值转换为等效的单精度浮点数。
            使用“舍入为最接近的数字”规则对 <paramref name="value" /> 进行舍入。 例如，当舍入为两位小数时，值 2.345 变成 2.34，而值 2.355 变成 2.36。</summary>
            <param name="value">要转换的双精度浮点数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromOADate(System.Double)">
            <summary>
            自定义扩展方法：返回与指定的 OLE 自动化日期等效的 System.DateTime
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns>与双精度浮点数相同的日期和时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInfinity(System.Double)">
            <summary>
            自定义扩展方法：判断指定数字是计算为负无穷大还是正无穷大。
            如果计算结果为 System.Double.PositiveInfinity 或 System.Double.NegativeInfinity，则为true；否则为 false
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNegativeInfinity(System.Double)">
            <summary>
            自定义扩展方法：判断指定数字是计算是否为负无穷大
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPositiveInfinity(System.Double)">
            <summary>
            自定义扩展方法：判断指定数字是计算是否为正无穷大
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNaN(System.Double)">
            <summary>
            自定义扩展方法：判断指定数字的计算结果是否为不是数字 (System.Double.NaN) 的值
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns>计算结果为 System.Double.NaN，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Double)">
            <summary>
            自定义扩展方法：返回指定数字的绝对值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Acos(System.Double)">
            <summary>
            自定义扩展方法：返回余弦值为指定数字的角度。
            返回角度 θ，以弧度为单位，满足 θ (介于0到π之间)。
            如果余弦值大于1或者小于-1则返回 System.Double.NaN
            </summary>
            <param name="d">扩展对象。表示余弦值的数字(介于-1到1之间)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Asin(System.Double)">
            <summary>
            自定义扩展方法：返回正弦值为指定数字的角度。
            返回角度 θ，以弧度为单位，满足 θ (介于-π/2到π/2之间)。
            如果余弦值大于1或者小于-1则返回 System.Double.NaN
            </summary>
            <param name="d">扩展对象。表示正弦值的数字(介于-1到1之间)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Atan(System.Double)">
            <summary>
            自定义扩展方法：返回正切值为指定数字的角度。
            角度 θ，以弧度为单位，满足 -π/2 ≤θ≤π/2。
            如果 正切值 等于 System.Double.NaN，则为 System.Double.NaN；
            如果 正切值 等于 System.Double.NegativeInfinity，则为舍入为双精度值 (-1.5707963267949) 的 -π/2；
            如果 正切值 等于 System.Double.PositiveInfinity，则为舍入为双精度值 (1.5707963267949) 的 π/2
            </summary>
            <param name="d">扩展对象。表示正切值的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Atan2(System.Double,System.Double)">
            <summary>
            自定义扩展方法：返回正切值为两个指定数字的商的角度。
            返回角度 θ，以弧度为单位，满足 -π≤θ≤π，且 tan(θ) = y / x，其中 (x, y) 是笛卡尔平面中的一个点。
            请看下面：如果 (x, y) 在第 1 象限，则 0 &lt; θ &lt; π/2。
            如果 (x, y) 在第 2 象限，则 π/2 &lt; θ≤π。
            如果 (x, y) 在第 3 象限，则 -π &lt; θ &lt; -π/2。
            如果 (x, y) 在第 4 象限，则 -π/2 &lt; θ &lt; 0。
            
            如果点在象限的边界上，则返回值如下：
            如果 y 为 0 并且 x 不为负值，则θ = 0。
            如果 y 为 0 并且 x 为负值，则 θ = π。
            如果 y 为正值并且 x 为 0，则 θ = π/2。
            如果 y 负值并且 x 为 0，则θ = -π/2
            </summary>
            <param name="y">扩展对象。点的 y 坐标</param>
            <param name="x">点的 x 坐标</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Ceiling(System.Double)">
            <summary>
            自定义扩展方法：返回大于或等于指定的双精度浮点数的最小整数值
            </summary>
            <param name="a">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Cos(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的余弦值。
            如果 角度 等于 System.Double.NaN、System.Double.NegativeInfinity 或 
            System.Double.PositiveInfinity，此方法将返回 System.Double.NaN
            </summary>
            <param name="d">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Cosh(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的双曲余弦值。
            如果 角度 等于 System.Double.NaN、System.Double.NegativeInfinity 或 
            System.Double.PositiveInfinity，此方法将返回 System.Double.NaN
            </summary>
            <param name="value">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Exp(System.Double)">
            <summary>
            自定义扩展方法：返回 e 的指定次幂。
            返回数字 e 的 d 次幂。如果 d 等于 System.Double.NaN 或 System.Double.PositiveInfinity，则返回该值。
            如果 d 等于 System.Double.NegativeInfinity，则返回 0
            </summary>
            <param name="d">扩展对象。指定幂的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Floor(System.Double)">
            <summary>
            自定义扩展方法：返回小于或等于指定双精度浮点数的最大整数。
            返回小于或等于 浮点数 的最大整数。
            如果 浮点数 等于 System.Double.NaN、System.Double.NegativeInfinity 或 
            System.Double.PositiveInfinity，则返回该值
            </summary>
            <param name="d">扩展对象。双精度浮点数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IEEERemainder(System.Double,System.Double)">
            <summary>
            自定义扩展方法：(取余数运算)返回一指定数字被另一指定数字相除的余数。
            该数等于 x - ( y Q)，其中 Q 是 x / y 的商的最接近整数（如果 x / y 在两个整数中间，则返回偶数）。
            如果 x - ( y Q) 为零，则在 x 为正时返回值 +0，而在 x 为负时返回 -0。如果 y 等于 0，则返回 System.Double.NaN
            </summary>
            <param name="x">扩展对象。被除数</param>
            <param name="y">除数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Log(System.Double)">
            <summary>
            自定义扩展方法：返回指定数字的自然对数（底为 e）。
            </summary>
            <param name="d">扩展对象。要查找其对数的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Log(System.Double,System.Double)">
            <summary>
            自定义扩展方法：返回指定数字在使用指定底时的对数
            </summary>
            <param name="d">扩展对象。要查找其对数的数字</param>
            <param name="newBase">对数的底</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Log10(System.Double)">
            <summary>
            自定义扩展方法：返回指定数字以 10 为底的对数
            </summary>
            <param name="d">扩展对象。要查找其对数的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Double,System.Double)">
            <summary>
            自定义扩展方法：返回两个双精度浮点数字中较大的一个
            </summary>
            <param name="val1">扩展对象。要比较的两个双精度浮点数中的第一个</param>
            <param name="val2">要比较的两个双精度浮点数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Double,System.Double)">
            <summary>
            自定义扩展方法：返回两个双精度浮点数字中较小的一个
            </summary>
            <param name="val1">扩展对象。要比较的两个双精度浮点数中的第一个</param>
            <param name="val2">要比较的两个双精度浮点数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Pow(System.Double,System.Double)">
            <summary>
            自定义扩展方法：返回指定数字的指定次幂。
            返回 数字 x 的 y 次幂
            </summary>
            <param name="x">扩展对象。要乘幂的双精度浮点数</param>
            <param name="y">指定幂的双精度浮点数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Double)">
            <summary>
            自定义扩展方法：(四舍六入五取偶)将双精度浮点值舍入到最接近的整数值。
            如果 double 的值的小数部分正好处于两个整数中间，其中一个整数为偶数，另一个整数为奇数，则返回偶数
            (10.4 返回 10；10.5 返回 10；10.6 返回 11)。
            请注意，此方法返回 System.Double，而不是整数类型
            </summary>
            <param name="d">扩展对象</param>
            <returns>最接近参数 d 的整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Double,System.Int32)">
            <summary>
            自定义扩展方法：(四舍六入五取偶)将双精度浮点值按指定的小数位数舍入
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <returns>其小数数字等于 decimals 的值的最接近的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Double,System.MidpointRounding)">
            <summary>
             自定义扩展方法：(四舍六入五取偶)将双精度浮点值舍入到最接近的整数。
             参数 MidpointRounding，指定当一个值正好处于另两个数中间时如何舍入这个值
            </summary>
            <param name="d">扩展对象</param>
            <param name="mode">在两个数字之间时如何舍入的规范</param>
            <returns>最接近 double 的值的整数。如果 double 的值是两个数字的中值，这两个数字一个为偶数，另一个为奇数，
            则 mode 确定返回两个数字中的哪一个</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round(System.Double,System.Int32,System.MidpointRounding)">
            <summary>
            自定义扩展方法：(四舍六入五取偶)将双精度浮点值按指定的小数位数舍入。
            参数 MidpointRounding，指定当一个值正好处于另两个数中间时如何舍入这个值
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <param name="mode">在两个数字之间时如何舍入的规范</param>
            <returns>最接近 double 值的 decimals 位小数的数字。如果 double值 的小数数字小于 decimals，则返回的 d 保持不变</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Round2(System.Double,System.Int32)">
            <summary>
            自定义扩展方法：(真正的中国式四舍五入)将双精度浮点值按指定的小数位数舍入
            </summary>
            <param name="d">扩展对象</param>
            <param name="decimals">返回值中的小数位数</param>
            <returns>其小数数字等于 decimals 的值的最接近的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Double)">
            <summary>
             自定义扩展方法：返回表示数字符号的值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sin(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的正弦值。
            如果 角度 等于 System.Double.NaN、System.Double.NegativeInfinity 或 
            System.Double.PositiveInfinity，此方法将返回 System.Double.NaN
            </summary>
            <param name="a">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sinh(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的双曲正弦值。
            如果 角度 等于 System.Double.NaN、System.Double.NegativeInfinity 或 
            System.Double.PositiveInfinity，此方法将返回 System.Double.NaN
            </summary>
            <param name="value">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sqrt(System.Double)">
            <summary>
            自定义扩展方法：返回指定数字的平方根。
            参数返回值零或正数d 的正平方根。负System.Double.NaN 等于 System.Double.NaN；
            System.Double.NaN 等于System.Double.PositiveInfinity
            </summary>
            <param name="d">扩展对象。数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Tan(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的正切值。
            如果 角度 等于 System.Double.NaN、System.Double.NegativeInfinity 或 System.Double.PositiveInfinity，
            此方法将返回System.Double.NaN
            </summary>
            <param name="a">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Tanh(System.Double)">
            <summary>
            自定义扩展方法：返回指定角度的双曲正切值。
            如果 value 等于 System.Double.NegativeInfinity，则此方法返回 -1。
            如果值等于 System.Double.PositiveInfinity，则此方法返回 1。
            如果 value 等于 System.Double.NaN，则此方法返回 System.Double.NaN
            </summary>
            <param name="value">扩展对象。以弧度为单位的角</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Truncate(System.Double)">
            <summary>
            自定义扩展方法：计算指定双精度浮点数的整数部分
            </summary>
            <param name="d">扩展对象。要截断的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromDays(System.Double)">
            <summary>
            自定义扩展方法：返回表示指定天数的 System.TimeSpan，其中对天数的指定精确到最接近的毫秒
            </summary>
            <param name="value">扩展对象。天数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromHours(System.Double)">
            <summary>
            自定义扩展方法：返回表示指定小时数的 System.TimeSpan，其中对小时数的指定精确到最接近的毫秒
            </summary>
            <param name="value">扩展对象。小时</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromMilliseconds(System.Double)">
            <summary>
            自定义扩展方法：返回表示指定毫秒数的 System.TimeSpan
            </summary>
            <param name="value">扩展对象。毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromMinutes(System.Double)">
            <summary>
            自定义扩展方法：返回表示指定分钟数的 System.TimeSpan，其中对分钟数的指定精确到最接近的毫秒
            </summary>
            <param name="value">扩展对象。分钟数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromSeconds(System.Double)">
            <summary>
            自定义扩展方法：返回表示指定秒数的 System.TimeSpan，其中对秒数的指定精确到最接近的毫秒
            </summary>
            <param name="value">扩展对象。秒数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHtml(System.Drawing.Color)">
            <summary>
                自定义扩展方法：将指定 System.Drawing.Color 结构翻译成 HTML 字符串颜色表示形式
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToOle(System.Drawing.Color)">
            <summary>
                自定义扩展方法：将指定 System.Drawing.Color 结构翻译成 OLE 颜色
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToWin32(System.Drawing.Color)">
            <summary>
                自定义扩展方法：将指定 System.Drawing.Color 结构翻译成 Windows 颜色
            </summary>
            <param name="c">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Cut(System.Drawing.Image,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              自定义扩展方法：裁剪图片
            </summary>
            <param name="this"></param>
            <param name="width">需要裁剪的宽度</param>
            <param name="height">需要裁剪的高度</param>
            <param name="x">从源原始图片的横坐标x位置开始裁剪</param>
            <param name="y">从源原始图片的纵坐标y位置开始裁剪</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Scale(System.Drawing.Image,System.Double)">
            <summary>
             自定义扩展方法：按比例缩放图片
            </summary>
            <param name="this"></param>
            <param name="ratio">缩放比例</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Scale(System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
               自定义扩展方法：按指定的宽高缩放图片
            </summary>
            <param name="this"></param>
            <param name="width"></param>
            <param name="height"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetName(System.Enum,System.Object)">
            <summary>
             自定义扩展发放：在指定枚举中检索具有指定值的常数的名称
            </summary>
            <param name="this">枚举对象</param>
            <param name="value">特定枚举常数的值（根据其基础类型）</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeDescription(System.Enum)">
            <summary>
             自定义扩展方法：获取枚举项第一个自定义的 Description 特性的描述文字
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.In(System.Enum,System.Enum[])">
            <summary>
             自定义扩展方法：判断枚举值是否在枚举数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">枚举数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotIn(System.Enum,System.Enum[])">
            <summary>
             自定义扩展方法：判断枚举值是否不在枚举数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">枚举数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetAllExceptionMessage(System.Exception)">
            <summary>
                自定义扩展方法：递归获取所有异常信息（包含异常对象的所有内部异常信息）
            </summary>
            <param name="ex">表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Guid)">
            <summary>
            summary>
             自定义扩展方法：将 Guid 的值转换为字节数组,然后返回由字节数组中指定位置的四个字节转换来的 16 位有符号整数
            </summary>
            <param name="value">Guid value</param>
            <returns>Int32 value</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Guid)">
            <summary>
            summary>
             自定义扩展方法：将 Guid 的值转换为字节数组,然后返回由字节数组中指定位置的四个字节转换来的 32 位有符号整数
            </summary>
            <param name="value">Guid value</param>
            <returns>Int32 value</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Guid)">
            <summary>
             自定义扩展方法：将 Guid 的值转换为字节数组,然后返回由字节数组中指定位置的四个字节转换来的 64 位有符号整数
            </summary>
            <param name="value">Guid value</param>
            <returns>Int64 value</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Nullable{System.Guid},ZCN.NET.Common.Enums.GuidFormat)">
            <summary>
             自定义扩展方法：将GUID值转换为指定格式的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="format">Guid格式枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Format(System.Nullable{System.Guid},ZCN.NET.Common.Enums.GuidFormat)">
            <summary>
             自定义扩展方法：将GUID值转换为指定格式的Guid值
            </summary>
            <param name="this">扩展对象</param>
            <param name="format">Guid格式枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString32(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为32位小写字符串。
              如果Guid为null，则返回32位全是0的字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString32Lower(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为32位小写字符串。
              如果Guid为null，则返回32位全是0的字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString32Upper(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为32位大写字符串。
              如果Guid为null，则返回32位全是0的字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString36(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为36位小写字符串(带有分割线)。
              如果Guid为null，则返回36位全是0的字符串(带有分割线)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString36Lower(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为36位小写字符串(带有分割线)。
              如果Guid为null，则返回36位全是0的字符串(带有分割线)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString36Upper(System.Nullable{System.Guid})">
            <summary>
              自定义扩展方法：将GUID值转换为36位大写字符串(带有分割线)。
              如果Guid为null，则返回36位全是0的字符串(带有分割线)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUniqueCode(System.Guid)">
            <summary>
            自定义扩展方法：将Guid类型的值转换为唯一码
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEmpty(System.Guid)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否为空(全0的空Guid)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotEmpty(System.Guid)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否不为空(全0的空Guid)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Int16,System.Action)">
            <summary>
             自定义扩展方法：循环指定次数，并执行方法
            </summary>
            <param name="this">扩展对象</param>
            <param name="action">待执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEven(System.Int16)">
            <summary>
             自定义扩展方法：判断该值是否是偶数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFactorOf(System.Int16,System.Int16)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定数的因子(factorNumber % @this == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factorNumber">指定数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMultipleOf(System.Int16,System.Int16)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定值的倍数(@this % factor == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factor">指定值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsOdd(System.Int16)">
            <summary>
             自定义扩展方法：判断该值是否是奇数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPrime(System.Int16)">
            <summary>
             自定义扩展方法：判断该值是否是素数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.Int16)">
            <summary>
            自定义扩展方法： 以字节数组的形式返回指定的 16 位有符号整数值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Int16)">
            <summary>自定义扩展方法：将指定 16 位有符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.UInt16)">
            <summary>自定义扩展方法：将指定 16 位无符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Int16)">
            <summary>
             自定义扩展方法：将指定 16 位有符号整数的值转换为等效的 8 位无符号整数。
             如果参数大于 byte.MaxValue 或者小于0， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.UInt16)">
            <summary>
            自定义扩展方法：将指定 16 位无符号整数的值转换为等效的 8 位无符号整数。
            如果参数大于 byte.MaxValue， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Int16)">
            <summary>
            自定义扩展方法：将指定的 16 位带符号整数的值转换为等效的 8 位带符号整数。
            如果参数大于 sbyte.MaxValue 或者小于 sbyte.MinValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.UInt16)">
            <summary>
            自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的 8 位有符号整数。
            如果参数大于 sbyte.MaxValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.SByte.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Int16)">
            <summary>自定义扩展方法：将指定 16 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.UInt16)">
            <summary>自定义扩展方法：将指定 16 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Int32)">
            <summary>自定义扩展方法：将指定 32 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.UInt32)">
            <summary>自定义扩展方法：将指定 32 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Int16)">
            <summary>自定义扩展方法：将指定的 16 位带符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.UInt16)">
            <summary>自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Int16)">
            <summary>
            自定义扩展方法：将指定的 16 位带符号整数的值转换为等效的双精度浮点数。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.UInt16)">
            <summary>
            自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的双精度浮点数。
            </summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 16 位有符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(short) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 16 位无符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(ushort) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Int16)">
            <summary>
            自定义扩展方法：将指定的 16 位有符号整数的值转换为等效的 16 位无符号整数。
            如果参数小于0，则返回 default(ushort) 值。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.UInt16)">
            <summary>
            自定义扩展方法：返回指定的 16 位无符号整数；不执行任何实际的转换。
            </summary>
            <param name="value">要返回的 16 位无符号整数。</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Int16)">
            <summary>自定义扩展方法：将指定 16 位有符号整数的值转换为等效的 32 位有符号整数。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.UInt16)">
            <summary>自定义扩展方法：将指定 16 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Int16)">
            <summary>
            自定义扩展方法：将指定 16 位无符号整数的值转换为等效的 32 位无符号整数。
            如果参数小于 0，则返回 default(uint)
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.UInt16)">
            <summary>
            自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的 32 位无符号整数。
            </summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.UInt32)">
            <summary>自定义扩展方法：将指定 32 位无符号整数的值转换为等效的 32 位有符号整数。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Int16)">
            <summary>自定义扩展方法：将指定的 16 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Int16)">
            <summary>
            自定义扩展方法：将指定的 16 位有符号整数的值转换为等效的 64 位无符号整数。
            如果参数小于0，则返回  default(ulong) 值。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.UInt16)">
            <summary>自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.UInt16)">
            <summary>自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的 64 位无符号整数。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Int16)">
            <summary>自定义扩展方法：将指定的 16 位带符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.UInt16)">
            <summary>自定义扩展方法：将指定的 16 位无符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 16 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit2String(System.Int16)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 16 位带符号整数的值转换为其等效的二进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的二进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit8String(System.Int16)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 16 位带符号整数的值转换为其等效的八进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的八进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit10String(System.Int16)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 16 位带符号整数的值转换为其等效的十进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit16String(System.Int16)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 16 位带符号整数的值转换为其等效的十六进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十六进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Int16)">
            <summary>
            自定义扩展方法：返回一个16位有符号整数的绝对值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Int16,System.Int16)">
            <summary>
             自定义扩展方法：返回两个 16 位有符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 16 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 16 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.UInt16,System.UInt16)">
            <summary>
             自定义扩展方法：返回两个 16 位无符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 16 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 16 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Int16,System.Int16)">
            <summary>
             自定义扩展方法：返回两个 16 位有符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 16 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 16 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.UInt16,System.UInt16)">
            <summary>
             自定义扩展方法：返回两个 16 位无符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 16 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 16 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Int16)">
            <summary>
             自定义扩展方法：返回一个值，该值表示 16 位有符号整数的符号
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HostToNetworkOrder(System.Int16)">
            <summary>
             自定义扩展方法：将短值由主机字节顺序转换为网络字节顺序
            </summary>
            <param name="host">扩展对象。以主机字节顺序表示的要转换的数字</param>
            <returns>以网络字节顺序表示的短值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NetworkToHostOrder(System.Int16)">
            <summary>
             自定义扩展方法：将短值由网络字节顺序转换为主机字节顺序
            </summary>
            <param name="network">扩展对象。以网络字节顺序表示的要转换的数字</param>
            <returns>以主机字节顺序表示的短值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.In(System.Int16,System.Int16[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为true，否则为false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotIn(System.Int16,System.Int16[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否不存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为false，否则为true</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThan(System.Int16,System.Int16)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否小于目标值
            </summary>
            <param name="this">扩展对象</param>
            <param name="targetValue">目标比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThanEqual(System.Int16,System.Int16)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否小于等于目标值
            </summary>
            <param name="this">扩展对象</param>
            <param name="targetValue">目标比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Int32,System.Action)">
            <summary>
             自定义扩展方法：循环指定次数，并执行方法
            </summary>
            <param name="this">扩展对象</param>
            <param name="action">待执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEven(System.Int32)">
            <summary>
             自定义扩展方法：判断该值是否是偶数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFactorOf(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定数的因子(factorNumber % @this == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factorNumber">指定数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMultipleOf(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定值的倍数(@this % factor == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factor">指定值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsOdd(System.Int32)">
            <summary>
             自定义扩展方法：判断该值是否是奇数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPrime(System.Int32)">
            <summary>
             自定义扩展方法：判断该值是否是素数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.Int32)">
            <summary>
            自定义扩展方法： 以字节数组的形式返回指定的 32 位有符号整数值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertFromUtf32(System.Int32)">
            <summary>
            自定义扩展方法：将指定 Unicode 码位转换为 UTF-16 编码字符串。
            返回由一个 System.Char 对象或一个 System.Char 对象的代理项对组成的字符串，
            等效于 utf32 参数所指定的码位
            </summary>
            <param name="utf32">扩展对象。21 位 Unicode 码位</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Int32)">
            <summary>自定义扩展方法：将指定 32 位有符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.UInt32)">
            <summary>自定义扩展方法：将指定 32 位无符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Int32)">
            <summary>
             自定义扩展方法：将指定 32 位有符号整数的值转换为等效的 8 位无符号整数。
             如果参数大于 byte.MaxValue 或者小于0， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.UInt32)">
            <summary>
            自定义扩展方法：将指定 32 位无符号整数的值转换为等效的 8 位无符号整数。
            如果参数大于 byte.MaxValue， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Int32)">
            <summary>
            自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 8 位有符号整数。
            如果参数大于 sbyte.MaxValue 或者小于 sbyte.MinValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.UInt32)">
            <summary>
             自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的 8 位有符号整数。
             如果参数大于 sbyte.MaxValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Int32)">
            <summary>自定义扩展方法：将指定的 32 位带符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.UInt32)">
            <summary>自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Int32)">
            <summary>自定义扩展方法：将指定的 32 位带符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.UInt32)">
            <summary>自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 32 位有符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(int) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 32 位无符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(ushort) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Int32)">
            <summary>
            自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。
            如果参数大于 short.MaxValue 或者小于 short.MinValue， 则返回 default(short)值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.UInt32)">
            <summary>
            自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的 16 位有符号整数。
            如果参数大于 short.MaxValue ， 则返回 default(short)值。
            </summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.UInt32)">
            <summary>
            自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的 16 位无符号整数。
            如果参数大于 大于 UInt16.MaxValue，则返回 default(ushort)值。
            </summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.UInt16.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Int32)">
            <summary>
            自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 32 位无符号整数。
            如果参数大于 小于 0，则返回 default(uint)值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.UInt32)">
            <summary>自定义扩展方法：返回指定的 32 位无符号整数；不执行任何实际的转换。</summary>
            <param name="value">要返回的 32 位无符号整数。</param>
            <returns>不经更改即返回 <paramref name="value" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Int32)">
            <summary>自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.UInt32)">
            <summary>自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的 64 位有符号整数。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Int32)">
            <summary>
            自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 64 位无符号整数。
            如果参数小于0，则返回 default(ulong) 值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.UInt32)">
            <summary>
            自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的 64 位无符号整数。
            </summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Int32)">
            <summary>自定义扩展方法：将指定的 32 位带符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.UInt32)">
            <summary>自定义扩展方法：将指定的 32 位无符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 32 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit2String(System.Int32)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 32 位带符号整数的值转换为其等效的二进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的二进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit8String(System.Int32)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 32 位带符号整数的值转换为其等效的八进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的八进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit10String(System.Int32)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 32 位带符号整数的值转换为其等效的十进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit16String(System.Int32)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 32 位带符号整数的值转换为其等效的十六进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十六进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromArgb(System.Int32)">
            <summary>
            自定义扩展方法：从一个 32 位 ARGB 值创建 System.Drawing.Color 结构
            </summary>
            <param name="argb">扩展对象。指定 32 位 ARGB 值的值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromArgb(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从四个 ARGB 分量（alpha、红色、绿色和蓝色）值创建 System.Drawing.Color 结构。
            尽管此方法允许为每个分量传递 32 位值，但每个分量的值仅限于 8 位
            </summary>
            <param name="argb">扩展对象。alpha 分量。有效值为从 0 到 255</param>
            <param name="red">红色分量。有效值为从 0 到 255</param>
            <param name="green">绿色分量。有效值为从 0 到 255</param>
            <param name="blue">蓝色分量。有效值为从 0 到 255</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromArgb(System.Int32,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从指定的 8 位颜色值（红色、绿色和蓝色）创建 System.Drawing.Color 结构。
            alpha 值默认为 255（完全不透明）。
            尽管此方法允许为每个颜色分量传递 32 位值，但每个分量的值仅限于 8 位
            </summary>
            <param name="argb">扩展对象。红色分量。有效值为从 0 到 255</param>
            <param name="green">绿色分量。有效值为从 0 到 255</param>
            <param name="blue">蓝色分量。有效值为从 0 到 255</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromArgb(System.Int32,System.Drawing.Color)">
            <summary>
            自定义扩展方法： 从指定的 System.Drawing.Color 结构创建 System.Drawing.Color 结构，但要使用新指定的 alpha 值。
            尽管此方法允许为alpha 值传递 32 位值，但该值仅限于 8 位
            </summary>
            <param name="argb">扩展对象。新 System.Drawing.Color 的 alpha 值。有效值为从 0 到 255</param>
            <param name="baseColor">从中创建新 System.Drawing.Color 的 System.Drawing.Color</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromOle(System.Int32)">
            <summary>
            自定义扩展方法：将 OLE 颜色值翻译成 GDI+ System.Drawing.Color 结构
            </summary>
            <param name="oleColor">扩展对象。要翻译的 OLE 颜色</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromWin32(System.Int32)">
            <summary>
            自定义扩展方法： 将 Windows 颜色值翻译成 GDI+ System.Drawing.Color 结构
            </summary>
            <param name="win32Color">扩展对象。要翻译的 Windows 颜色</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Int32)">
            <summary>
             自定义扩展方法，返回32位有符号整数的绝对值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BigMul(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：生成两个 32 位数字的完整乘积
            </summary>
            <param name="a">扩展对象。第一个乘数</param>
            <param name="b">第二个乘数</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DivRem(System.Int32,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：计算两个 32 位有符号整数的商，并通过输出参数返回余数。
             如果除数等于0，则返回结果0，余数也为0
            </summary>
            <param name="a">扩展对象。被除数</param>
            <param name="b">除数</param>
            <param name="result">余数</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：返回两个 32 位有符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 32 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 32 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.UInt32,System.UInt32)">
            <summary>
             自定义扩展方法：返回两个 32 位无符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 32 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 32 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：返回两个 32 位有符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 32 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 32 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.UInt32,System.UInt32)">
            <summary>
             自定义扩展方法：返回两个 32 位无符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 32 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 32 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Int32)">
            <summary>
             自定义扩展方法：返回一个值，该值表示 32 位有符号整数的符号
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HostToNetworkOrder(System.Int32)">
            <summary>
             自定义扩展方法：将短值由主机字节顺序转换为网络字节顺序
            </summary>
            <param name="host">扩展对象。以主机字节顺序表示的要转换的数字</param>
            <returns>以网络字节顺序表示的整数值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NetworkToHostOrder(System.Int32)">
            <summary>
             自定义扩展方法：将短值由网络字节顺序转换为主机字节顺序
            </summary>
            <param name="network">扩展对象。以网络字节顺序表示的要转换的数字</param>
            <returns>以主机字节顺序表示的整数值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Int64,System.Action)">
            <summary>
             自定义扩展方法：循环指定次数，并执行方法
            </summary>
            <param name="this">扩展对象</param>
            <param name="action">待执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEven(System.Int64)">
            <summary>
             自定义扩展方法：判断该值是否是偶数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFactorOf(System.Int64,System.Int64)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定数的因子(factorNumber % @this == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factorNumber">指定数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMultipleOf(System.Int64,System.Int64)">
            <summary>
             自定义扩展方法：判断扩展对象的值是否是指定值的倍数(@this % factor == 0)
            </summary>
            <param name="this">扩展对象</param>
            <param name="factor">指定值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsOdd(System.Int64)">
            <summary>
             自定义扩展方法：判断该值是否是奇数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPrime(System.Int64)">
            <summary>
             自定义扩展方法：判断该值是否是素数
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.Int64)">
            <summary>
            自定义扩展方法：以字节数组的形式返回指定的 64 位有符号整数值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Int64BitsToDouble(System.Int64)">
            <summary>
            自定义扩展方法： 将指定 64 位有符号整数转换成双精度浮点数
            </summary>
            <param name="value">扩展对象。要转换的数字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Int64)">
            <summary>自定义扩展方法：将指定 64 位有符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.UInt64)">
            <summary>自定义扩展方法：将指定 64 位无符号整数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Int64)">
            <summary>
             自定义扩展方法：将指定 64 位有符号整数的值转换为等效的 8 位无符号整数。
             如果参数大于 byte.MaxValue 或者小于0， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.UInt64)">
            <summary>
            自定义扩展方法：将指定 64 位无符号整数的值转换为等效的 8 位无符号整数。
            如果参数大于 byte.MaxValue， 则返回 default(byte)值。
            </summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Int64)">
            <summary>
            自定义扩展方法：将指定的 64 位有符号整数的值转换为等效的 8 位有符号整数。
            如果参数大于 sbyte.MaxValue 或者小于 sbyte.MinValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.UInt64)">
            <summary>
            自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的 8 位有符号整数。
            如果参数大于 sbyte.MaxValue， 则返回 default(sbyte)值。
            </summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Int64)">
            <summary>自定义扩展方法：将指定 64 位有符号整数的值转换为它的等效 Unicode 字符。</summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于 <see cref="F:System.Char.MinValue" /> 或大于 <see cref="F:System.Char.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.UInt64)">
            <summary>自定义扩展方法：将指定 64 位无符号整数的值转换为其等效的 Unicode 字符。</summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的 Unicode 字符。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Char.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Int64)">
            <summary>自定义扩展方法：将指定的 64 位带符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.UInt64)">
            <summary>自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的十进制数。</summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Int64)">
            <summary>自定义扩展方法：将指定的 64 位带符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.UInt64)">
            <summary>自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的双精度浮点数。</summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Int64)">
            <summary>
            自定义扩展方法：将指定的 32 位有符号整数的值转换为等效的 16 位有符号整数。
            如果参数大于 short.MaxValue 或者小于 short.MinValue，则返回 default(short)值。
            </summary>
            <param name="value">要转换的 32 位带符号整数。</param>
            <returns>与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.UInt64)">
            <summary>
            自定义扩展方法：将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。
            如果参数大于 short.MaxValue，则返回 default(short)值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Int64)">
            <summary>
            自定义扩展方法：将指定的 64 位有符号整数的值转换为等效的 16 位无符号整数。
            如果参数大于 ushort.MaxValue 或者小于 ushort.MinValue，则返回 default(ushort)值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.UInt64)">
            <summary>
            自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的 16 位无符号整数。
            如果参数大于 ushort.MaxValue，则返回 default(ushort)值。
            </summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 16 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Int64)">
            <summary>
             自定义扩展方法：将指定 64 位有符号整数的值转换为等效的 32 位有符号整数。
             如果参数小于 int.MinValue 或者 大于 int.MaxValue，则返回 default(Int32)
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.UInt64)">
            <summary>
            自定义扩展方法：将指定 64 位无符号整数的值转换为等效的 32 位有符号整数。
            如果参数大于 int.MaxValue，则返回 default(Int32)
            </summary>
            <param name="value">要转换的 16 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Int64)">
            <summary>
            自定义扩展方法：将指定的 64 位有符号整数的值转换为等效的 32 位无符号整数。
            如果参数大于 uint.MaxValue 或者小于 uint.MinValue，则返回 default(uint)值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.UInt64)">
            <summary>
            自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的 32 位无符号整数。
            如果参数大于 uint.MaxValue，则返回 default(uint)值。
            </summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 32 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.UInt32.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.UInt64)">
            <summary>
            自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的 64 位有符号整数。
            如果参数大于 (ulong)long.MaxValue)，则返回 default(long) 值。
            </summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位带符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Int64)">
            <summary>
            自定义扩展方法：将指定的 64 位有符号整数的值转换为等效的 64 位无符号整数。
            如果参数小于0，则返回 default(ulong) 值。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 64 位无符号整数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.UInt64)">
            <summary>自定义扩展方法：返回指定的 64 位无符号整数；不执行任何实际的转换。</summary>
            <param name="value">要返回的 64 位无符号整数。</param>
            <returns>不经更改即返回 <paramref name="value" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 64 位有符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(long) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 64 位无符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(ulong) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Int64)">
            <summary>自定义扩展方法：将指定的 64 位带符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.UInt64)">
            <summary>自定义扩展方法：将指定的 64 位无符号整数的值转换为等效的单精度浮点数。</summary>
            <param name="value">要转换的 64 位无符号整数。</param>
            <returns>一个等于 <paramref name="value" /> 的单精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit2String(System.Int64)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 64 位带符号整数的值转换为其等效的二进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的二进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit8String(System.Int64)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 64 位带符号整数的值转换为其等效的八进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的八进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit10String(System.Int64)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 64 位带符号整数的值转换为其等效的十进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDigitBit16String(System.Int64)">
            <summary>
            自定义扩展方法：(2、8、10 或 16位进制之间的转换)将 64 位带符号整数的值转换为其等效的十六进制格式的字符串表示形式。
            如果转换失败则返回 string.Empty。
            </summary>
            <param name="value">要转换的 64 位带符号整数。</param>
            <returns>以 <paramref name="value" /> 为基数的十六进制的字符串表示形式。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromBinary(System.Int64)">
            <summary>
            自定义扩展方法： 反序列化一个 64 位二进制值，并重新创建序列化的 System.DateTime 初始对象
            </summary>
            <param name="dateData">扩展对象。64 位有符号整数，它对 2 位字段的 System.DateTime.Kind 属性以及 
            62 位字段的 System.DateTime.Ticks 属性进行了编码</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromFileTime(System.Int64)">
            <summary>
            自定义扩展方法：将指定 Windows 文件时间转换为等效的本地时间
            </summary>
            <param name="fileTime">扩展对象。以计时周期表示的 Windows 文件时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromFileTimeUtc(System.Int64)">
            <summary>
            自定义扩展方法：将指定 Windows 文件时间转换为等效的 UTC 时间
            </summary>
            <param name="fileTime">扩展对象。以计时周期表示的 Windows 文件时间</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromOACurrency(System.Int64)">
            <summary>
             将指定 64 位有符号整数（它包含 OLE 自动化货币值）转换为等效的 <see cref="T:System.Decimal" /> 值
            </summary>
            <param name="cy"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Int64)">
            <summary>
             自定义扩展方法，返回64位有符号整数的绝对值
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DivRem(System.Int64,System.Int64,System.Int64@)">
            <summary>
             自定义扩展方法：计算两个 64 位有符号整数的商，并通过输出参数返回余数。
             如果除数等于0，则返回结果0，余数也为0
            </summary>
            <param name="a">扩展对象。被除数</param>
            <param name="b">除数</param>
            <param name="result">余数</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Int64,System.Int64)">
            <summary>
             自定义扩展方法：返回两个 64 位有符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 64 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 64 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.UInt64,System.UInt64)">
            <summary>
             自定义扩展方法：返回两个 64 位无符号的整数中较大的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 64 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 64 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Int64,System.Int64)">
            <summary>
             自定义扩展方法：返回两个 64 位有符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 64 位有符号的整数中的第一个</param>
            <param name="value2">要比较的两个 64 位有符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.UInt64,System.UInt64)">
            <summary>
             自定义扩展方法：返回两个 64 位无符号的整数中较小的一个
            </summary>
            <param name="value1">扩展对象。要比较的两个 64 位无符号的整数中的第一个</param>
            <param name="value2">要比较的两个 64 位无符号的整数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Int64)">
            <summary>
             自定义扩展方法：返回一个值，该值表示 64 位有符号整数的符号
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HostToNetworkOrder(System.Int64)">
            <summary>
             自定义扩展方法：将短值由主机字节顺序转换为网络字节顺序
            </summary>
            <param name="host">扩展对象。以主机字节顺序表示的要转换的数字</param>
            <returns>以网络字节顺序表示的长值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NetworkToHostOrder(System.Int64)">
            <summary>
             自定义扩展方法：将短值由网络字节顺序转换为主机字节顺序
            </summary>
            <param name="network">扩展对象。以网络字节顺序表示的要转换的数字</param>
            <returns>以主机字节顺序表示的长值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromTicks(System.Int64)">
            <summary>
             返回表示指定时间的 <see cref="T:System.TimeSpan" />，其中对时间的指定以刻度为单位。
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Delete(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo})">
            <summary>
             自定义扩展方法：如果集合中的 DirectoryInfo 为空，则删除该目录
            </summary>
            <param name="this"></param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Collections.Generic.IEnumerable{System.IO.DirectoryInfo},System.Action{System.IO.DirectoryInfo})">
            <summary>
              自定义扩展方法：循环目录集合，并执行指定的方法
            </summary>
            <param name="this"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Delete(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
             自定义扩展方法：批量删除集合中的文件信息
            </summary>
            <param name="this">扩展对象。文件信息集合</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach(System.Collections.Generic.IEnumerable{System.IO.FileInfo},System.Action{System.IO.FileInfo})">
            <summary>
             自定义扩展方法：循环将文件信息集合中的对象作为参数传入指定的方法中并执行方法，最后返回文件信息集合
            </summary>
            <param name="this">扩展对象。文件信息集合</param>
            <param name="action"></param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.PathCombine(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             自定义扩展方法：将集合中的路径信息字符串拼接成一个完整的路径，并返回该路径
            </summary>
            <param name="this">扩展对象。路径信息集合</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Clear(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：清除目录下的所有文件以及目录
            </summary>
            <param name="obj">扩展对象。目录信息</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：将一个目录下的所有文件复制到目标目录下
            </summary>
            <param name="obj">扩展对象。目录信息</param>
            <param name="destDirName">目标目录的名称</param>
            <param name="overwrite">如果目标目录下存在相同的文件，是否覆盖。若为 true，则允许覆盖现有文件；否则为 false</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：将指定搜索模式搜索一个目录下的文件并复制到目标目录下
            </summary>
            <param name="obj">扩展对象。目录信息</param>
            <param name="destDirName">目标目录的名称</param>
            <param name="searchPattern">搜索模式字符串。例如，“System*”可用于搜索所有以单词“System”开头的目录</param>
            <param name="overwrite">如果目标目录下存在相同的文件，是否覆盖。若为 true，则允许覆盖现有文件；否则为 false</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
             自定义扩展方法：将一个目录下的所有文件复制到目标目录下
            </summary>
            <param name="obj">扩展对象。目录信息</param>
            <param name="destDirName">目标目录的名称</param>
            <param name="searchOption">指定是搜索当前目录，还是搜索当前目录及其所有子目录</param>
            <param name="overwrite">如果目标目录下存在相同的文件，是否覆盖</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyTo(System.IO.DirectoryInfo,System.String,System.String,System.IO.SearchOption,System.Boolean)">
            <summary>
             自定义扩展方法：将指定搜索模式搜索一个目录下的文件并复制到目标目录下
            </summary>
            <param name="obj">扩展对象。目录信息</param>
            <param name="destDirName">目标目录的名称</param>
            <param name="searchPattern">搜索模式字符串。例如，“System*”可用于搜索所有以单词“System”开头的目录</param>
            <param name="searchOption">指定是搜索当前目录，还是搜索当前目录及其所有子目录</param>
            <param name="overwrite">如果目标目录下存在相同的文件，是否覆盖。若为 true，则允许覆盖现有文件；否则为 false</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateAllDirectories(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：按 path 的指定创建所有目录和子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteDirectoriesWhere(System.IO.DirectoryInfo,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：根据指定的条件删除当前目录下的目录。
             如果此 System.IO.DirectoryInfo 为空，则删除它
            </summary>
            <param name="obj">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteDirectoriesWhere(System.IO.DirectoryInfo,System.Func{System.IO.DirectoryInfo,System.Boolean},System.IO.SearchOption)">
            <summary>
             自定义扩展方法：根据指定的条件删除目录以及子目录下的目录。
             如果此 System.IO.DirectoryInfo 为空，则删除它
            </summary>
            <param name="obj">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
            <param name="searchOption">指定是搜索当前目录，还是搜索当前目录及其所有子目录</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteFilesWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：根据指定的条件删除当前目录下的文件
            </summary>
            <param name="obj">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteFilesWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean},System.IO.SearchOption)">
            <summary>
             自定义扩展方法：根据指定的条件删除目录以及子目录下的文件
            </summary>
            <param name="obj">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
            <param name="searchOption">指定是搜索当前目录，还是搜索当前目录及其所有子目录</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteOlderThan(System.IO.DirectoryInfo,System.TimeSpan)">
            <summary>
             自定义扩展方法：从目录中删除早于指定时间间隔的目录与文件
            </summary>
            <param name="obj"></param>
            <param name="timeSpan">指定的时间间隔</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeleteOlderThan(System.IO.DirectoryInfo,System.TimeSpan,System.IO.SearchOption)">
            <summary>
             自定义扩展方法：从目录中删除早于指定时间间隔的目录与文件
            </summary>
            <param name="obj"></param>
            <param name="timeSpan">指定的时间间隔</param>
            <param name="searchOption">搜索文件的方式</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnsureDirectoryExists(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：按 path 的指定创建所有目录和子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateDirectories(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：返回指定路径中的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateDirectories(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFiles(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：返回指定路径中的文件名的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.String)">
            <summary>
             自定义扩展方法：返回指定路径中的文件名的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回指定路径中的文件名的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFiles(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：返回指定路径中的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称和目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EnumerateFileSystemEntries(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称和目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectories(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回当前 System.IO.DirectoryInfo 中、与给定搜索条件匹配的目录的数组
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectories(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回当前 System.IO.DirectoryInfo 中与给定的搜索条件匹配并使用某个值确定是否在子目录中搜索的目录的数组
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：根据指定的过滤条件返回指定路径中的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：根据指定的过滤条件返回指定路径中与搜索模式匹配的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoriesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.IO.DirectoryInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回当前目录中与给定的搜索模式匹配的文件列表
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFiles(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回当前目录中与给定的搜索模式匹配的文件列表
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
              默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFilesWhere(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中的文件名的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFilesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFilesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFilesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFilesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntries(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：返回指定路径中的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String,System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntries(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption)">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件系统项的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.Func{System.String,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String,System.Func{System.String,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String,System.IO.SearchOption,System.Func{System.String,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称和目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPattern">要与 path 中的目录名称匹配的搜索字符串</param>
            <param name="predicate">过滤条件</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String[],System.Func{System.String,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中的文件系统项的可枚举集合
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileSystemEntriesWhere(System.IO.DirectoryInfo,System.String[],System.IO.SearchOption,System.Func{System.String,System.Boolean})">
            <summary>
             自定义扩展方法：返回指定路径中与搜索模式匹配的文件名称和目录名称的可枚举集合，还可以搜索子目录
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="searchPatterns">要与 path 中的目录名称匹配的搜索字符串数组</param>
            <param name="predicate">过滤条件</param>
            <param name="searchOption">System.IO.SearchOption 枚举的一个值，指定搜索操作是应仅包含当前目录还是应包含所有子目录。
             默认值为 System.IO.SearchOption.TopDirectoryOnly
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSize(System.IO.DirectoryInfo)">
            <summary>
             自定义扩展方法：返回与给定的搜索模式匹配并且使用某个值确定是否在子目录中进行搜索的当前目录的文件列表的总文件大小(字节)
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.PathCombine(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：将当前目录或文件的全名称与数组中的路径拼接在一起，返回拼接后的字符串
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="paths">目录数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.PathCombineDirectory(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：将当前目录或文件的全名称与数组中的路径拼接在一起，返回新的目录信息对象
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="paths">目录数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.PathCombineFile(System.IO.DirectoryInfo,System.String[])">
            <summary>
             自定义扩展方法：将当前目录或文件的全名称与数组中的路径拼接在一起，返回新的文件信息对象
            </summary>
            <param name="this">扩展对象。目录信息对象</param>
            <param name="paths">目录数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             自定义扩展方法：在一个文件中追加文本行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要追加到文件中的文本行</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
             自定义扩展方法： 将指定编码向一个文件中追加文本行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要追加到文件中的文本行</param>
            <param name="encoding">要使用的字符编码</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendAllText(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：打开一个文件，向其中追加指定的字符串，然后关闭该文件。
             如果文件不存在，此方法创建一个文件，将指定字符串写入文件，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要追加到文件中的字符串</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
             自定义扩展方法：将指定编码将指定字符串追加到文件中，如果文件还不存在则创建该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要追加到文件中的字符串</param>
            <param name="encoding">要使用的字符编码</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：更改路径字符串的扩展名。
             返回包含修改的路径信息的字符串。
             在基于 Windows 的桌面平台上，如果 path 是 null 或空字符串 ("")，则返回的路径信息是未修改的。
             如果 extension 是 null，则返回的字符串包含指定的路径，其扩展名已移除。
             如果 path 不具有扩展名，并且 extension 不是 null，则返回的路径字符串包含 extension，它追加到 path 的结尾
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="extension">新的扩展名（有或没有前导句点）。指定 null 以从 path 移除现有扩展名</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateDirectory(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：按 path 的指定创建所有目录和子目录。返回目录信息对象
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoryFullName(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：获取目录或文件的完整目录
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDirectoryName(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：获取此 System.IO.DirectoryInfo 实例的名称
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFileNameWithoutExtension(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：返回不具有扩展名的指定路径字符串的文件名
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetPathRoot(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：获取指定路径的根目录信息
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HasExtension(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：确定路径是否包括文件扩展名
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPathRooted(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：指示指定的路径字符串是否包含根
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadAllBytes(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：打开一个文件，将文件的内容读入一个字符串，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadAllLines(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：打开一个文本文件，读取文件的所有行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadAllLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
             自定义扩展方法：打开一个文件，将指定编码读取文件的所有行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="encoding">应用到文件内容的编码</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadAllText(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：打开一个文本文件，读取文件的所有行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
             自定义扩展方法：打开一个文件，将指定编码读取文件的所有行，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="encoding">应用到文件内容的编码</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadLines(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：读取文件的文本行
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadLines(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
             自定义扩展方法：读取具有指定编码的文件的文本行
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="encoding">应用到文件内容的编码</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadToEnd(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：从流的当前位置到末尾读取流
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadToEnd(System.IO.FileInfo,System.Int64)">
            <summary>
             自定义扩展方法：从流的指定的位置到末尾读取流
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="position">指定的位置</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadToEnd(System.IO.FileInfo,System.Text.Encoding)">
            <summary>
             自定义扩展方法：将指定编码方式从流的当前位置到末尾读取流
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="encoding">应用到文件内容的编码</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadToEnd(System.IO.FileInfo,System.Text.Encoding,System.Int64)">
            <summary>
             自定义扩展方法：将指定编码方式从流的指定的位置到末尾读取流
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="encoding">应用到文件内容的编码</param>
            <param name="position">指定的位置</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：重命名文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="newName">新的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RenameExtension(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：重命名文件扩展名
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="extension">新的扩展名</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RenameFileWithoutExtension(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：重命名文件，保持原来的扩展名
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="newName">新的名称(不含文件扩展名)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFileStream(System.IO.FileInfo)">
            <summary>
             自定义扩展方法：将文件信息对象转换为文件流。
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <summary>
             自定义扩展方法：创建一个新文件，在其中写入指定的字节数组，然后关闭该文件。如果目标文件已存在，则覆盖该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="bytes">要写入文件的字节</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllLines(System.IO.FileInfo,System.String[])">
            <summary>
             自定义扩展方法：创建一个新文件，在其中写入指定的字符串数组，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllLines(System.IO.FileInfo,System.String[],System.Text.Encoding)">
            <summary>
             自定义扩展方法：创建一个新文件，将指定编码格式在其中写入指定的字符串数组，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串数组</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             自定义扩展方法：创建一个新文件，在其中写入指定的字符串数组，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <summary>
             自定义扩展方法：创建一个新文件，将指定编码格式在其中写入指定的字符串数组，然后关闭该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串数组</param>
            <param name="encoding">编码格式</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <summary>
             自定义扩展方法：创建一个新文件，在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <summary>
             自定义扩展方法：创建一个新文件，将指定编码方式在其中写入指定的字符串，然后关闭文件。如果目标文件已存在，则覆盖该文件
            </summary>
            <param name="this">扩展对象。文件信息对象</param>
            <param name="contents">要写入文件的字符串</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.StreamReader,System.IO.Stream)">
            <summary>
            将<see cref="T:System.IO.StreamReader"/>中的字符序列化为输出上的字节，然后刷新输出。
            </summary>
            <param name="inputReader"><see cref="T:System.IO.StreamReader"/>输入</param>
            <param name="output"><see cref="T:System.IO.Stream"/>输出</param>
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.StreamReader,System.IO.StreamWriter)">
            <summary>将字符从<see cref="T:System.IO.StreamReader"/>复制到<see cref="T:System.IO.StreamWriter"/></summary>
            <param name="inputStreamReader"><see cref="T:System.IO.StreamReader"/>输入</param>
            <param name="outputStreamWriter"><see cref="T:System.IO.StreamWriter"/>输出/// </param>
            <returns>复制的字符数</returns>        
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Skip(System.IO.StreamReader,System.Int64)">
            <summary>
            将给定数量的字符跳过到给定的流中。
            </summary>
            <param name="stream">完成跳过操作的流</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Skip(System.IO.StringReader,System.Int64)">
            <summary>
             将给定数量的字符跳过到给定的StringReader中
            </summary>
            <param name="strReader">跳过的 StringReader 对象</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>自定义扩展方法：将输入中的整个内容复制到输出中.</summary>
            <param name="input">流(输入)</param>
            <param name="output">流(输出)</param> 
            <returns>复制的字节数</returns>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>		
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>自定义扩展方法：将输入中的内容复制到输出中</summary>
            <param name="input">流(输入)</param>
            <param name="output">流(输出)</param>
            <param name="copyFromBeginning">将true设置为从输入流的开头复制，例如input.position=0，否则，它将从输入流中的当前位置开始复制。 </param>
            <returns>复制的字节数</returns>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.Stream,System.IO.StreamWriter)">
            <summary>
             自定义扩展方法：使用操作系统默认的编码方式将输入中的字节复制并转换为 streamwriter上的字符
            </summary>
            <param name="inputStream">流(输入)
            </param>
            <param name="outputStreamWriter">StreamWriter 对象(输出)
            </param>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.IO.Stream,System.IO.StreamWriter,System.String)">
            <summary>
             自定义扩展方法：将指定的编码方式将输入中的字节复制并转换为 streamwriter上的字符
            </summary>
            <param name="inputStream"></param>
            <param name="outputWriter"></param>
            <param name="encoding">编码方式</param>
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CopyExact(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
             自定义扩展方法：将源中的确切字节数<see cref="T:System.IO.Stream"/>复制到目标中<see cref="T:System.IO.Stream"/>。
            </summary>
            <param name="source">源 <see cref="T:System.IO.Stream"/></param>
            <param name="target">目标 <see cref="T:System.IO.Stream"/></param>
            <param name="len">要复制的字节数</param>        
            <exception cref="T:System.IO.IOException">if the source stream does not have enough data.</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadExact(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：将源流中任何位置的指定字节数读取到特定起始索引位置的特定字节数组中。字节数组必须具有读取所需流部分所需的大小。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="target">要写入的目标字节数组</param>
            <param name="targetOffset">目标中的偏移索引</param>
            <param name="sourceOffset">流中的偏移位置</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadPartial(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
             自定义扩展方法：从偏移位置开始读取流的部分段。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="sourceOffset">流中的起始偏移位置。如果要从头读取流，则设置为0</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
            <returns>return partial segment as an array of bytes.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReadIntoByteArray(System.IO.Stream,System.Byte[])">
            <summary>
             自定义扩展方法：将数据读取到一个完整的数组中。如果流首先耗尽数据，或者如果IOException自然发生，引发EndOfStreamException。
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="byteArray">要读取字节的数组。数组将从流中完全填充，因此必须给出适当的大小。</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.IO.Stream)">
            <summary>
             自定义扩展方法：从流的开头读取数据，直到到达结尾。数据作为字节数组返回。(这种读取流的方法效率不太高)
            <para>如果您事先不知道流的长度（例如网络流），只想将整批数据读取到一个缓冲区中，请使用此方法。</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <exception cref="T:System.IO.IOException">在任何基础IO调用失败时引发</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetBytes(System.IO.Stream,System.Int64)">
            <summary>
             自定义扩展方法：从流中读取数据，直到到达结尾。这个数据作为字节数组返回。
            <para>如果知道要开始的数据的预期长度，请使用此方法获取数据</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="initialLength">初始缓冲区长度。如果长度小于1，则设置为<see cref="F:System.Int16.MaxValue"/> 
            </param>
            <exception cref="T:System.IO.IOException">如果任何基础IO调用失败，则引发异常</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetAsciiString(System.IO.Stream)">
            <summary>
             自定义扩展方法：从数据流返回一个ASCII字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetString(System.IO.Stream)">
            <summary>
             自定义扩展方法：从数据流返回一个utf8编码的字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Skip(System.IO.Stream,System.Int32)">
            <summary>
             自定义扩展方法：尝试跳过输入流中的字节，并返回跳过的实际字节数。
            </summary>
            <param name="stream">将用于跳过字节的输入流</param>
            <param name="skipBytes">要跳过的字节数</param>
            <returns>当前字节数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.IO.Stream)">
            <summary>
                 自定义扩展方法：将内存流从开始到末位写入字符串并返回
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.IO.Stream,System.Text.Encoding)">
            <summary>
                自定义扩展方法：将指定编码格式将内存流从开始到末位写入字符串并返回
            </summary>
            <param name="this"></param>
            <param name="encoding">指定的编码格式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.IO.Stream,System.Int64)">
            <summary>
                自定义扩展方法：将内存流从指定的位置到末位写入字符串并返回
            </summary>
            <param name="this"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.IO.Stream,System.Text.Encoding,System.Int64)">
            <summary>
                自定义扩展方法：将指定编码格式将内存流从指定的位置到末位写入字符串并返回
            </summary>
            <param name="this"></param>
            <param name="encoding"></param>
            <param name="position"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArray(System.IO.Stream)">
            <summary>
             自定义扩展方法：将内存流写入二进制数组并返回
            </summary>
            <param name="this">扩展对象。流对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToImage(System.IO.Stream)">
            <summary>
                自定义扩展方法：将流转换为 Image 对象
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToMd5Hash(System.IO.Stream)">
            <summary>
             自定义扩展方法：将流对象转换为 MD5 方式加密的字符串
            </summary>
            <param name="this">扩展对象。流对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WriteByteArray(System.IO.Stream,System.Byte[])">
            <summary>
             自定义扩展方法：将字节序列全部写入当前流中
            </summary>
            <param name="stream">扩展对象。流对象</param>
            <param name="bytes">待写入的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Property(System.Linq.Expressions.Expression,System.String)">
            <summary>
                自定义扩展方法：创建一个访问属性的表达式
            </summary>
            <param name="expression">表达式</param>
            <param name="propertyName">属性名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个 <see cref="T:System.Linq.Expressions.BinaryExpression" />，它表示仅在第一个操作数的计算结果为 AND 时才计算第二个操作数的条件 true 运算。
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Call(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])">
            <summary>
                自定义扩展方法：创建一个回调带有参数方法的表达式
            </summary>
            <param name="instance">表达式</param>
            <param name="methodName">方法名字</param>
            <param name="arguments">参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(等于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(不等于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(大于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(大于或等于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(小于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(小于或等于)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(引用相等)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                自定义扩展方法：创建一个比较表达式(引用不相等)
            </summary>
            <param name="left">左表达式</param>
            <param name="right">右表达式</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])">
            <summary>
                自定义扩展方法：Lambda表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="body">表达式</param>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.True``1">
            <summary>
                自定义扩展方法：Lambda(真)
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.False``1">
            <summary>
                自定义扩展方法：Lambda（假）
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                自定义扩展方法：组合 And
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
                自定义扩展方法：组合 Or
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
                自定义扩展方法：将指定合并函数将第一个表达式与第二个表达式组合
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder">
            <summary>
                ParameterRebinder
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder.map">
            <summary>
                The ParameterExpression map
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
                Initializes a new instance of the <see cref="T:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder" /> class.
            </summary>
            <param name="map">The map.</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
                Replaces the parameters.
            </summary>
            <param name="map">The map.</param>
            <param name="exp">The exp.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
                Visits the parameter.
            </summary>
            <param name="p">The p.</param>
            <returns>Expression</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetTypeArray(System.Object[])">
            <summary>
                自定义扩展方法：获取指定数组中对象的类型
            </summary>
            <param name="args">要确定其类型的对象数组</param>
            <returns>表示 args 中相应元素的类型的 System.Type 对象数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Random(System.Object[])">
            <summary>
             自定义扩展方法：获取指定数组中随机的一个值。如果数组为 null 或者 长度为0，则返回 null
            </summary>
            <param name="args">要确定其类型的对象数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Random(System.Object[],System.Random)">
            <summary>
             自定义扩展方法：获取指定数组中随机的一个值。如果数组为 null 或者 长度为0，则返回 null
            </summary>
            <param name="args">要确定其类型的对象数组</param>
            <param name="random">随机对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArray(System.Object[])">
            <summary>
             自定义扩展方法：将指定对象数组转换为字节数组
            </summary>
            <param name="tempObjectArray">要确定其类型的对象数组</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AsOrDefault``1(System.Object)">
            <summary>
                自定义扩展方法： 将指定对象的值转换为等效的T类型的值。
                如果转换失败，则返回T类型的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AsOrDefault``1(System.Object,``0)">
            <summary>
                自定义扩展方法： 将指定对象的值转换为等效的T类型的值。
                如果转换失败，则返回指定的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AsOrDefault``1(System.Object,System.Func{``0})">
            <summary>
                自定义扩展方法： 将指定对象的值转换为等效的T类型的值。
                如果转换失败，则返回指定的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValueFactory">默认值(产生默认值的方法)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AsOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
                自定义扩展方法： 将指定对象的值转换为等效的T类型的值。
                如果转换失败，则返回指定的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValueFactory">默认值(产生默认值的方法)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsAssignableFrom``1(System.Object)">
            <summary>
             自定义扩展方法：判断扩展对象的实例是否可以从指定 T 类型的实例分配
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsAssignableFrom(System.Object,System.Type)">
            <summary>
             自定义扩展方法：判断扩展对象的实例是否可以从指定 Type 类型的实例分配
            </summary>
            <param name="this">扩展对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTo``1(System.Object)">
            <summary>
             自定义扩展方法：将 object 类型对象转换为T类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="this">扩展对象</param>
            <returns>T类型</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToOrDefault``1(System.Object,System.Func{System.Object,``0})">
            <summary>
            自定义扩展方法：将 object 类型对象转换为T类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值</param>
            <returns>T类型</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToOrDefault``1(System.Object,``0)">
            <summary>
            自定义扩展方法：将 object 类型对象转换为T类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>T类型</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToOrDefault``1(System.Object,System.Func{``0})">
            <summary>
            自定义扩展方法：将 object 类型对象转换为T类型
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="this">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertTo(System.Object,System.Type)">
            <summary>
            自定义扩展方法：将 object 类型对象转换为指定的类型
            </summary>
            <param name="this">扩展对象</param>
            <param name="type">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeepCloneByBinarySerialize``1(``0)">
            <summary>
             自定义扩展方法：（该方法的转化性能较低，请使用DeepCloneByExpressionTree()方法）
             利用二进制序列化和反序列实现深度拷贝一个对象，返回拷贝后的对象
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeepCloneByXmlSerializer``1(``0)">
            <summary>
             自定义扩展方法： （该方法的转化性能较低，请使用DeepCloneByExpressionTree()方法）
             利用XML序列化和反序列化实现深度拷贝一个对象，返回拷贝后的对象
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DeepCloneByDataContractSerializer``1(``0)">
            <summary>
             自定义扩展方法： （该方法的转化性能较低，请使用DeepCloneByExpressionTree()方法）
             利用 DataContractSerializer 序列化和反序列化实现深度拷贝一个对象，返回拷贝后的对象
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ShallowCopy``1(``0)">
            <summary>
             自定义扩展方法：浅拷贝一个对象，返回拷贝后的对象
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidBooleanValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 Boolean 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidBooleanValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 Boolean 类型值。
            如果参数为 null，则此方法返回 true。
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidByteValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的8位无符号整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidByteValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的8位无符号整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSByteValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的8位有符号整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSByteValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的8位有符号整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidCharValue(System.Object)">
            <summary>
             自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 char 类型值。
             如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidCharValueNullable(System.Object)">
            <summary>
             自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 char 类型值。
             如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeOffSetValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 DateTimeOffset 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeOffSetValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 DateTimeOffset 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的日期时间类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的日期时间类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDecimalValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 decimal 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDecimalValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 decimal 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDoubleValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 double 双精度浮点类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDoubleValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 double 双精度浮点类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidFloatValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 float 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidFloatValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 float 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidGuidValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 Guid 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidGuidValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 Guid 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt16Value(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt16ValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt16Value(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt16ValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt32Value(System.Object)">
            <summary>
             自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的32位有符号的整数值。
             如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt32NullableValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的32位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt32Value(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的32位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt32NullableValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的32位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt64Value(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt64ValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt64Value(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt64ValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidLongValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位有符号的整数值。
            如果参数 为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidLongValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位有符号的整数值。
            如果参数 为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidULongValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位无符号的整数值。
            如果参数 为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidULongValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的64位无符号的整数值。
            如果参数 为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidShortValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidShortValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUShortValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUShortValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSingleValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 float 单精度浮点类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSingleValueNullable(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的 float 单精度浮点类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidStringValue(System.Object)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的字符串。
            返回true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidStringClob(System.String)">
            <summary>
            自定义扩展方法：判断指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值是否是有效的大文本类型的字符串。
            返回true
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType(System.Object,System.TypeCode)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象
            </summary>
            <param name="value">扩展对象</param>
            <param name="typeCode">要返回的对象的类型</param>
            <returns>一个基础类型为 typeCode 的对象，其值等效于 value。
                     如果 value 是 null，且 typeCode 是 System.TypeCode.Empty、System.TypeCode.String、 
                     或 System.TypeCode.object，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType(System.Object,System.TypeCode,System.IFormatProvider)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象。参数提供区域性特定的格式设置信息
            </summary>
            <param name="value">扩展对象</param>
            <param name="typeCode">要返回的对象的类型</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个基础类型为 typeCode 的对象，其值等效于 value。
                     如果 value 是 null，且 typeCode 是 System.TypeCode.Empty、System.TypeCode.String、 
                     或 System.TypeCode.object，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType(System.Object,System.Type)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象
            </summary>
            <param name="value">扩展对象</param>
            <param name="conversionType">要返回的对象的类型</param>
            <returns> 一个类型为 conversionType 的对象，其值等效于 value。
                      如果 value 是 null，且 conversionType 不是值类型，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType(System.Object,System.Type,System.IFormatProvider)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象。参数提供区域性特定的格式设置信息
            </summary>
            <param name="value">扩展对象</param>
            <param name="conversionType">要返回的对象的类型</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns> 一个类型为 conversionType 的对象，其值等效于 value。
                      如果 value 是 null，且 conversionType 不是值类型，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType``1(System.Object)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象
            </summary>
            <param name="value">扩展对象</param>
            <returns> 一个类型为 conversionType 的对象，其值等效于 value。
                      如果 value 是 null，且 conversionType 不是值类型，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ChangeType``1(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法： 返回一个指定类型的对象，该对象的值等于指定的对象。参数提供区域性特定的格式设置信息
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns> 一个类型为 conversionType 的对象，其值等效于 value。
                      如果 value 是 null，且 conversionType 不是值类型，则为 null 引用
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetTypeCode(System.Object)">
            <summary>
             自定义扩展方法：获取指定对象的 System.TypeCode。
             如果参数为 null，则返回 System.TypeCode.Empty
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回 bool 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanExtend(System.Object)">
            <summary>
             自定义扩展方法：将一个值转换为bool类型。
             <para>以下特殊内容(不区分大小写)均可以正常转换："是", "否", "YES", "NO", "Y", "N", "ON", "OFF", "1", "0" </para>
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Object,System.Func{System.Boolean})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回 bool 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanNullable(System.Object,System.Nullable{System.Boolean})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>true 或 false 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanNullable(System.Object,System.Func{System.Nullable{System.Boolean}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>true 或 false 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的布尔值。
             如果参数为 null 或者 DBNull，则此方法返回 false。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 byte 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Object,System.IFormatProvider)">
            <summary>将指定区域性特定格式设置信息，将指定对象的值转换为 8 位无符号整数。</summary>
            <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Object,System.Byte)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Object,System.Func{System.Byte})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.Object,System.IFormatProvider)" -->
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.Object,System.Byte)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.Object,System.Func{System.Byte})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 byte 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Object,System.IFormatProvider)">
            <summary>
             将指定区域性特定格式设置信息，将指定对象的值转换为 8 位有符号整数。
            </summary>
            <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Object,System.SByte)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Object,System.Func{System.SByte})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.Object,System.IFormatProvider)">
            <summary>
            将指定区域性特定格式设置信息，将指定对象的值转换为 8 位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">一个实现 <see cref="T:System.IConvertible" /> 接口的对象。</param>
            <param name="provider">一个提供区域性特定的格式设置信息的对象。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数，如果 <paramref name="value" /> 为 <see langword="null" />，则为零。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.Object,System.SByte)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.Object,System.Func{System.SByte})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为8位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 8 位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 char 类型的默认值。
             如果转换失败则返回 char 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Object,System.Char)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 char 类型的默认值。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Object,System.Func{System.Char})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 char 类型的默认值。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 char 类型的默认值。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCharNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>true 或 false 或null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCharNullable(System.Object,System.Nullable{System.Char})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>true 或 false 或null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCharNullable(System.Object,System.Func{System.Nullable{System.Char}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>true 或 false 或null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCharNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的 Unicode 字符。
             如果 value 为 null 或者 DBNull，则此方法返回 char 类型的默认值。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTime(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 1900-01-01:00:00:00。
             如果转换失败则返回 1900-01-01:00:00:00
            </summary>
            <param name="value">扩展对象</param>
            <returns>等效的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTime(System.Object,System.DateTime)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 1900-01-01:00:00:00。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>等效的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTime(System.Object,System.Func{System.DateTime})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 1900-01-01:00:00:00。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>等效的日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>等效的日期时间 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeNullable(System.Object,System.Nullable{System.DateTime})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>等效的日期时间 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeNullable(System.Object,System.Func{System.Nullable{System.DateTime}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的日期时间。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>等效的日期时间 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDefaultDatetime">
            <summary>
            返回默认的日期时间 1900-01-01 00:00:00
            </summary>
            <returns>日期时间 1900-01-01 00:00:00</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 decimal 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的十进制数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Object,System.Decimal)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的十进制数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Object,System.Func{System.Decimal})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的十进制数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <returns>与 value 等效的十进制数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>与 value 等效的十进制数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.Object,System.Nullable{System.Decimal})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的十进制数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.Object,System.Func{System.Nullable{System.Decimal}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的十进制数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的十进制数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 double 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的双精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Object,System.Double)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的双精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Object,System.Func{System.Double})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的双精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的双精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>与 value 等效的双精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.Object,System.Nullable{System.Double})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的双精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.Object,System.Func{System.Nullable{System.Double}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的双精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的双精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 float 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.Object,System.Single)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.Object,System.Func{System.Single})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToToFloatNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToToFloatNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToToFloatNullable(System.Object,System.Nullable{System.Single})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToToFloatNullable(System.Object,System.Func{System.Nullable{System.Single}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuid(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回全为0的标识符。
             如果转换失败则返回 Guid 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的全局唯一标识符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuid(System.Object,System.Guid)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回全为0的标识符。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的全局唯一标识符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuid(System.Object,System.Func{System.Guid})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回全为0的标识符。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的全局唯一标识符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的全局唯一标识符 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidNullable(System.Object,System.Nullable{System.Guid})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的全局唯一标识符 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidNullable(System.Object,System.Func{System.Nullable{System.Guid}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的全局唯一标识符。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的全局唯一标识符 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 short 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Object,System.Int16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Object,System.Func{System.Int16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 short 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关参数的区域性特定格式设置信息。 如果 provider 为 null，则使用当前区域性。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关参数的区域性特定格式设置信息。 如果 provider 为 null，则使用当前区域性。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.Object,System.Int16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.Object,System.Func{System.Int16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 short 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Object,System.UInt16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Object,System.Func{System.UInt16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关参数的区域性特定格式设置信息。 如果 provider 为 null，则使用当前区域性。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.Object,System.UInt16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.Object,System.Func{System.UInt16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 int 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Object,System.Int32)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Object,System.Func{System.Int32})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 int 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.Object,System.Int32)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.Object,System.Func{System.Int32})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 int 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Object,System.UInt32)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Object,System.Func{System.UInt32})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 int 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>一个等于 value 的 32位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.Object,System.UInt32)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.Object,System.Func{System.UInt32})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为32位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 32位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 long 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Object,System.Int64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Object,System.Func{System.Int64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.Object,System.Int64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.Object,System.Func{System.Int64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 long 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Object,System.UInt64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Object,System.Func{System.UInt64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.Object,System.UInt64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.Object,System.Func{System.UInt64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 long 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong(System.Object,System.Int64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong(System.Object,System.Func{System.Int64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.Object,System.Int64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.Object,System.Func{System.Int64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 long 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.Object,System.UInt64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.Object,System.Func{System.UInt64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.Object,System.UInt64)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.Object,System.Func{System.UInt64})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为64位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 64位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 short 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.Object,System.Int16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.Object,System.Func{System.Int16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.Object,System.Int16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.Object,System.Func{System.Int16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位有符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 short 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.Object,System.UInt16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.Object,System.Func{System.UInt16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.Object,System.UInt16)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.Object,System.Func{System.UInt16})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为16位无符号整数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>一个等于 value 的 16位无符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回 float 类型的默认值
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Object,System.Single)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.Object,System.Func{System.Single})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回0。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的单精度浮点数，如果 value 为 null，则为 0（零）</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.Object,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回 null
            </summary>
            <param name="value">扩展对象</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param> 
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.Object,System.Nullable{System.Single})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">转换失败时返回的默认值</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.Object,System.Func{System.Nullable{System.Single}})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为等效的单精度浮点数。
             如果 value 为 null 或者 DBNull，则此方法返回 null。
             如果转换失败则返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">转换失败时返回的默认值(产生默认值的方法)</param>
            <returns>与 value 等效的单精度浮点数 或 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Object)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为其等效的字符串表示形式。
             如果 value 为 null 或者 DBNull，则此方法返回空字符串
            </summary>
            <param name="value">扩展对象</param>
            <returns>等效的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Object,System.String)">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为其等效的字符串表示形式
             如果 value 为 null 或者 DBNull，则此方法返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValue">默认值</param>
            <returns>等效的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToString2(System.Object,System.Func{System.String})">
            <summary>
             自定义扩展方法：将指定对象(一般是指从IDataReader、DataTable、DataRow、HashTable等集合中获取的列或者项的基础数据类型)的值转换为其等效的字符串表示形式
             如果 value 为 null 或者 DBNull，则此方法返回指定的默认值
            </summary>
            <param name="value">扩展对象</param>
            <param name="defaultValueFactory">默认值(产生默认值的方法)</param>
            <returns>等效的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Between``1(``0,``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否介于最小值与最大值之间(包含边界值)
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="minValue">T类型的比较值下限</param>
            <param name="maxValue">T类型的比较值上限</param>
            <returns></returns>                                                       
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BetweenExcludeBoundary``1(``0,``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否介于最小值与最大值之间(不包含边界值)
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="minValue">T类型的比较值下限</param>
            <param name="maxValue">T类型的比较值上限</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotBetween``1(``0,``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否介于最小值与最大值之外
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="minValue">T类型的比较值下限</param>
            <param name="maxValue">T类型的比较值上限</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotEquals(System.Object,System.Object)">
            <summary>
            自定义扩展方法：判断扩展对象与目标对象是否不相等
            </summary>
            <param name="this">扩展对象</param>
            <param name="objTarget">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReferenceEquals(System.Object,System.Object)">
            <summary>
            自定义扩展方法：判断扩展对象实例与目标对象实例是否相同
            </summary>
            <param name="this"></param>
            <param name="objTarget">目标对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GreaterThan``1(``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否大于目标值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="targetValue">T类型的比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GreaterThanEqual``1(``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否大于等于目标值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="targetValue">T类型的比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.In``1(``0,``0[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否存在于数组中
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为true，否则为false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotIn``1(``0,``0[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否不存在于数组中
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为false，否则为true</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefault``1(``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否是T类型的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象的值是否为 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象的值是否不为 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDBNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否为 DBNull
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotDBNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否不为 DBNull
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDBNullOrNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否为 null 或者 DBNull
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotDBNullAndNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否不为 DBNull 且不为 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrDBNull(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否为 null 或者 DBNull
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDBNullOrNullOrEmpty(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否为 DBNull 或者 null 或者空字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotDBNullAndNullAndEmpty(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否不是 DBNull 且不是 null 且不是空字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDBNullOrNullOrWhitespace(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否为 DBNull 或者 null 或者空白字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotDBNullAndNullAndWhitespace(System.Object)">
            <summary>
             自定义扩展方法：判断指定的对象(.Net中基本数据类型对象)的值是否不是 DBNull 且不是 null 且不是空白字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThan``1(``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否小于目标值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="targetValue">T类型的比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.LessThanEqual``1(``0,``0)">
            <summary>
            自定义扩展方法：判断扩展对象的值是否小于等于目标值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="targetValue">T类型的比较值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CoinToss(System.Random)">
            <summary>
             自定义扩展方法：掷硬币的随机延伸法，随机返回 true 或者 false
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NextDecimal(System.Random,System.Int32,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：随机产生 Decimal 类型的数值(小数位数介于1到18之间)
            </summary>
            <param name="this">扩展对象</param>
            <param name="minValue">返回的随机数的下界（随机数可取该下界值）</param>
            <param name="maxValue">返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于或等于 minValue</param>
            <param name="digit">小数位数。必须大于0,小于等于18</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NextOne``1(System.Random,``0[])">
            <summary>
             自定义扩展方法：从指定的数组中随机返回一个元素
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="values">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.ConstructorInfo)">
            <summary>
             自定义扩展方法：获取类的构造函数的声明信息。包含可见性(public、protected、internal、private、
             protected internal)，名称，参数信息
             (例如：public Product(string name,decimal price))
            </summary>
            <param name="this">扩展对象。构造函数信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.EventInfo)">
            <summary>
             自定义扩展方法：获取事件的声明信息。包含可见性(public、protected、internal、private、protected internal)，名称。
             返回 null
            </summary>
            <param name="this">扩展对象。事件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.FieldInfo)">
            <summary>
             自定义扩展方法：获取字段的声明信息。包含可见性(public、protected、internal、private、
             protected internal)，修饰符(const、static、readonly、volatile),类型，名称，赋值符号，结束符
             (例如：private static int name = "张三";)
            </summary>
            <param name="this">扩展对象。字段信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：获取有关成员的声明信息
            </summary>
            <param name="this">扩展对象。成员信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.MethodInfo)">
            <summary>
             自定义扩展方法：获取方法的声明信息。包含可见性(public、protected、internal、private、
             protected internal)，修饰符(abstract、override、virtual、static),类型，名称，参数
             (例如：public static int GetPrice(int id))
            </summary>
            <param name="this">扩展对象。方法信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.ParameterInfo)">
            <summary>
             自定义扩展方法：获取参数的声明信息
            </summary>
            <param name="this">扩展对象。参数信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Reflection.PropertyInfo)">
            <summary>
             自定义扩展方法：获取属性 Property 的声明信息。包含可见性(public、protected、internal、private、
             protected internal)，修饰符(abstract、override、virtual、static),类型，名称，{get; set;}
             (例如：public abstract int AbstractProperty { get; set; })
            </summary>
            <param name="this">扩展对象。属性 Property 信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDeclaraction(System.Type)">
            <summary>
             自定义扩展方法：获取类或者接口的声明信息。包含可见性(public、protected、internal、private、
             protected internal)，修饰符(abstract),类型(class、interface)，名称
             (例如：public abstract class Product 等类似的声明)
            </summary>
            <param name="this">扩展对象。类或者接口信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.ConstructorInfo)">
            <summary>
             自定义扩展方法：获取类的构造函数的签名信息。包含名称，参数信息
             (例如：Product(string name,decimal price))
            </summary>
            <param name="this">扩展对象。构造函数信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.EventInfo)">
            <summary>
             自定义扩展方法：获取事件的签名信息。
             返回 null
            </summary>
            <param name="this">扩展对象。事件信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.FieldInfo)">
            <summary>
             自定义扩展方法：获取字段的签名信息。字段的名称
            </summary>
            <param name="this">扩展对象。字段信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：获取有关成员的签名信息
            </summary>
            <param name="this">扩展对象。成员信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.MethodInfo)">
            <summary>
             自定义扩展方法：获取方法的签名信息。包含名称，参数
             (例如：GetPrice(int id))
            </summary>
            <param name="this">扩展对象。方法信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.ParameterInfo)">
            <summary>
             自定义扩展方法：获取参数的签名信息。返回参数的名字
            </summary>
            <param name="this">扩展对象。参数信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Reflection.PropertyInfo)">
            <summary>
             自定义扩展方法：获取属性 Property 的签名信息。返回属性名称(例如：[Name | Indexer[Type]])
            </summary>
            <param name="this">扩展对象。属性 Property 信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetSignature(System.Type)">
            <summary>
             自定义扩展方法：获取类或者接口的签名信息
            (例如：[Visibility] [Modifier] [Type] [Name] [GenericArguments] [:] [Inherited Class] [Inherited Interface])
            </summary>
            <param name="this">扩展对象。类或者接口信息对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Object,System.Type)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <param name="this">扩展对象</param>
            <param name="attribute">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Object,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="this">扩展对象</param>
            <param name="attribute">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute``1(System.Object)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute``1(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="this">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByFullName(System.Object,System.String)">
            <summary>
             自定义扩展方法：通过对象的全名来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByFullName(System.Object,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的全名来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>
             自定义扩展方法：通过对象的全名来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的全名来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByName(System.Object,System.String)">
            <summary>
             自定义扩展方法：通过对象的名称来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByName(System.Object,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的名称来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String)">
            <summary>
             自定义扩展方法：通过对象的名称来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的名称来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeDescription(System.Object)">
            <summary>
             自定义扩展方法：获取对象的描述信息
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeDescription(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：获取对象的描述信息
            </summary>
            <param name="value">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeDescription(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：获取对象的描述信息
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributeDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
             自定义扩展方法：获取对象的描述信息
            </summary>
            <param name="value">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Object)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="this">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes``1(System.Object)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes``1(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="this">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="this">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByFullName(System.Object,System.String)">
            <summary>
             自定义扩展方法：通过对象的全名来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByFullName(System.Object,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的全名来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String)">
            <summary>
             自定义扩展方法：通过对象的全名来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByFullName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的全名来查找第一个自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="fullName">System.Type 的完全限定名，包括 System.Type 的命名空间，但不包括程序集</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByName(System.Object,System.String)">
            <summary>
             自定义扩展方法：通过对象的名称来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByName(System.Object,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的名称来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String)">
            <summary>
             自定义扩展方法：通过对象的名称来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributesByName(System.Reflection.MemberInfo,System.String,System.Boolean)">
            <summary>
             自定义扩展方法：通过对象的名称来查找自定义属性
            </summary>
            <exception cref="T:System.Exception">当出现异常错误时抛出</exception>
            <param name="this">扩展对象</param>
            <param name="name">成员名称</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetField``1(``0,System.String)">
            <summary>
             自定义扩展方法：搜索具有指定名称的公共字段。
             如找到，则为表示具有指定名称的公共字段的 System.Reflection.FieldInfo 对象；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的数据字段的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetField``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法：使用指定绑定约束搜索指定字段。
             返回符合指定要求的字段的 System.Reflection.FieldInfo 对象（如果找到的话）；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的数据字段的名称</param>
            <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或 零，以返回 null</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFields(System.Object)">
            <summary>
             自定义扩展方法：返回当前 System.Type 的所有公共字段。
             如果没有为当前 System.Type 定义的公共字段，则为 System.Reflection.FieldInfo 类型的空数组
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFields(System.Object,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法：使用指定绑定约束，搜索为当前 System.Type 定义的字段。
             如果没有为当前 System.Type 定义的字段，或者如果没有一个定义的字段匹配绑定约束，则为 System.Reflection.FieldInfo 类型的空数组
            </summary>
            <param name="this">扩展对象</param>
            <param name="bindingAttr"> 一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或零，以返回 null
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetFieldValue``1(``0,System.String)">
            <summary>
             自定义扩展方法：返回给定对象支持的字段的值。
             如找到，则为表示具有指定名称的公共字段的 System.Reflection.FieldInfo 对象；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="fieldName">要获取的数据字段的名称</param>
            <returns>包含此实例反映的字段值的对象</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetMemberPaths``1(``0,System.String)">
            <summary>
             自定义扩展方法：根据成员对象的全名称获取所有的成员信息
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="path">成员对象的全名称，例如 命名空间.类名.属性 等</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetMethod``1(``0,System.String)">
            <summary>
             自定义扩展方法： 搜索具有指定名称的公共方法。
             返回具有指定名称的公共方法的 System.Reflection.MethodInfo 对象（如果找到的话）；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的公共方法的名称</param>
            <returns>
              表示具有指定名称的公共方法的 System.Reflection.MethodInfo 对象（如果找到的话）；否则为 null
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetMethod``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法： 使用指定绑定约束搜索指定方法。
             返回具有指定名称的公共方法的 System.Reflection.MethodInfo 对象（如果找到的话）；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的公共方法的名称</param>
            <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或 零，以返回 null
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetMethods``1(``0)">
            <summary>
             自定义扩展方法：返回当前 System.Type 的所有公共方法。
             返回为当前 System.Type 定义的所有公共方法的 System.Reflection.MethodInfo 对象数组。
             如果没有为当前 System.Type 定义的公共方法，则为 System.Reflection.MethodInfo 类型的空数组
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetMethods``1(``0,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法：返回当前 System.Type 的所有公共方法。
             返回为当前 System.Type 定义的所有公共方法的 System.Reflection.MethodInfo 对象数组。
             如果没有为当前 System.Type 定义的公共方法，则为 System.Reflection.MethodInfo 类型的空数组
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或零，以返回 null</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetProperties(System.Object)">
            <summary>
             自定义扩展方法：返回当前 System.Type 的所有公共属性。
             返回当前 System.Type 的所有公共属性的 System.Reflection.PropertyInfo 对象数组。
             如果当前 System.Type 没有公共属性，则为 System.Reflection.PropertyInfo 类型的空数组
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetProperties(System.Object,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法：返回当前 System.Type 的所有公共属性。
             返回当前 System.Type 的所有公共属性的 System.Reflection.PropertyInfo 对象数组。
             如果当前 System.Type 没有公共属性，则为 System.Reflection.PropertyInfo 类型的空数组
            </summary>
            <param name="this">扩展对象</param>
            <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或零，以返回 null</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetProperty``1(``0,System.String)">
            <summary>
             自定义扩展方法：搜索具有指定名称的公共属性。
             返回具有指定名称的公共属性的 System.Reflection.PropertyInfo 对象（如果找到的话）；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的公共属性的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetProperty``1(``0,System.String,System.Reflection.BindingFlags)">
            <summary>
             自定义扩展方法： 使用指定绑定约束搜索指定属性。
             返回具有指定名称的公共属性的 System.Reflection.PropertyInfo 对象（如果找到的话）；否则为 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的公共属性的名称</param>
            <param name="bindingAttr">一个位屏蔽，由一个或多个指定搜索执行方式的 System.Reflection.BindingFlags 组成。
             或 零，以返回 null
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetPropertyOrField``1(``0,System.String)">
            <summary>
             自定义扩展方法： 搜索具有指定名称的公共属性或字段。
             返回具有指定名称的公共属性或字段；如果找不到则返回 null
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="name">要获取的公共属性或字段的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetPropertyValue``1(``0,System.String)">
            <summary>
             自定义扩展方法：返回给定对象支持的属性的值。如果找不到则返回 null 
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="propertyName">要获取的数据属性的名称</param>
            <returns>包含此实例反映的属性值的对象</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.InvokeMethod``1(``0,System.String,System.Object[])">
            <summary>
             自定义扩展方法：将指定参数调用当前实例所表示的方法或构造函数
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="obj">扩展对象</param>
            <param name="methodName">方法名称</param>
            <param name="parameters">方法的参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
             自定义扩展方法：将指定参数调用当前实例所表示的方法或构造函数
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="obj">扩展对象</param>
            <param name="methodName">方法名称</param>
            <param name="parameters">方法的参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsAttributeDefined(System.Object,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：判断是否 attributeType 的一个或多个实例应用于此成员
            </summary>
            <param name="this">扩展对象</param>
            <param name="attributeType">自定义特性应用于的 Type 对象</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsAttributeDefined``1(System.Object,System.Boolean)">
            <summary>
             自定义扩展方法：判断是否 attributeType 的一个或多个实例应用于此成员
            </summary>
            <param name="this">扩展对象</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetFieldValue``1(``0,System.String,System.Object)">
            <summary>
             自定义扩展方法：设置给定对象支持的字段值
            </summary>
            <param name="this">扩展对象</param>
            <param name="fieldName">字段名称</param>
            <param name="value">分配给字段的值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetPropertyValue``1(``0,System.String,System.Object)">
            <summary>
             自定义扩展方法：用索引属性的可选索引值设置该属性的值
            </summary>
            <param name="this">扩展对象</param>
            <param name="propertyName">属性名称</param>
            <param name="value">分配给属性的值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsArray``1(``0)">
            <summary>
             自定义扩展方法：获取一个值，通过该值指示 System.Type 是否为数组
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsClass``1(``0)">
            <summary>
              自定义扩展方法：获取一个值，通过该值指示 System.Type 是否是一个类；即，不是值类型或接口
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEnum``1(``0)">
            <summary>
              自定义扩展方法：获取一个值，该值指示当前的 System.Type 是否表示枚举
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSubclassOf``1(``0,System.Type)">
            <summary>
              自定义扩展方法：确定当前 System.Type 表示的类是否是从指定的 System.Type 表示的类派生的
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="type">与当前的 Type 进行比较的 Type</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsTypeOf``1(``0,System.Type)">
            <summary>
              自定义扩展方法：判断当前 System.Type 表示的类型与指定的类型是否相等
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="type">与当前的 Type 进行比较的 Type</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsTypeOrInheritsOf``1(``0,System.Type)">
            <summary>
              自定义扩展方法：确定当前 System.Type 表示的类型与指定的类型是否相等；
              或者是否是从指定的 System.Type 表示的类派生的
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="type">与当前的 Type 进行比较的 Type</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetAttribute``1(System.Reflection.Assembly)">
            <summary>
             自定义扩展方法：检索程序集的第一个自定义特性。如果没有则返回 null
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的第一个自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Assembly)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型
            </summary>
            <param name="element">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.Assembly,System.Type)">
            <summary>
             自定义扩展方法：判断是否 attributeType 的一个或多个实例应用于此成员
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">自定义特性应用于的 Type 对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.Assembly,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于程序集。参数指定程序集、要搜索的自定义特性的类型以及忽略的搜索选项
            </summary>
            <param name="element">扩展对象</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">指定是否搜索该成员的继承链以查找这些特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员和要搜索的自定义特性的类型
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型成员的自定义特性。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
             自定义扩展方法：检索应用于类型的成员的自定义特性的数组。参数指定成员和要搜索的自定义特性的类型
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员
            </param>
            <param name="type">要搜索的自定义特性的类型或基类型</param>
            <returns>一个 System.Attribute 数组，包含应用于 element 的 type 类型的自定义特性；
                     如果不存在此类自定义特性，则为空数组
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型的成员的自定义特性的数组。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员
            </param>
            <param name="type">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.MemberInfo)">
            <summary>
             自定义扩展方法：检索应用于类型的成员的自定义特性的数组
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于类型的成员的自定义特性的数组。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.MemberInfo 类派生的对象，该类描述类的构造函数、事件、字段、方法或属性成员
            </param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.MemberInfo,System.Type)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于类型成员。参数指定成员和要搜索的自定义特性的类型
            </summary>
            <param name="element">一个从 System.Reflection.MemberInfo 类派生的对象，
             该类描述类的构造函数、事件、字段、方法、类型或属性成员
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于类型成员。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先
            </summary>
            <param name="element">一个从 System.Reflection.MemberInfo 类派生的对象，
             该类描述类的构造函数、事件、字段、方法、类型或属性成员
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性。参数指定模块、要搜索的自定义特性的类型以及忽略的搜索选项。
             返回一个引用，指向应用于 element 的 attributeType 类型的单个自定义特性；如果没有此类特性，则为 null
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性。参数指定模块、要搜索的自定义特性的类型以及忽略的搜索选项。
             返回一个引用，指向应用于 element 的 attributeType 类型的单个自定义特性；如果没有此类特性，则为 null
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的 attributeType 类型的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Module)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的 attributeType 类型的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Module,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的 attributeType 类型的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="inherit">此参数被忽略，并且不会影响此方法的操作</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于模块的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的 attributeType 类型的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">此参数被忽略，并且不会影响此方法的操作</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.Module,System.Type)">
            <summary>
             自定义扩展方法：确定是否将指定类型的任何自定义特性应用于模块。参数指定模块和要搜索的自定义特性的类型。
             如果类型 attributeType 的某个自定义特性应用于 element，则为 true；否则为 false
            </summary>
            <param name="element"> 一个从 System.Reflection.Module 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.Module,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于类型成员。参数指定成员、要搜索的自定义特性的类型以及是否搜索成员的祖先。
             如果类型 attributeType 的某个自定义特性应用于 element，则为 true；否则为 false
            </summary>
            <param name="element">一个从 System.Reflection.MemberInfo 类派生的对象，
             该类描述类的构造函数、事件、字段、方法、类型或属性成员
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性。参数指定方法参数和要搜索的自定义特性的类型。
             返回一个引用，指向应用于 element 的 attributeType 类型的单个自定义特性；如果没有此类特性，则为 null
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述类成员的参数</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttribute(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性。参数指定模块、要搜索的自定义特性的类型以及忽略的搜索选项。
             返回一个引用，指向应用于 element 的 attributeType 类型的单个自定义特性；如果没有此类特性，则为 null
            </summary>
            <param name="element">扩展对象。
             一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述类成员的参数</param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.ParameterInfo)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性的数组。参数指定方法参数。
             返回一个 System.Attribute 数组，包含应用于 element 的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性的数组。参数指定模块和要搜索的自定义特性的类型。
             返回一个 System.Attribute 数组，包含应用于 element 的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">此参数被忽略，并且不会影响此方法的操作</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetCustomAttributes(System.Reflection.ParameterInfo,System.Boolean)">
            <summary>
             自定义扩展方法：检索应用于方法参数的自定义特性的数组。参数指定方法参数。
             返回一个 System.Attribute 数组，包含应用于 element 的自定义特性；如果不存在此类自定义特性，则为空数组
            </summary>
            <param name="element">扩展对象。
            一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="inherit">此参数被忽略，并且不会影响此方法的操作</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于方法参数。参数指定模块和要搜索的自定义特性的类型。
             如果类型 attributeType 的某个自定义特性应用于 element，则为 true；否则为 false
            </summary>
            <param name="element"> 一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDefined(System.Reflection.ParameterInfo,System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：确定是否将任意自定义特性应用于方法参数。参数指定模块和要搜索的自定义特性的类型。
             如果类型 attributeType 的某个自定义特性应用于 element，则为 true；否则为 false
            </summary>
            <param name="element"> 一个从 System.Reflection.ParameterInfo 类派生的对象，该类描述可移植的可执行文件
            </param>
            <param name="attributeType">要搜索的自定义特性的类型或基类型</param>
            <param name="inherit">如果为 true，则指定还在 element 的祖先中搜索自定义特性</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.Single)">
            <summary>自定义扩展方法：将指定单精度浮点数的值转换为等效的布尔值。</summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns>如果 <see langword="true" /> 不为零，则为 <paramref name="value" />；否则，为 <see langword="false" />。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.Single)">
            <summary>
            自定义扩展方法：将指定单精度浮点数的值转换为等效的 8 位无符号整数。
            如果参数大于 byte.MaxValue 或者小于 byte.MinValue， 则返回 default(byte)值。
            </summary>
            <param name="value">单精度浮点数。</param>
            <returns>
            <paramref name="value" />，舍入为最接近的 8 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.Single)" -->
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的十进制数。
            如果转换失败，则返回 default(decimal)值。
            </summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns>一个等于 <paramref name="value" /> 的十进制数。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Decimal.MaxValue" /> 或小于 <see cref="F:System.Decimal.MinValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的双精度浮点数。
            </summary>
            <param name="value">单精度浮点数。</param>
            <returns>一个等于 <paramref name="value" /> 的双精度浮点数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的 16 位带符号整数。
            如果参数小于 Int16.MinValue 或者 大于 Int16.MaxValue，则返回 default(Int16)。
            </summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的 16 位无符号整数。
            如果参数小于 UInt16.MinValue 或者 大于 UInt16.MaxValue，则返回 default(UInt16)。
            </summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToIn32(System.Single)">
            <summary>
             自定义扩展方法：将指定单精度浮点数的值转换为等效的 32 位带符号整数。
             如果参数小于 int.MinValue 或者 大于 int.MaxValue，则返回 default(Int32)。
            </summary>
            <param name="value">单精度浮点数。</param>
            <returns>
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的 32 位无符号整数。
            如果参数小于 0 或者 大于 uint.MaxValue，则返回 default(uint)。
            </summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的 64 位带符号整数。
            如果参数小于 Int64.MinValue 或者 大于 Int64.MaxValue，则返回 default(long)。
            </summary>
            <param name="value">要转换的单精度浮点数。</param>
            <returns>
            <paramref name="value" />，舍入为最接近的 64 位有符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 大于 <see cref="F:System.Int64.MaxValue" /> 或小于 <see cref="F:System.Int64.MinValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.Single)">
            <summary>
            自定义扩展方法：将指定的单精度浮点数的值转换为等效的 64 位无符号整数。</summary>
            如果参数小于 UInt64.MinValue 或者 大于 UInt64.MaxValue，则返回 default(UInt64)。
            <param name="value">要转换的单精度浮点数。</param>
            <returns>
            <paramref name="value" />，舍入为最接近的 64 位无符号整数。 如果 <paramref name="value" /> 为两个整数中间的数字，则返回二者中的偶数；即 4.5 转换为 4，而 5.5 转换为 6。</returns>
            <exception cref="T:System.OverflowException">
            <paramref name="value" /> 小于零或大于 <see cref="F:System.UInt64.MaxValue" />。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Abs(System.Single)">
            <summary>
             自定义扩展方法：返回一个单精度浮点数的绝对值
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Max(System.Single,System.Single)">
            <summary>
             自定义扩展方法：返回两个单精度浮点数中较大的一个
            </summary>
            <param name="val1">扩展对象。要比较的两个单精度浮点数中的第一个</param>
            <param name="val2">要比较的两个单精度浮点数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Min(System.Single,System.Single)">
            <summary>
             自定义扩展方法：返回两个单精度浮点数中较小的一个
            </summary>
            <param name="val1">扩展对象。要比较的两个单精度浮点数中的第一个</param>
            <param name="val2">要比较的两个单精度浮点数中的第二个</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sign(System.Single)">
            <summary>
             自定义扩展方法：返回表示数字符号的值
            </summary>
            <param name="value">扩展对象</param>
            <returns>一个指示 value 的符号的数字，如下表所示。返回值含义-1value 小于零。0value 等于零。1value 大于零</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInfinity(System.Single)">
            <summary>
            自定义扩展方法：判断指定数字是计算为负无穷大还是正无穷大。
            如果计算结果为 System.float.PositiveInfinity 或 System.float.NegativeInfinity，则为true；否则为 false
            </summary>
            <param name="d">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNegativeInfinity(System.Single)">
            <summary>
            自定义扩展方法：判断指定数字是计算是否为负无穷大
            </summary>
            <param name="d">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPositiveInfinity(System.Single)">
            <summary>
            自定义扩展方法：判断指定数字是计算是否为正无穷大
            </summary>
            <param name="d">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNaN(System.Single)">
            <summary>
            自定义扩展方法：判断指定数字的计算结果是否为不是数字 (System.Single.NaN) 的值
            </summary>
            <param name="d">扩展对象</param>
            <returns>计算结果为 System.Single.NaN，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidBooleanValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 Boolean 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidBooleanValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 Boolean 类型值。
            如果参数为 null，则此方法返回 true。
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidByteValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的8位无符号整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidByteValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的8位无符号整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSByteValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的8位有符号整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSByteValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的8位有符号整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidCharValue(System.String)">
            <summary>
             自定义扩展方法：判断字符串的值是否是有效的 char 类型值。
             如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidCharValueNullable(System.String)">
            <summary>
             自定义扩展方法：判断字符串的值是否是有效的 char 类型值。
             如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeOffSetValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 DateTimeOffset 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeOffSetValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 DateTimeOffset 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的日期时间类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDateTimeValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的日期时间类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDecimalValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 decimal 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDecimalValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 decimal 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDoubleValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 double 双精度浮点类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidDoubleValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 double 双精度浮点类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidFloatValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 float 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidFloatValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 float 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidGuidValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 Guid 类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidGuidValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 Guid 类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt16Value(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt16ValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt16Value(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt16ValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt32Value(System.String)">
            <summary>
             自定义扩展方法：判断字符串的值是否是有效的32位有符号的整数值。
             如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt32NullableValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的32位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt32Value(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的32位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt32NullableValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的32位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt64Value(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidInt64ValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt64Value(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUInt64ValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidLongValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位有符号的整数值。
            如果参数 为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidLongValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位有符号的整数值。
            如果参数 为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidULongValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位无符号的整数值。
            如果参数 为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidULongValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的64位无符号的整数值。
            如果参数 为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidShortValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidShortValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位有符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUShortValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUShortValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的16位无符号的整数值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSingleValue(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 float 单精度浮点类型值。
            如果参数为 null，则此方法返回 false
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidSingleValueNullable(System.String)">
            <summary>
            自定义扩展方法：判断字符串的值是否是有效的 float 单精度浮点类型值。
            如果参数为 null，则此方法返回 true
            </summary>
            <param name="this">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBoolean(System.String)">
            <summary>
             自定义扩展方法：尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" /> 值。
             如果字符串的值等效于 <see cref="F:System.Boolean.TrueString" />，则为 <see langword="true" />；如果字符串的值等效于 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="false" />
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToBooleanNullable(System.String)">
            <summary>
             自定义扩展方法：尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Boolean" /> 值。 
             如果字符串的值等效于 <see cref="F:System.Boolean.TrueString" />，则为 <see langword="true" />；如果字符串的值等效于 <see cref="F:System.Boolean.FalseString" />，则为 <see langword="false" />。
             如果转换失败则返回 null
            </summary>
            <param name="value">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.String)">
            <summary>
             自定义扩展方法：将指定字符串的值转换为它的等效 Unicode 字符
             如果转换成功，则包含与字符串中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。 如果字符串的值为 <see langword="null" /> 或长度不为 1，则转换失败
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToCharNullable(System.String)">
            <summary>
             自定义扩展方法：尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Char" /> 值。 
             如果转换成功，则包含与字符串中的唯一字符等效的 Unicode 字符；如果转换失败，则包含未定义的值。 如果字符串的值为 <see langword="null" /> 或长度不为 1，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToChar(System.String,System.IFormatProvider)">
            <summary>自定义扩展方法：将指定区域性特定格式设置信息，将指定字符串的第一个字符转换为 Unicode 字符。</summary>
            <param name="value">长度为 1 或 <see langword="null" /> 的字符串。</param>
            <param name="provider">一个对象，提供有关参数的区域性特定格式设置信息。 如果 provider 为 null，则使用当前区域性。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns>与 <paramref name="value" /> 中第一个且仅有的字符等效的 Unicode 字符。</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="value" /> 为 <see langword="null" />。</exception>
            <exception cref="T:System.FormatException">
            <paramref name="value" /> 的长度不是 1。</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 8 位无符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(byte) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.String,ZCN.NET.Common.Enums.DigitBit)">
            <summary>
             自定义扩展方法：(2、8、10 或 16位进制之间的转换)将指定基数的数字的字符串表示形式转换为等效的 8 位有符号整数。
             如果 <paramref name="value" /> 为 <see langword="null" />，则返回 0（零）。
             如果转换失败则返回 default(sbyte) 值。
             具体请参考微软官方文档：https://docs.microsoft.com/zh-cn/dotnet/api/system.convert.tobyte?view=netcore-3.1
            </summary>
            <param name="value">包含要转换的数字的字符串。</param>
            <param name="digitBit">进制位枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 8 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByte(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 8 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 8 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 8 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 8 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByte(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 8 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 8 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSByteNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 8 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 8 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt16Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt16Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串数为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShort(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToShortNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShort(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUShortNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 16 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 16 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 32 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 32 位有符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 32 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>将指定区域性特定格式和样式的
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt32Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 32 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 32 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 32 位无符号整数。
             当此方法返回时，如果转换成功，则包含与字符串中所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt32Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 32 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 32 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToInt64Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToUInt64Nullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLong(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToLongNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位有符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULong(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToULongNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 64 位无符号整数。
             当此方法返回时，如果转换成功，则包含字符串所包含的数字等效的 64 位无符号整数值；如果转换失败，则返回零。 如果字符串为 null 或 Empty、格式不正确，或者表示的数字小于 MinValue 或大于 MaxValue，则转换失败。
            </summary>
             如果转换失败则返回 null
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingle(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSingleNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Single.MinValue" /> 或大于 <see cref="F:System.Single.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Float.MinValue" /> 或大于 <see cref="F:System.Float.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloat(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Float.MinValue" /> 或大于 <see cref="F:System.Float.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloatNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Float.MinValue" /> 或大于 <see cref="F:System.Float.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFloatNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效单精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的单精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Float.MinValue" /> 或大于 <see cref="F:System.Float.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效双精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的双精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDouble(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效双精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的双精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效双精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的双精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDoubleNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效双精度浮点数。
             当此方法返回时，如果转换成功，则包含与字符串等效的双精度浮点数；如果转换失败，则包含零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Double.MinValue" /> 或大于 <see cref="F:System.Double.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 System.Decimal 形式。
             如果转换成功，此方法返回与字符串中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimal(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 System.Decimal 形式。
             如果转换成功，此方法返回与字符串中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.String)">
            <summary>
             自定义扩展方法：将数字的字符串表示形式转换为它的等效 System.Decimal 形式。
             如果转换成功，此方法返回与字符串中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDecimalNullable(System.String,System.IFormatProvider,System.Globalization.NumberStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式和样式的数字的字符串表示形式转换为它的等效 System.Decimal 形式。
             如果转换成功，此方法返回与字符串中所含数值相当的 <see cref="T:System.Decimal" /> 数；如果转换失败，此方法返回零。 如果字符串为 <see langword="null" /> 或 <see cref="F:System.String.Empty" />、不是有效格式的数字，或者表示的数字小于 <see cref="F:System.Decimal.MinValue" /> 或大于 <see cref="F:System.Decimal.MaxValue" />，则转换失败。
             如果转换失败则返回 null
            </summary>
            <param name="s">要转换的数字的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="numberStyle">枚举值的按位组合，用于指示可出现在字符串中的样式元素。 要指定的一个典型值为 <see cref="F:System.Globalization.NumberStyles.Integer" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEnum``1(System.String,System.Boolean)">
            <summary>
             自定义扩展方法：将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数指定该操作是否区分大小写。
             当此方法返回时，如果分析操作成功，result 将包含值由 value 表示的 TEnum 类型的对象。 如果分析操作失败，result 将包含 TEnum 的基础类型的默认值。 请注意，此值无需为 TEnum 枚举的成员
            </summary>
            <param name="value">要转换的枚举名称或基础值的字符串表示形式</param>
            <param name="ignoreCase">若要不区分大小写，则为 <see langword="true" />；若要区分大小写，则为 <see langword="false" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToEnumNullable``1(System.String,System.Boolean)">
            <summary>
             自定义扩展方法：将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。 一个参数指定该操作是否区分大小写。
             当此方法返回时，如果分析操作成功，result 将包含值由 value 表示的 TEnum 类型的对象。 如果分析操作失败，result 将包含 TEnum 的基础类型的默认值。 请注意，此值无需为 TEnum 枚举的成员。
             如果转换失败则返回 null
            </summary>
            <param name="value">要转换的枚举名称或基础值的字符串表示形式</param>
            <param name="ignoreCase">若要不区分大小写，则为 <see langword="true" />；若要区分大小写，则为 <see langword="false" /></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuid(System.String)">
            <summary>
             自定义扩展方法：将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构。
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />
            </summary>
            <param name="input">要转换的 GUID</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidNullable(System.String)">
            <summary>
             自定义扩展方法：尝试将逻辑值的指定字符串表示形式转换为其等效的 <see cref="T:System.Guid" /> 值。 
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。
             如果转换失败则返回 null
            </summary>
            <param name="input">要转换的 GUID</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidExact(System.String,System.String)">
            <summary>
             自定义扩展方法：将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。
            </summary>
            <param name="input">要转换的 GUID</param>
            <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidExactNullable(System.String,System.String)">
            <summary>
             自定义扩展方法：将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。
             如果转换失败则返回 null
            </summary>
            <param name="input">要转换的 GUID</param>
            <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidExact(System.String,ZCN.NET.Common.Enums.GuidFormat)">
            <summary>
             自定义扩展方法：将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />
            </summary>
            <param name="input">要转换的 GUID</param>
            <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToGuidExactNullable(System.String,ZCN.NET.Common.Enums.GuidFormat)">
            <summary>
             自定义扩展方法：将 GUID 的字符串表示形式转换为等效的 <see cref="T:System.Guid" /> 结构，前提是该字符串采用的是指定格式。
             如果此方法返回 <see langword="true" />，结果将包含有效的 <see cref="T:System.Guid" />。 如果字符串等于 <see cref="F:System.Guid.Empty" />，则此方法将返回 <see langword="false" />。
             如果转换失败则返回 null
            </summary>
            <param name="input">要转换的 GUID</param>
            <param name="format">下列说明符之一，指示解释 <paramref name="input" /> 时要使用的确切格式：“N”、“D”、“B”、“P”或“X”</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTime(System.String)">
            <summary>
             自定义扩展方法：将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的字符串值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果字符串为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTime(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的字符串值；如果转换失败，则为 <see cref="F:System.DateTime.MinValue" />。 如果字符串为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败
            </summary>
            <param name="s">要转换的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeExact(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
             自定义扩展方法：将指定格式、区域性特定的格式信息和样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             当此方法返回时，如果转换成功，则包含与 DateTime 中包含的日期和时间等效的字符串值；如果转换失败，则为 MinValue。 如果字符串或 format 参数为 null，或者为空字符串，或者未包含对应于 format 中指定的模式的日期和时间，则转换失败
            </summary>
            <param name="s">要转换的字符串</param>
            <param name="format">z字符串所需的格式</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeExact(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
             <summary>
              自定义扩展方法：将指定格式、区域性特定的格式信息和样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
              当此方法返回时，如果转换成功，则包含与 DateTime 中包含的日期和时间等效的字符串值；如果转换失败，则为 MinValue。 如果字符串或 format 参数为 null，或者为空字符串，或者未包含对应于 format 中指定的模式的日期和时间，则转换失败
             </summary>
             <param name="s">要转换的字符串</param>
             <param name="formats">z字符串所需的格式数组</param>
             <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
             .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
             <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
             <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeNullable(System.String)">
            <summary>
             自定义扩展方法：将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的字符串值；如果转换失败，则返回 null。 如果字符串为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败。
            </summary>
            <param name="s">要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeNullable(System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
             自定义扩展方法：将指定区域性特定格式信息和格式设置样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             如果转换成功，则包含与 <see cref="T:System.DateTime" /> 中包含的日期和时间等效的字符串值；如果转换失败，则返回 null。 如果字符串为 <see langword="null" />，是空字符串 ("") 或者不包含日期和时间的有效字符串表示形式，则转换失败
            </summary>
            <param name="s">要转换的字符串</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeExactNullable(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
             自定义扩展方法：将指定格式、区域性特定的格式信息和样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
             当此方法返回时，如果转换成功，则包含与 DateTime 中包含的日期和时间等效的字符串值；如果转换失败，则返回 null。 如果字符串或 format 参数为 null，或者为空字符串，或者未包含对应于 format 中指定的模式的日期和时间，则转换失败。
            </summary>
            <param name="s">要转换的字符串</param>
            <param name="format">字符串所需的格式。例如：{"M/d/yyyy h:mm:ss tt", "M/d/yyyy h:mm tt","MM/dd/yyyy hh:mm:ss", "M/d/yyyy h:mm:ss","M/d/yyyy hh:mm tt", "M/d/yyyy hh tt","M/d/yyyy h:mm", "M/d/yyyy h:mm","MM/dd/yyyy hh:mm", "M/dd/yyyy hh:mm"};</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。例如： CultureInfo enUS = new CultureInfo("en-US"); 请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToDateTimeExactNullable(System.String,System.String[],System.IFormatProvider,System.Globalization.DateTimeStyles)">
             <summary>
              自定义扩展方法：将指定格式、区域性特定的格式信息和样式，将日期和时间的指定字符串表示形式转换为其 <see cref="T:System.DateTime" /> 等效项。
              当此方法返回时，如果转换成功，则包含与 DateTime 中包含的日期和时间等效的字符串值；如果转换失败，则返回 null。 如果字符串或 format 参数为 null，或者为空字符串，或者未包含对应于 format 中指定的模式的日期和时间，则转换失败
             </summary>
             <param name="s">要转换的字符串</param>
             <param name="formats">字符串所需的格式数组。例如：{"M/d/yyyy h:mm:ss tt", "M/d/yyyy h:mm tt","MM/dd/yyyy hh:mm:ss", "M/d/yyyy h:mm:ss","M/d/yyyy hh:mm tt", "M/d/yyyy hh tt","M/d/yyyy h:mm", "M/d/yyyy h:mm","MM/dd/yyyy hh:mm", "M/dd/yyyy hh:mm"};</param>
             <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
             .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、DateTimeFormatInfo类、CultureInfo表示特定区域性的类。例如： CultureInfo enUS = new CultureInfo("en-US"); 请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
             <param name="styles">枚举值的按位组合，该组合定义如何根据当前时区或当前日期解释已分析日期。 要指定的一个典型值为 <see cref="F:System.Globalization.DateTimeStyles.None" />。</param>
             <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTimeSpan(System.String)">
            <summary>
             自定义扩展方法：时间间隔的字符串表示形式转换为其等效的 TimeSpan。
             此方法返回时，包含表示由字符串指定的时间间隔的对象；或者如果转换失败，则包含 Zero。
            </summary>
            <param name="s">一个字符串，用于指定进行转换的时间间隔</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTimeSpan(System.String,System.IFormatProvider)">
            <summary>
             自定义扩展方法：将指定区域性特定格式设置信息，将时间间隔的字符串表示形式转换为其等效的 TimeSpan。
             此方法返回时，包含表示由字符串指定的时间间隔的对象；或者如果转换失败，则包含 Zero。
            </summary>
            <param name="s">一个字符串，用于指定进行转换的时间间隔</param>
            <param name="provider">一个对象，提供有关字符串的区域性特定格式设置信息。
            .NET Framework 包含以下三个预定义的 IFormatProvider 实现，以提供用于对数字和日期和时间值进行格式设置或分析的区域性特定信息，分别是NumberFormatInfo类、TimeSpanFormatInfo类、CultureInfo表示特定区域性的类。请参考：https://docs.microsoft.com/zh-cn/dotnet/api/system.iformatprovider?view=netcore-3.1
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractDecimal(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 decimal 类型数字
            </summary>
            <param name="this">扩展对象</param>
            <returns>十进制数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractDecimalMany(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个 decimal 类型数字，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns>十进制数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractDouble(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 double 双精度浮点数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 双精度浮点数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractDoubleMany(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个 Decimal 类型数字，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns>双精度浮点数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt16(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 16 位有符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt16Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  16 位有符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt16(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 16 位无符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt16Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  16 位无符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 16 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt32(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 32 位有符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt32Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  32 位有符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt32(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 32 位无符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt32Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  32 位无符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 32 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt64(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 64 位有符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractInt64Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  64 位有符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt64(System.String)">
            <summary>
             自定义扩展方法：从字符串中提取 64 位无符号整数
            </summary>
            <param name="this">扩展对象</param>
            <returns> 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractUInt64Many(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取多个  64 位无符号整数，返回数组
            </summary>
            <param name="this">扩展对象</param>
            <returns> 64 位有符号整数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Extract(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
            自定义扩展方法：从字符串中提取满足条件的字符
            </summary>
            <param name="this"></param>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractLetter(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取字母
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractNumber(System.String)">
            <summary>
            自定义扩展方法：从字符串中提取数字
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertToUtf32(System.String,System.Int32)">
            <summary>
            自定义扩展方法：将字符串中指定位置的 UTF-16 编码字符或代理项对的值转换为 Unicode 码位
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>字符或代理项对表示的 21 位 Unicode 码位，该字符或代理项对在字符串参数中的位置由 index 参数指定</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetNumericValue(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 将指定字符串中位于指定位置的数字 Unicode 字符转换为双精度浮点数
            </summary>
            <param name="this">扩展对象。字符串</param>
            <param name="index">要计算的字符在字符串中的位置</param>
            <returns>如果字符串中位于 index 处的字符表示数字，则为该字符的数值；否则为 -1 </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetUnicodeCategory(System.String,System.Int32)">
            <summary>
             自定义扩展方法：将指定字符串中位于指定位置的字符分类到由一个 System.Globalization.UnicodeCategory 值标识的组中
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>一个 System.Globalization.UnicodeCategory 枚举常数，标识包含字符串中位于 index 处的字符的组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsControl(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置处的字符是否属于控制字符类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是控制字符，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDigit(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置处的字符是否属于十进制数字类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是十进制数字，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetter(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定的 Unicode 字符是否属于字母
            </summary>
            <param name="this">扩展对象。字符串</param>
            <param name="index">要计算的字符在字符串中的位置</param>
            <returns>如果字符串中 index 位置处的字符是字母，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetterOrDigit(System.String,System.Int32)">
            <summary>
            自定义扩展方法：判断将指定字符串中指定位置处的字符分类为字母还是十进制数字
            </summary>
            <param name="this">扩展对象。字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中 index 位置处的字符是字母或十进制数字，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLower(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置处的字符是否属于小写字母类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是小写字母，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNumber(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置的字符是否属于数字类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 的字符是数字，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPunctuation(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置处的字符是否属于标点符号类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns> 如果字符串中位于 index 处的字符是标点符号，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSeparator(System.String,System.Int32)">
            <summary>
            自定义扩展方法： 判断指定字符串中位于指定位置处的字符是否属于分隔符类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是分隔符，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSurrogate(System.String,System.Int32)">
            <summary>
            自定义扩展方法：判断指定字符串中位于指定位置的字符是否具有代理项码位
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于位置 index 的字符为高代理项或低代理项，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsHighSurrogate(System.String,System.Int32)">
            <summary>
             自定义扩展方法：判断字符串中指定位置处的 System.Char 对象是否为高代理项
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns> 如果 s 参数中指定字符的数值范围从 U+D800 到 U+DBFF，则为 true；否则为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLowSurrogate(System.String,System.Int32)">
            <summary>
             自定义扩展方法：判断字符串中指定位置处的 System.Char 对象是否为低代理项
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns> 如果 s 参数中指定字符的数值范围从 U+DC00 到 U+DFFF，则为 true；否则为 false
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSurrogatePair(System.String,System.Int32)">
            <summary>
            自定义扩展方法：判断字符串中指定位置处的两个相邻 System.Char 对象是否形成代理项对
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串参数包括 index 和 index + 1 位置处的相邻字符，并且 index 位置处字符的数值在 U+D800 到 U+DBFF 范围内，
                     index +1 位置处字符的数值在 U+DC00 到 U+DFFF 范围内，则为 true；否则为 false
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSymbol(System.String,System.Int32)">
            <summary>
            自定义扩展方法：判断指定字符串中位于指定位置处的字符是否属于符号字符类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是符号字符，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUpper(System.String,System.Int32)">
            <summary>
            自定义扩展方法：判断指定字符串中位于指定位置处的字符是否属于大写字母类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是大写字母，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsWhiteSpace(System.String,System.Int32)">
            <summary>
             自定义扩展方法：判断指定字符串中位于指定位置处的字符是否属于空白类别
            </summary>
            <param name="this">字符串</param>
            <param name="index">要计算的字符在 s 中的位置</param>
            <returns>如果字符串中位于 index 处的字符是空白，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CompareOrdinal(System.String,System.String)">
            <summary>
             自定义扩展方法：通过计算每个字符串中相应 System.Char 对象的数值来比较两个指定的 System.string 对象
            </summary>
            <param name="strA">要比较的第一个字符串</param>
            <param name="strB">要比较的第二个字符串</param>
            <returns>
               值条件小于零表示 strA 小于 strB。等于零表示 strA 与 strB 相等。大于零表示 strA 大于 strB
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
              通过计算两个指定的 System.string 对象的每个子字符串中相应 System.Char 对象的数值比较子字符串
            </summary>
            <param name="strA">要在比较中使用的第一个字符串</param>
            <param name="indexA"> strA 中子字符串的起始索引</param>
            <param name="strB">要在比较中使用的第二个字符串</param>
            <param name="indexB">strB 中子字符串的起始索引</param>
            <param name="length">要比较的子字符串中字符的最大数量</param>
            <returns>
              一个 32 位带符号整数，指示两个比较数之间的词法关系。
             值条件小于零表示 strA 中的子字符串小于 strB 中的子字符串。
                     零子字符串相等，或者 length 为零。
                     大于零 strA 中的子字符串大于 strB 中的子字符串
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concat(System.String,System.String)">
            <summary>
             自定义扩展方法：连接 <see cref="T:System.String" /> 的两个指定实例
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concat(System.String,System.String,System.String)">
            <summary>
            自定义扩展方法：连接 <see cref="T:System.String" /> 的三个指定实例
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concat(System.String,System.String,System.String,System.String)">
            <summary>
            自定义扩展方法：连接 <see cref="T:System.String" /> 的四个指定实例
            </summary>
            <param name="str0"></param>
            <param name="str1"></param>
            <param name="str2"></param>
            <param name="str3"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concat``1(System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            自定义扩展方法：连接 <see cref="T:System.String" /> 的多个指定实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str0"></param>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.String)">
            <summary>
             自定义扩展方法： 创建一个与指定的 System.String 具有相同值的 System.String 的新实例
            </summary>
            <param name="str">字符串</param>
            <returns> 值与 str 相同的新字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Intern(System.String)">
            <summary>
            自定义扩展方法： 检索系统对指定 System.String 的引用
            </summary>
            <param name="str">要在暂存池中搜索的字符串</param>
            <returns>如果暂存了 str，则返回系统对其的引用；否则返回对值为 str 的字符串的新引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInterned(System.String)">
            <summary>
            自定义扩展方法： 检索对指定 System.String 的引用
            </summary>
            <param name="str">要在暂存池中搜索的字符串</param>
            <returns> 如果 str 在公共语言运行时的暂存池中，则返回对它的引用；否则返回 null</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.JoinWith(System.String[],System.String,System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：串联字符串数组的指定元素，其中在每个元素之间将指定分隔符
            </summary>
            <param name="values">一个包含要串联的字符串的集合</param>
            <param name="separator">要用作分隔符的字符串</param>
            <param name="startIndex">value 中要使用的第一个元素</param>
            <param name="count"> 要使用的 value 的元素数</param>
            <returns>由 value 中的字符串组成的字符串，这些字符串以 separator 字符串分隔。
                     如果 count 为零，value 没有元素，或 separator以及 value 的全部元素均为 System.string.Empty，则为 System.string.Empty
            </returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Split(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             自定义扩展方法：串联字符串数组的所有元素，其中在每个元素之间将指定分隔符
            </summary>
            <param name="str"></param>
            <param name="separator">要用作分隔符的字符串</param>
            <param name="options">匹配选项</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMatch(System.String,System.String)">
            <summary>
            自定义扩展方法： 判断所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            自定义扩展方法： 判断所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Match(System.String,System.String)">
            <summary>
            自定义扩展方法： 在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Match(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             自定义扩展方法： 在指定的输入字符串中搜索指定的正则表达式的第一个匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项</param>
            <returns>一个对象，包含有关匹配项的信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Matches(System.String,System.String)">
            <summary>
            自定义扩展方法：在指定的输入字符串中搜索指定的正则表达式的所有匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>搜索操作找到的 System.Text.RegularExpressions.Match 对象的集合</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Matches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
             自定义扩展方法：在指定的输入字符串中搜索指定的正则表达式的所有匹配项
            </summary>
            <param name="input">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">枚举值的一个按位组合，这些枚举值提供匹配选项</param>
            <returns>搜索操作找到的 System.Text.RegularExpressions.Match 对象的集合</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Append(System.String,System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加值
            </summary>
            <param name="this">扩展对象,要连接的第一个字符串</param>
            <param name="value">要连接的第二个字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDot(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加1个点
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDot3(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加3个点
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDot6(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加6个点
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加1个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine2(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加2个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine3(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加3个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine4(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加4个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine5(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加5个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine6(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加6个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine7(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加7个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine8(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加8个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine9(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加9个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendNewLine10(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加10个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加1个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace2(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加2个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace3(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加3个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace4(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加4个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace5(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加5个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace6(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加6个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace7(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加7个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace8(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加8个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace9(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加9个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSpace10(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加10个空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracketsLeftZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的方括号左边部分【
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracketsRightZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的方括号右边部分】
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracketsLeftEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的方括号左边部分[
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracketsRightEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的方括号右边部分]
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracesLeft(System.String)">
            <summary>
              自定义扩展方法：在字符串后面大括号左边部分{
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendBracesRight(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加大括号右边部分}
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendParenthesessLeftZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的圆括号左边部分（
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendParenthesessRightZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的圆括号右边部分）
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendParenthesessLeftEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的圆括号左边部分(
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendParenthesessRightEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的圆括号右边部分)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendUnderline(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加下划线_
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendModdilelineZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下中划线—
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendModdilelineEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文文状态下中划线-
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendCommaZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下逗号，
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendCommaEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文文状态下逗号,
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendColonZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下冒号：
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendColonEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文文状态下冒号:
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSingleQuotationLeftZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的单引号左边部分‘
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSingleQuotationRightZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的单引号右边部分’
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSingleQuotationLeftEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的单引号左边部分'
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendSingleQuotationRightEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的单引号右边部分'
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDoubleQuotationLeftZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的双引号左边部分“
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDoubleQuotationRightZh(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加中文状态下的双引号右边部分”
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDoubleQuotationLeftEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的双引号左边部分"
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendDoubleQuotationRightEn(System.String)">
            <summary>
              自定义扩展方法：在字符串后面添加英文状态下的双引号右边部分"
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BreakText(System.String,System.Int32)">
            <summary>
              自定义扩展方法：把字符串按每行多少个字断行
            </summary>
            <param name="this">扩展对象</param>
            <param name="lineCount">每行多少个字</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.BrToNewLine(System.String)">
            <summary>
             自定义扩展方法：将html标签br 替换为2个换行符号
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NewLineToBr(System.String)">
            <summary>
             自定义扩展方法：将2个换行符号替换为html标签br
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concatenate(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
             自定义扩展方法：将集合中的所有元素串联成一个字符串并返回串联后的字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concatenate(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
             自定义扩展方法：将指定分隔符串联集合中的所有元素并返回串联后的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="separator">要用作分隔符的字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
             自定义扩展方法：将集合中的所有元素循环传入委托函数并执行，将函数的返回结果串联成一个字符串并返回</summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="source">扩展对象</param>
            <param name="func">委托函数</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Concatenate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
             自定义扩展方法：将集合中的所有元素循环传入并执行委托函数，将指定分隔符将函数的返回结果串联成一个字符串并返回</summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="source">扩展对象</param>
            <param name="func">委托函数</param>
            <param name="separator">要用作分隔符的字符串</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConcatWith(System.String,System.String[])">
            <summary>
             自定义扩展方法：将字符串与字符数组的元素连接成一个字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">字符串实例的数组</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotContains(System.String,System.String)">
            <summary>
             自定义扩展方法：判断字符串中是否不包含指定的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="value">字符串</param>
            <returns>不包含返回true，包含返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotContains(System.String,System.String,System.StringComparison)">
            <summary>
             自定义扩展方法：判断字符串中是否包不含指定的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="value">字符串</param>
            <param name="comparisonType">指定搜索规则的枚举值之一</param>
            <returns>不包含返回true，包含返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAll(System.String,System.String[])">
            <summary>
             自定义扩展方法：判断字符串中是否包含字符数组中的所有元素
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">字符数组</param>
            <returns>全部包含返回true，否则返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
             自定义扩展方法：判断字符串中是否包含字符数组中的所有元素
            </summary>
            <param name="this">扩展对象</param>
            <param name="comparisonType">指定搜索规则的枚举值之一</param>
            <param name="values">字符数组</param>
            <returns>全部包含返回true，否则返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAny(System.String,System.String[])">
            <summary>
             自定义扩展方法：判断字符串中是否包含字符数组中的任一元素
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">字符数组</param>
            <returns>包含任意一个返回true，否则返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
             自定义扩展方法：判断字符串中是否包含字符数组中的任一元素
            </summary>
            <param name="this">扩展对象</param>
            <param name="comparisonType">指定搜索规则的枚举值之一</param>
            <param name="values">字符数组</param>
            <returns>包含任意一个返回true，否则返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.String,System.IO.Stream)">
            <summary>
             将字符串中的字符序列化为输出上的字节，然后刷新输出。
            </summary>
            <param name="input">字符串输入</param>
            <param name="output"><see cref="T:System.IO.Stream"/>输出</param>  
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Copy(System.String,System.IO.StreamWriter)">
            <summary>
             将字符从a<see cref="T:System.String"/>复制到a<see cref="T:System.IO.StreamWriter"/>
            </summary>
            <param name="input">字符串输入</param>
            <param name="output"><see cref="T:System.IO.StreamWriter"/>输出</param>  
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>      
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.EscapeXml(System.String)">
            <summary>
             自定义扩展方法：对XML文档中特殊的字符进行转义
            </summary>
            <param name="this">扩展对象</param>
            <returns>转义后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Format(System.String,System.Object)">
            <summary>
            自定义扩展方法：将指定字符串中的一个或多个格式项替换为指定对象的字符串表示形式
            </summary>
            <param name="this">复合格式字符串</param>
            <param name="arg0">要设置格式的对象</param>
            <returns>@this 的副本，其中的任何格式项均替换为 arg0 的字符串表示形式</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Format(System.String,System.Object,System.Object)">
            <summary>
            自定义扩展方法： 将指定字符串中的格式项替换为两个指定对象的字符串表示形式
            </summary>
            <param name="this">复合格式字符串</param>
            <param name="arg0">要设置格式的第一个对象</param>
            <param name="arg1">要设置格式的第二个对象</param>
            <returns>@this 的副本，其中的格式项替换为 arg0 和 arg1 的字符串表示形式</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Format(System.String,System.Object,System.Object,System.Object)">
            <summary>
            自定义扩展方法： 将指定字符串中的格式项替换为三个指定对象的字符串表示形式
            </summary>
            <param name="this">复合格式字符串</param>
            <param name="arg0">要设置格式的第一个对象</param>
            <param name="arg1">要设置格式的第二个对象</param>
            <param name="arg2">要设置格式的第三个对象</param>
            <returns>@this 的副本，其中的格式项已替换为 arg0、arg1 和 arg2 的字符串表示形式</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Format(System.String,System.Object[])">
            <summary>
             自定义扩展方法： 将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式
            </summary>
            <param name="this">复合格式字符串</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
            <returns>@this 的副本，其中的格式项已替换为 args 中相应对象的字符串表示形式</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertHexStringToByteArray(System.String)">
            <summary>
             自定义扩展方法：将十六进制数字的格式化字符串(例如：6f1d965223738c4e58b0da9da4bc4d0203010001)
             转换为二进制字节数组
            </summary>
            <param name="hexString">x50916 格式的字符串。例如：</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertByteArrayToHexString(System.Byte[])">
            <summary>
             自定义扩展方法：将字二进制字节组转换为十六进制数字的格式化字符串（例如：e4 ca b2）
            </summary>
            <param name="data">二进制字节数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertHexStringToASCII(System.String)">
            <summary>
              自定义扩展方法：将一条十六进制字符串转换为ASCII
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertHexStringToBinary(System.String)">
            <summary>
             自定义扩展方法：将16进制字符串转换为二进制数组
            </summary>
            <param name="hexString">十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IfEmpty(System.String,System.String)">
            <summary>
              自定义扩展方法：如果扩展对象为空字符串，返回默认值；否则返回本身
            </summary>
            <param name="this">扩展对象</param>
            <param name="defaultValue">默认值</param>
            <returns>如果扩展对象不为空字符串，则返回本身；否则返回默认值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetter(System.String)">
            <summary>
            自定义扩展方法：判断字符串中是否仅仅包含字母a-zA-Z
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLetterAndNumeric(System.String)">
            <summary>
            自定义扩展方法：判断字符串中是否仅仅包含字母与数字a-zA-Z0-9
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsLike(System.String,System.String)">
            <summary>
            自定义扩展方法：判断字符串是否匹配指定的模式
            </summary>
            <param name="this">扩展对象</param>
            <param name="pattern">匹配默认</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNumeric(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否仅包含0-9的数字
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsPalindrome(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否是回文字符串(顺读和倒读都一样)
            </summary>
            <param name="this">扩展对象</param>
            <returns>如果是回文则返回true，否则返回false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidEmail(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否复合Email地址格式
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidIP(System.String)">
            <summary>
              自定义扩展方法：判断字符串是否复合IP地址格式
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsValidUrl(System.String)">
            <summary>
              自定义扩展方法：判断字符串是否复合Url地址格式
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NullIfEmpty(System.String)">
            <summary>
             自定义扩展方法：如果扩展对象等于空字符串则返回null，否则返回本身
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NullIfWhiteSpace(System.String)">
            <summary>
             自定义扩展方法：如果扩展对象等于空白字符串则返回null，否则返回本身
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.PathCombine(System.String,System.String[])">
            <summary>
             自定义扩展方法：将字符串与字符串数组组合成一个路径
            </summary>
            <param name="this">扩展对象</param>
            <param name="paths">字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveDiacritics(System.String)">
            <summary>
              自定义扩展方法：从字符串中移除附加符号字符
            </summary>
            <param name="this">扩展对象</param>
            <returns>无符号字符的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveFirst(System.String,System.String)">
            <summary>
             自定义扩展方法：从字符串起始位置开始删除到第一次出现的内容的位置结束
            </summary>
            <param name="this">扩展对象</param>
            <param name="value">字符串中第一次出现的内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveLast(System.String,System.String)">
            <summary>
             自定义扩展方法：从字符串中最后一次出现的内容的位置开始删除
            </summary>
            <param name="this">扩展对象</param>
            <param name="value">字符串中最后一次出现的内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveLast(System.String,System.String,System.Int32)">
            <summary>
             自定义扩展方法：从字符串中最后一次出现的内容的位置开始删除指定数目的字符
            </summary>
            <param name="this">扩展对象</param>
            <param name="value">字符串中最后一次出现的内容</param>
            <param name="count">要删除的字符数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveLetter(System.String)">
            <summary>
             自定义扩展方法：从字符串中移除字母
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveNumber(System.String)">
            <summary>
             自定义扩展方法：从字符串中移除数字
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.RemoveWhere(System.String,System.Func{System.Char,System.Boolean})">
            <summary>
             自定义扩展方法：从字符串中移除指定条件的字符
            </summary>
            <param name="this">扩展对象</param>
            <param name="predicate">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Repeat(System.String,System.Int32)">
            <summary>
             自定义扩展方法：将字符串按照指定的次数重复拼接在一起
            </summary>
            <param name="this">扩展对象</param>
            <param name="repeatCount">重复次数</param>
            <returns>拼接后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Replace(System.String,System.Int32,System.Int32,System.String)">
            <summary>
             自定义扩展方法：从指定的位置开始查找指定长度的内容并新的值替换掉
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="length">指定长度</param>
            <param name="value">替换的内容</param>
            <returns>替换后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReplaceFirst(System.String,System.String,System.String)">
            <summary>
            自定义扩展方法：使用新值替换字符串中第一次出现的旧值
            </summary>
            <param name="this">扩展对象</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReplaceFirst(System.String,System.Int32,System.String,System.String)">
            <summary>
            自定义扩展方法：使用新值替换字符串中第一个到指定数量的旧值
            </summary>
            <param name="this">扩展对象</param>
            <param name="number">数量</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReplaceLast(System.String,System.String,System.String)">
            <summary>
            自定义扩展方法：使用新值替换字符串中最后一次出现的旧值
            </summary>
            <param name="this">扩展对象</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReplaceLast(System.String,System.Int32,System.String,System.String)">
            <summary>
            自定义扩展方法：使用新值替换字符串中指定数量到最后一个的旧值
            </summary>
            <param name="this">扩展对象</param>
            <param name="number">数量</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ReplaceWhenEquals(System.String,System.String,System.String)">
            <summary>
             自定义扩展方法：当扩展对象的值与旧值相等时替换为新值
            </summary>
            <param name="this">扩展对象</param>
            <param name="oldValue">旧值</param>
            <param name="newValue">新值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Reverse(System.String)">
            <summary>
             自定义扩展方法：将字符串倒序
            </summary>
            <param name="this">扩展对象</param>
            <returns>倒序后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SaveAs(System.String,System.String,System.Boolean)">
            <summary>
              自定义扩展方法：将扩展对象的值保存为一个文件
            </summary>
            <param name="this">扩展对象</param>
            <param name="fileName">文件名称(包含全路径)</param>
            <param name="append">（可选）如果文本存在，则应将其附加到文件</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SaveAs(System.String,System.IO.FileInfo,System.Boolean)">
            <summary>
              自定义扩展方法：将扩展对象的值保存为一个文件
            </summary>
            <param name="this">扩展对象</param>
            <param name="file">文件操作对象</param>
            <param name="append">（可选）如果文本存在，则应将其附加到文件</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Split(System.String,System.String,System.StringSplitOptions)">
            <summary>
             自定义扩展方法：将指定分割符号，将字符串分割为字符串数组
            </summary>
            <param name="this">扩展对象</param>
            <param name="separator">分割符号</param>
            <param name="option">字符串分割选项枚举</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.StripHtml(System.String)">
            <summary>
             自定义扩展方法：去除字符串中的HTML标签以及单引号双引号包裹的属性，返回普通的内容
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SubstringAfter(System.String,System.String)">
            <summary>
              自定义扩展方法：截取字符串中指定内容之后的的全部字符。
              如果指定的内容不存在与字符串中则返回空字符串
            </summary>
            <param name="this"></param>
            <param name="value">指定内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SubstringBefore(System.String,System.String)">
            <summary>
              自定义扩展方法：截取从字符串的开始位置到指定内容位置的字符。
              如果指定的内容不存在与字符串中则返回空字符串
            </summary>
            <param name="this"></param>
            <param name="value">指定内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SubstringLeft(System.String,System.Int32)">
            <summary>
              自定义扩展方法：如果指定长度小于字符串长度，则从字符串的开头截取到指定位置。
              如果指定长度大于字符串长度，则返回原字符串
            </summary>
            <param name="this"></param>
            <param name="length">指定内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SubstringRight(System.String,System.Int32)">
            <summary>
              自定义扩展方法：如果指定长度小于字符串长度，则返回原字符串。
              如果指定长度大于字符串长度，则从字符串的开头截取到指定位置
            </summary>
            <param name="this"></param>
            <param name="length">指定内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SubstringBetween(System.String,System.String,System.String)">
            <summary>
              自定义扩展方法：截取字符串中指定的2个字符串之间的字符。
              如果指定的内容不存在与字符串中则返回空字符串
            </summary>
            <param name="this"></param>
            <param name="before"></param>
            <param name="after"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：以指定的编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <param name="encoding">编码方式。如果为null，则使用系统默认的编码方式</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArray(System.String,System.String)">
            <summary>
              自定义扩展方法：以指定的编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <param name="encodingName">编码方式。建议使用 EncodingNames 类中的常量值</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByAscii(System.String)">
            <summary>
              自定义扩展方法：以ASCIIEncoding编码方式将字符串转换为字节数组 
            </summary>
            <param name="this">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByBase64(System.String)">
            <summary>
              自定义扩展方法：将指定字符串（它将二进制数据编码为 Base64 数字）转换为等效的 8 位无符号整数数组。
              如果字符串不是由二进制数据编码为 Base64 数字的字符串，则会转换失败。返回 null。
            </summary>
            <param name="sourceString">扩展对象。二进制数据编码为 Base64 数字字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByBigEndianUnicode(System.String)">
            <summary>
              自定义扩展方法：使用 Big Endian 字节顺序的 UTF-16 格式的编码将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByDefault(System.String)">
            <summary>
              自定义扩展方法：使用操作系统的当前 ANSI 代码页的编码将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByGB2312(System.String)">
            <summary>
              自定义扩展方法：以 UTF7 编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByUtf7(System.String)">
            <summary>
              自定义扩展方法：以 UTF7 编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByUtf8(System.String)">
            <summary>
              自定义扩展方法：以 UTF8 编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByUtf32(System.String)">
            <summary>
              自定义扩展方法：以 UTF32 编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToByteArrayByUnicode(System.String)">
            <summary>
              自定义扩展方法：以 Unicode 编码方式将字符串转换为字节数组 
            </summary>
            <param name="sourceString">扩展对象</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToHexadecimalBit(System.String,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：实现各进制数间的转换。ConvertBase("15",10,16)表示将十进制数15转换为16进制的数
            </summary>
            <param name="value">要转换的值,即原值</param>
            <param name="fromHexadecimalBit">原值的进制</param>
            <param name="toHexadecimalBit">目标进制</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertToToSBC(System.String)">
             <summary>
             自定义扩展方法：转全角的函数(SBC case)
             </summary>
             <param name="this">扩展对象,任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ConvertToDBC(System.String)">
             <summary>
             自定义扩展方法：转半角的函数(SBC case)
             </summary>
             <param name="this">扩展对象,任意字符串</param>
             <returns>全角字符串</returns>
            <remarks>
            全角空格为12288，半角空格为32
            其他字符半角(33-126)与全角(65281-65374)的对应关系是：均相差65248
            </remarks>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToSecureString(System.String)">
            <summary>
              自定义扩展方法：将字符串转换为保密的文本对象
            </summary>
            <param name="this">扩展对象</param>
            <returns>保密的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetOriginalString(System.Security.SecureString)">
            <summary>
             自定义扩展方法：获取 SecureString 对象的原始字符串内容
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTitleCase(System.String)">
            <summary>
             自定义扩展方法：将指定字符串转换为词首字母大写。
             例如：product_no sale 转换结果为 Product_No Sale。
            <para>该方法与 ToPascalCase()方法相同</para>
            </summary>
            <param name="this">扩展对象</param>
            <returns>首字母大写的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
             自定义扩展方法：将指定字符串转换为词首字母大写。
             例如：product_no sale 转换结果为 Product_No Sale
            <para>该方法与 ToPascalCase()方法相同</para>
            </summary>
            <param name="this">扩展对象</param>
            <param name="cultureInfo">区域信息对象</param>
            <returns>首字母大写的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToPascalCase(System.String)">
            <summary>
             自定义扩展方法：将指定字符串转换为词首字母大写。
             例如：product_no sale 转换结果为 Product_No Sale。
            <para>该方法与 ToTitleCase()方法相同</para>
            </summary>
            <param name="this">扩展对象</param>
            <returns>首字母大写的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToPascalCase(System.String,System.Globalization.CultureInfo)">
            <summary>
             自定义扩展方法：将指定字符串转换为词首字母大写(Pascal命名)。
             例如：product_no sale 转换结果为 Product_No Sale。
            <para>该方法与 ToTitleCase()方法相同</para>
            </summary>
            <param name="this">扩展对象</param>
            <param name="cultureInfo">区域信息对象</param>
            <returns>首字母大写的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.TrimAll(System.String)">
            <summary>
             自定义扩展方法：去除字符串中的所有空格
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Trim(System.String)">
            <summary>
             自定义扩展方法：从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符和尾部空白字符
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.TrimStart(System.String)">
            <summary>
             自定义扩展方法：从当前 <see cref="T:System.String" /> 对象移除所有前导空白字符
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.TrimEnd(System.String)">
            <summary>
             自定义扩展方法：从当前 <see cref="T:System.String" /> 对象移除所有尾部空白字符
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Truncate(System.String,System.Int32)">
            <summary>
             自定义扩展方法：将阶段的字符串使用三个点代替
            </summary>
            <param name="this">扩展对象</param>
            <param name="maxLength">最终显示的最大长度</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Truncate(System.String,System.Int32,System.String)">
            <summary>
             自定义扩展方法：将截断的字符串使用后缀代替
            </summary>
            <param name="this">扩展对象</param>
            <param name="maxLength">最终显示的最大长度</param>
            <param name="suffix">后缀，替换字符串</param>
            <returns>A string.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Wrap(System.String,System.String,System.String)">
            <summary>
              自定义扩展方法：给字符串添加前缀与后缀
            </summary>
            <param name="this">扩展对象</param>
            <param name="prefix">前缀</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.DoWrap(System.String,System.String,System.String)">
            <summary>
              自定义扩展方法：给字符串添加前缀与后缀
            </summary>
            <param name="this">扩展对象</param>
            <param name="prefix">前缀</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithBracketsZh(System.String)">
            <summary>
              自定义扩展方法：使用中文状态下的方括号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回【ProductName】
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithBracketsEn(System.String)">
            <summary>
              自定义扩展方法：使用英文状态下的方括号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回[ProductName]
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithBraces(System.String)">
            <summary>
              自定义扩展方法：使用花括号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回{ProductName}
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithParenthesesZh(System.String)">
            <summary>
              自定义扩展方法：使用中文状态下的圆括号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回（ProductName）
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithParenthesesEn(System.String)">
            <summary>
              自定义扩展方法：使用英文状态下的圆括号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回(ProductName)
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithSingleQuotationZh(System.String)">
            <summary>
              自定义扩展方法：使用中文状态下的单引号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回‘ProductName’
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithSingleQuotationEn(System.String)">
            <summary>
              自定义扩展方法：使用英文状态下的单引号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回'ProductName'
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithSingleQuotationEn(System.String[])">
            <summary>
              自定义扩展方法：使用英文状态下的单引号来包裹字符串数组中的每个元素并使用逗号分隔拼接成字符串。
              例如：{ProductName,ProductPrice}，执行该方法后返回'ProductName','ProductPrice'
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithDoubleQuotationZh(System.String)">
            <summary>
              自定义扩展方法：使用中文状态下的双引号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回“ProductName”
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.WrapWithDoubleQuotationEn(System.String)">
            <summary>
              自定义扩展方法：使用英文状态下的双引号来包裹字符串。
              如果扩展对象本身为null或者空或者空白字符串，则返回空字符串。
              例如：ProductName，执行该方法后返回"ProductName"
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.In(System.String,System.String[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为true，否则为false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.NotIn(System.String,System.String[])">
            <summary>
            自定义扩展方法：判断扩展对象的值是否不存在于数组中
            </summary>
            <param name="this">扩展对象</param>
            <param name="values">目标数组</param>
            <returns>如果数组包含对象，则为true，否则为false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsEmpty(System.String)">
            <summary>
            自定义扩展方法：判断字符串是否不为 null 且长度等于0
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotEmpty(System.String)">
            <summary>
            自定义扩展方法：判断字符串是否不为 null 且长度大于0。
            该方法与 String.IsNotNullAndEmpty()方法功能一样
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrEmpty(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否为 null 或者空字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndEmpty(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否不为 null 且不为空字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsWhitespace(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否不为 null 且是空白字符串
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNullOrWhiteSpace(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否为 null 、空字符串或者空白字符串
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNotNullAndWhiteSpace(System.String)">
            <summary>
             自定义扩展方法：判断字符串是否不为 null、空字符串、空白字符串
            </summary>
            <param name="value">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSequenceEqual(System.String,System.String)">
            <summary>
             自定义扩展方法：通过使用相应类型的默认相等比较器对序列的元素进行比较，以确定两个序列是否相等。
             如果根据相应类型的默认相等比较器，两个源序列的长度相等，且其相应元素相等，则为 true；否则为 false
            </summary>
            <param name="this">扩展对象</param>
            <param name="targetString">目标字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractChar(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取字符
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的字符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractChar(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取字符
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的字符在扩展对象的值中的结束位置</param>
            <returns>提取的字符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractChar(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取字符
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的字符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractChar(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取字符
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的字符在扩展对象的值中的结束位置</param>
            <returns>提取的字符</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractComment(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractComment(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的注释在扩展对象的值中的结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractComment(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractComment(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的注释在扩展对象的值中的结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentMultiLine(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取多行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取多行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的注释在扩展对象的值中的结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取多行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentMultiLine(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取多行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的注释在扩展对象的值中的结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentSingleLine(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取单行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取单行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取单行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractCommentSingleLine(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取单行注释。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">结束位置</param>
            <returns>提取的注释</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractHexadecimal(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取十六进制数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的十六进制数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取十六进制数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">结束位置</param>
            <returns>提取的十六进制数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取十六进制数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的十六进制数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractHexadecimal(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取十六进制数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">结束位置</param>
            <returns>提取的十六进制数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractKeyword(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取.Net关键字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的.Net关键字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractKeyword(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取.Net关键字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的.Net关键字在扩展对象的值中的结束位置</param>
            <returns>提取的.Net关键字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractKeyword(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取.Net关键字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的.Net关键字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractKeyword(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取.Net关键字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的.Net关键字在扩展对象的值中的结束位置</param>
            <returns>提取的.Net关键字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractNumber(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractNumber(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的数字在扩展对象的值中的结束位置</param>
            <returns>提取的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractNumber(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractNumber(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取数字。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的数字在扩展对象的值中的结束位置</param>
            <returns>提取的数字</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractOperator(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取特殊符号。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的特殊符号</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractOperator(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取特殊符号。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的特殊符号在扩展对象的值中的结束位置</param>
            <returns>提取的特殊符号</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractOperator(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取特殊符号。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的特殊符号</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractOperator(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取特殊符号
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的特殊符号在扩展对象的值中的结束位置</param>
            <returns>提取的特殊符号</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractString(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取(单双)引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的(单双)引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractString(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的起始位置提取(单双)引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的(单双)引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的(单双)引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractString(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取(单双)引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的(单双)引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractString(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值的指定位置提取(单双)引号后的字符串
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的(单双)引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的(单双)引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的起始位置提取双引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的起始位置提取双引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的双引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的指定位置提取双引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasDoubleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的指定位置提取双引号后的字符串
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的双引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的起始位置提取单引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的起始位置提取单引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的单引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的指定位置提取单引号后的字符串。
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringArobasSingleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
             自定义扩展方法：从扩展对象的值(以@开头)的指定位置提取单引号后的字符串
             如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的单引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringDoubleQuote(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取双引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取双引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的双引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取双引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringDoubleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取双引号后的字符串
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的双引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的双引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringSingleQuote(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取单引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取单引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的单引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取单引号后的字符串。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractStringSingleQuote(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取单引号后的字符串
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的单引号后的字符串在扩展对象的值中的结束位置</param>
            <returns>提取的单引号后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractToken(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取令牌(包含：Keyword、Literal、Operator、String、Integer、Real等)。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractToken(System.Text.StringBuilder,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取令牌。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的令牌在扩展对象的值中的结束位置</param>
            <returns>提取的令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractToken(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取令牌(包含：Keyword、Literal、Operator、String、Integer、Real等)。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractToken(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取令牌(包含：Keyword、Literal、Operator、String、Integer、Real等)
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的令牌在扩展对象的值中的结束位置</param>
            <returns>提取的令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractTriviaToken(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取琐事令牌。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <returns>提取的琐事令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的起始位置提取琐事令牌。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="endIndex">输出参数：提取的琐事令牌在扩展对象的值中的结束位置</param>
            <returns>提取的琐事令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取琐事令牌。
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>提取的琐事令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ExtractTriviaToken(System.Text.StringBuilder,System.Int32,System.Int32@)">
            <summary>
            自定义扩展方法：从扩展对象的值的指定位置提取琐事令牌
            如果提取不到则返回null
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="endIndex">输出参数：提取的琐事令牌在扩展对象的值中的结束位置</param>
            <returns>提取的琐事令牌</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendIf``1(System.Text.StringBuilder,System.Func{``0,System.Boolean},``0[])">
            <summary>
             自定义扩展方法：将泛型数组中的所有元素循环传入委托函数并执行，
             如果函数执行结果为true，则将元素追加到扩展对象结尾
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="predicate">泛型委托函数</param>
            <param name="values">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendLineIf``1(System.Text.StringBuilder,System.Func{``0,System.Boolean},``0[])">
            <summary>
             自定义扩展方法：将泛型数组中的所有元素循环传入委托函数并执行，
             如果函数执行结果为true，则将元素追加到扩展对象结尾(带有换行符号) 
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="predicate">泛型委托函数</param>
            <param name="values">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            自定义扩展方法：使用分隔符将泛型类型集合中的元素串联起来，然后追加到扩展对象结尾
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符</param>
            <param name="values">泛型类型集合</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendJoin``1(System.Text.StringBuilder,System.String,``0[])">
            <summary>
            自定义扩展方法：使用分隔符将泛型类型数组中的元素串联起来，然后追加到扩展对象结尾
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符</param>
            <param name="values">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendLineJoin``1(System.Text.StringBuilder,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            自定义扩展方法：使用分隔符将泛型类型集合中的元素串联起来，然后追加到扩展对象结尾(带有换行符号)
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符</param>
            <param name="values">泛型类型集合</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendLineJoin(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            自定义扩展方法：使用分隔符将泛型类型数组中的元素串联起来，然后追加到扩展对象结尾(带有换行符号)
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象</param>
            <param name="separator">分隔符</param>
            <param name="values">泛型类型数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
             自定义扩展方法：将格式化后的字符串追加到扩展对象结尾(带有换行符号) 
            </summary>
            <param name="this">扩展对象</param>
            <param name="format">格式化字符串</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AppendLineFormat(System.Text.StringBuilder,System.String,System.Collections.Generic.List{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
             自定义扩展方法：将格式化后的字符串追加到扩展对象结尾(带有换行符号) 
            </summary>
            <param name="this">扩展对象</param>
            <param name="format">格式化字符串</param>
            <param name="args">格式化参数</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从起始位置开始获取下一个双引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <returns>下一个双引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Boolean)">
            <summary>
            自定义扩展方法：从起始位置开始获取下一个双引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="allowEscape">是否允许转义</param>
            <returns>下一个双引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从指定位置开始获取下一个双引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>下一个双引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextDoubleQuote(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>
            自定义扩展方法：从指定位置开始获取下一个双引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="allowEscape">是否允许转义</param>
            <returns>下一个双引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder)">
            <summary>
            自定义扩展方法：从起始位置开始获取下一个单引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <returns>下一个单引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Boolean)">
            <summary>
            自定义扩展方法：从起始位置开始获取下一个单引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="allowEscape">是否允许转义</param>
            <returns>下一个单引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从指定位置开始获取下一个单引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <returns>下一个单引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetIndexAfterNextSingleQuote(System.Text.StringBuilder,System.Int32,System.Boolean)">
            <summary>
            自定义扩展方法：从指定位置开始获取下一个单引号之后的索引
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">开始位置</param>
            <param name="allowEscape">是否允许转义</param>
            <returns>下一个单引号后的索引</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Substring(System.Text.StringBuilder,System.Int32)">
            <summary>
            自定义扩展方法：从指定位置开始截取扩展对象实例中的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">起始位置</param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Substring(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从指定位置开始截取扩展对象实例中的字符串中的指定长度的字符串
            </summary>
            <param name="this">扩展对象</param>
            <param name="startIndex">起始位置</param>
            <param name="length"></param>
            <returns>字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Ago(System.TimeSpan)">
            <summary>
             自定义扩展方法： 从当前日期时间减去指定的TimeSpan
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FromNow(System.TimeSpan)">
            <summary>
             自定义扩展方法： 从当前日期时间加上指定的TimeSpan
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ToFullString(System.TimeSpan)">
            <summary>
             自定义扩展方法： 将 TimeSpan 转换为具体的时间描述。例如：2天9小时22分钟17秒56毫秒
            </summary>
            <param name="timeSpan">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UtcAgo(System.TimeSpan)">
            <summary>
             自定义扩展方法： 从当前日期时间(UTC协调世界时间)减去指定的TimeSpan
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UtcFromNow(System.TimeSpan)">
            <summary>
             自定义扩展方法： 从当前日期时间(UTC协调世界时间)加上指定的TimeSpan
            </summary>
            <param name="this">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsBooleanType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Boolean 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsBooleanType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Boolean 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSByteArrayType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为8位有符号整数数组类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSByteArrayType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为8位有符号整数数组类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsByteArrayType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为8位无符号整数数组类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsByteArrayType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为8位无符号整数数组类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSByteType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为8位有符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSByteType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为8位有符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsByteType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为8位无符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsByteType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为8位无符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsCharType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Boolean 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsCharType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Boolean 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateTimeOffsetType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.DateTimeOffset 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateTimeOffsetType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.DateTimeOffset 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateTimeType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 DateTime 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDateTimeType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 DateTime 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDecimalType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Decimal 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDecimalType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Decimal 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDoubleType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Double 双精度浮点类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsDoubleType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Double 双精度浮点类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFloatType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.float 单精度浮点类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsFloatType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.float 单精度浮点类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsGuidType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Guid 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsGuidType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Guid 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt16Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为16位有符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt16Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为16位有符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt16Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为16位无符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt16Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为16位无符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt32Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为32位有符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt32Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为32位有符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt32Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为32位无符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt32Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为32位无符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt64Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为64位有符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsInt64Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为64位有符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt64Type(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为64位无符号整数类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsUInt64Type(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为64位无符号整数类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNumericType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为数值类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsNumericType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为数值类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsObjectType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Object 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsObjectType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Object 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSingleType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.Single (float)单精度浮点数字类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsSingleType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.Single (float)单精度浮点数字类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsStringType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为字符串类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsStringType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为字符串类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsStringClobType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为大文本字符串类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsTimeSpanType(System.Type)">
            <summary>
               自定义扩展方法：判断指定类型是否为 System.TimeSpan 类型
            </summary>
            <param name="type">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.IsTimeSpanType(System.String)">
            <summary>
               自定义扩展方法：判断指定类型名称是否为 System.TimeSpan 类型
            </summary>
            <param name="typeName">扩展对象</param>
            <returns>true 或 false</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <param name="type">扩展对象。要创建的对象的类型</param>
            <param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。
             如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索
            </param>
            <param name="binder"> 使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。
             如果 binder 为 null，则使用默认联编程序
            </param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。
             如果 culture 为 null，则使用当前线程的 System.Globalization.CultureInfo
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
            自定义扩展方法：
            </summary>
            <param name="type">扩展对象。要创建的对象的类型</param>
            <param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。
             如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索
            </param>
            <param name="binder"> 使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。
             如果 binder 为 null，则使用默认联编程序
            </param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。
             如果 culture 为 null，则使用当前线程的 System.Globalization.CultureInfo
            </param>
            <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。
             通常为包含单个 System.Runtime.Remoting.Activation.UrlAttribute 对象的数组
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <param name="type">扩展对象。要创建的对象的类型</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type,System.Object[],System.Object[])">
            <summary>
            自定义扩展方法：
            </summary>使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            <param name="type">扩展对象。要创建的对象的类型</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。
             通常为包含单个 System.Runtime.Remoting.Activation.UrlAttribute 对象的数组
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type)">
            <summary>
            自定义扩展方法：使用指定类型的默认构造函数来创建该类型的实例
            </summary>
            <param name="type">扩展对象。要创建的对象的类型</param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance(System.Type,System.Boolean)">
            <summary>
            自定义扩展方法：使用指定类型的默认构造函数来创建该类型的实例
            </summary>
            <param name="type">扩展对象。要创建的对象的类型</param>
            <param name="nonPublic">如果公共或非公共默认构造函数可以匹配，则为 true；如果只有公共默认构造函数可以匹配，则为 false</param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。
             如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索
            </param>
            <param name="binder"> 使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。
             如果 binder 为 null，则使用默认联编程序
            </param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。
             如果 culture 为 null，则使用当前线程的 System.Globalization.CultureInfo
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <param name="bindingAttr">影响 type 构造函数搜索的零个或多个位标志的组合。
             如果 bindingAttr 为零，则对公共构造函数进行区分大小写的搜索
            </param>
            <param name="binder"> 使用 bindingAttr 和 args 来查找和标识 type 构造函数的对象。
             如果 binder 为 null，则使用默认联编程序
            </param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="culture">区域性特定的信息，这些信息控制将 args 强制转换为 type 构造函数所声明的正式类型。
             如果 culture 为 null，则使用当前线程的 System.Globalization.CultureInfo
            </param>
            <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。
             通常为包含单个 System.Runtime.Remoting.Activation.UrlAttribute 对象的数组
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type,System.Object[],System.Object[])">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <param name="args">与要调用构造函数的参数数量、顺序和类型匹配的参数数组。
             如果 args 为空数组或 null，则调用不带任何参数的构造函数（默认构造函数）
            </param>
            <param name="activationAttributes">包含一个或多个可以参与激活的特性的数组。
             通常为包含单个 System.Runtime.Remoting.Activation.UrlAttribute 对象的数组
            </param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type)">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.CreateInstance``1(System.Type,System.Boolean)">
            <summary>
             自定义扩展方法：使用与指定参数匹配程度最高的构造函数创建指定类型的实例
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。要创建的对象的类型</param>
            <param name="nonPublic">如果公共或非公共默认构造函数可以匹配，则为 true；如果只有公共默认构造函数可以匹配，则为 false</param>
            <returns>对新创建对象的引用</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDBNullDefaultValue(System.Type)">
            <summary>  
            自定义扩展方法：获取值为DBNull的字段默认值（一般多用于从IDataReader转换为实体类等场景）  
            </summary>  
            <param name="dbType">数据类型</param>  
            <returns>返回的默认值</returns>  
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetShortDeclaraction(System.Type)">
            <summary>
             自定义扩展方法：获取.NET类型对应的字符串名称(例如bool类型对应"bool")
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetShortSignature(System.Type)">
            <summary>
             自定义扩展方法：获取.NET类型对应的字符串签名(例如bool类型对应"bool")
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Add(System.UIntPtr,System.Int32)">
            <summary>
            
            </summary>
            <param name="pointer"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Subtract(System.UIntPtr,System.Int32)">
            <summary>
             自定义扩展方法：从无符号指针的值中减去偏移量 
            </summary>
            <param name="pointer">扩展对象。要为其增加偏移量的无符号指针</param>
            <param name="offset">要增加的偏移量</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ZCN.NET.Common.Extensions.CommonExtensions.UriEscapeDataString(System.String)" -->
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetDictionary(Microsoft.AspNetCore.Http.HttpRequest,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            自定义扩展方法：设置 HttpRequest 的请求内容，保存到字段中
            </summary>
            <param name="request">扩展对象</param>
            <param name="dic"></param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.GetDictionary(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            自定义扩展方法：从字典中获取 HttpRequest 请求的内容
            </summary>
            <param name="request">扩展对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusAccepted(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 202(Accepted 已经接受请求，但处理尚未完成)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusClientBrowserDoesNotAcceptMimeType(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 406
             (Not Acceptable 指定的资源已经找到，但它的MIME类型和客户在Accept头中所指定的不兼容，
              客户端浏览器不接受所请求页面的MIME 类型)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusContinue(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 100
             (Continue 初始的请求已经接受，客户应当继续发送请求的其余部分)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusCreated(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 210
             (Created 服务器已经创建了文档，Location头给出了它的URL)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusInternalServerError(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 500
             (Internal Server Error 服务器遇到了意料不到的情况，不能完成客户的请求)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusInvalidHeaderValueConfiguration(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 501
             (Not Implemented 服务器不支持实现请求所需要的功能，页眉值指定了未实现的配置。例如，客户发出了一个服务器不支持的PUT请求)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusInvalidResponseWhileGatewayOrProxy(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 502
             (Bad Gateway 服务器作为网关或者代理时，为了完成请求访问下一个服务器，但该服务器返回了非法的应答。 
              或者说Web 服务器用作网关或代理服务器时收到了无效响应)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusMethodNotAllowed(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 405
             (Method Not Allowed 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用，
              用来访问本页面的 HTTP 谓词不被允许（方法不被允许）)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusMovedPermanently(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 405
             (Method Not Allowed 请求方法（GET、POST、HEAD、DELETE、PUT、TRACE等）对指定的资源不适用，
              用来访问本页面的 HTTP 谓词不被允许（方法不被允许）)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusNoContent(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 204
             (No Content 没有新文档，浏览器应该继续显示原来的文档。如果用户定期地刷新页面，
              而Servlet可以确定用户文档足够新，这个状态代码是很有用的)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusNonAuthoritativeInformation(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 203
             (Non-Authoritative Information 文档已经正常地返回，但一些应答头可能不正确，
             因为使用的是文档的拷贝，非权威性信息)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusNotFound(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 404
             (Not Found 无法找到指定位置的资源)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusNotModified(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 304
             (Not Modified 客户端有缓冲的文档并发出了一个条件性的请求（一般是提供If-Modified-Since头表示客户只想比指定日期更新的文档）。
              服务器告诉客户，原来缓冲的文档还可以继续使用)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusObjectMoved(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 302
             (Object moved.)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusPartialContent(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 206
             (Partial Content 客户发送了一个带有Range头的GET请求（分块请求），服务器完成了它)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusPreconditionFailed(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 412
             (Precondition Failed 请求头中指定的一些前提条件失败)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusRequestTimedOut(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 408
             (Request Timeout 在服务器许可的等待时间内，客户一直没有发出任何请求。客户可以在以后重复同一请求)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusResetContent(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 205
             (Reset Content 没有新的内容，但浏览器应该重置它所显示的内容。用来强制浏览器清除表单输入内容)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusServiceUnavailable(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 503
             (Service Unavailable 服务不可用，服务器由于维护或者负载过重未能应答。
             例如，Servlet可能在数据库连接池已满的情况下返回503。服务器返回503时可以提供一个 Retry-After头。这个错误代码为 IIS 6.0 所专用)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusSwitchingProtocols(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 101
             (Switching Protocols 服务器将遵从客户的请求转换到另外一种协议)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.SetStatusTemporaryRedirect(Microsoft.AspNetCore.Http.HttpResponse)">
            <summary>
             自定义扩展方法：设置 ASP.NET 操作的返回给客户端的输出的 HTTP 状态代码 307
             (Temporary Redirect 和302（Found）相同。许多浏览器会错误地响应302应答进行重定向，即使原来的请求是POST，
              即使它实际上只能在POST/请求的应答是303时 才能重定向。
              由于这个原因，HTTP 1.1新增了307，以便更加清除地区分几个状态代码：当出现303应答时，
              浏览器可以跟随重定向的GET和POST请求；如果是307应答，则浏览器只 能跟随对GET请求的重定向)
            </summary>
            <param name="this">扩展对象。ASP.NET 操作的 HTTP 响应信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecode(System.Byte[],System.Text.Encoding)">
            <summary>
            自定义扩展方法：使用指定的解码对象将 URL 编码的字节数组转换为已解码的字符串
            </summary>
            <param name="bytes">要解码的字节数组</param>
            <param name="e">指定解码方法的 System.Text.Encoding</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecode(System.Byte[],System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            自定义扩展方法：使用指定的编码对象，从数组中的指定位置开始到指定的字节数为止，将 URL 编码的字节数组转换为已解码的字符串
            </summary>
            <param name="bytes">要解码的字节数组</param>
            <param name="offset">字节中开始解码的位置</param>
            <param name="count">要解码的字节数</param>
            <param name="e">指定解码方法的 System.Text.Encoding 对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecodeToBytes(System.Byte[])">
            <summary>
             自定义扩展方法：将 URL 编码的字节数组转换为已解码的字节数组
            </summary>
            <param name="bytes">要解码的字节数组</param>
            <returns>一个已解码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：从数组中的指定位置开始一直到指定的字节数为止，将 URL 编码的字节数组转换为已解码的字节数组
            </summary>
            <param name="bytes">要解码的字节数组</param>
            <param name="offset">字节数组中开始解码的位置</param>
            <param name="count">要解码的字节数</param>
            <returns>一个已解码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncode(System.Byte[])">
            <summary>
            自定义扩展方法：将字节数组转换为编码的 URL 字符串
            </summary>
            <param name="bytes">要编码的字节数组</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncode(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义扩展方法： 从数组的指定位置开始到指定的字节数为止，将字节数组转换为 URL 编码的字符串
            </summary>
            <param name="bytes">要编码的字节数组</param>
            <param name="offset">字节数组中开始编码的位置</param>
            <param name="count">要编码的字节数</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncodeToBytes(System.Byte[])">
            <summary>
            自定义扩展方法：将字节数组转换为 URL 编码的字节数组
            </summary>
            <param name="bytes">要编码的字节数组</param>
            <returns>一个已编码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncodeToBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从数组中的指定位置开始一直到指定的字节数为止，将字节数组转换为 URL 编码的字节数组
            </summary>
            <param name="bytes">要编码的字节数组</param>
            <param name="offset">字节数组中开始编码的位置</param>
            <param name="count">要编码的字节数</param>
            <returns>一个已编码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlAttributeEncode(System.String)">
            <summary>
              自定义扩展方法：将字符串最小限度地转换为 HTML 编码的字符串
            </summary>
            <param name="s">扩展对象，要编码的字符串</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlAttributeEncode(System.String,System.IO.TextWriter)">
            <summary>
              自定义扩展方法：将字符串最小限度地转换为 HTML 编码的字符串，并将已编码的字符串发送给 System.IO.TextWriter 输出流
            </summary>
            <param name="s">扩展对象，要编码的字符串</param>
            <param name="output">System.IO.TextWriter 输出流</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlDecode(System.String)">
            <summary>
             自定义扩展方法：将已经过 HTML 编码的字符串转换为已解码的字符串并将其发送给 System.IO.TextWriter 输出流
            </summary>
            <param name="s">要解码的字符串</param>
            <returns>一个已解码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlDecode(System.String,System.IO.TextWriter)">
            <summary>
            自定义扩展方法：将已经过 HTML 编码的字符串转换为已解码的字符串并将其发送给 System.IO.TextWriter 输出流output
            </summary>
            <param name="s">要解码的字符串</param>
            <param name="output">System.IO.TextWriter 输出流</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlEncode(System.String)">
            <summary>
            自定义扩展方法：将字符串转换为 HTML 编码的字符串
            </summary>
            <param name="s">要编码的字符串</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.HtmlEncode(System.String,System.IO.TextWriter)">
            <summary>
            自定义扩展方法：将字符串转换为 HTML 编码的字符串并将输出作为 System.IO.TextWriter 输出流返回
            </summary>
            <param name="s">要编码的字符串</param>
            <param name="output">System.IO.TextWriter 输出流</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.JavaScriptStringEncode(System.String)">
            <summary>
            自定义扩展方法：对字符串进行编码
            </summary>
            <param name="value">扩展对象</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.JavaScriptStringEncode(System.String,System.Boolean)">
            <summary>
            自定义扩展方法：对字符串进行编码
            </summary>
            <param name="value">扩展对象</param>
            <param name="addDoubleQuotes">是否用双引号括住编码的字符串</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ParseQueryString(System.String)">
            <summary>
            自定义扩展方法：使用指定的 System.Text.Encoding 将查询字符串分析成一个 System.Collections.Specialized.NameValueCollection
            </summary>
            <param name="query">要分析的查询字符串</param>
            <returns>查询参数和值的 System.Collections.Specialized.NameValueCollection</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ParseQueryString(System.String,System.Text.Encoding)">
            <summary>
            自定义扩展方法：使用指定的 System.Text.Encoding 将查询字符串分析成一个 System.Collections.Specialized.NameValueCollection
            </summary>
            <param name="query">要分析的查询字符串</param>
            <param name="encoding">要使用的 System.Text.Encoding</param>
            <returns>查询参数和值的 System.Collections.Specialized.NameValueCollection</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecode(System.String)">
            <summary>
            自定义扩展方法：将已经为在 URL 中传输而编码的字符串转换为解码的字符串
            </summary>
            <param name="str">要解码的字符串</param>
            <returns>一个已解码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            自定义扩展方法：将已经为在 URL 中传输而编码的字符串转换为解码的字符串
            </summary>
            <param name="str">要解码的字符串</param>
            <param name="e">指定解码方法的 System.Text.Encoding</param>
            <returns>一个已解码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecodeToBytes(System.String)">
            <summary>
             自定义扩展方法：使用指定的解码对象将 URL 编码的字符串转换为已解码的字节数组
            </summary>
            <param name="str">要解码的字符串</param>
            <returns>一个已解码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlDecodeToBytes(System.String,System.Text.Encoding)">
            <summary>
             自定义扩展方法：使用指定的解码对象将 URL 编码的字符串转换为已解码的字节数组
            </summary>
            <param name="str">要解码的字符串</param>
            <param name="e">指定解码方法的 System.Text.Encoding 对象</param>
            <returns>一个已解码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncode(System.String)">
            <summary>
             自定义扩展方法：使用指定的编码对象对 URL 字符串进行编码
            </summary>
            <param name="str">要编码的文本</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
             自定义扩展方法：使用指定的编码对象对 URL 字符串进行编码
            </summary>
            <param name="str">要编码的文本</param>
            <param name="e">指定编码方案的 System.Text.Encoding 对象</param>
            <returns>一个已编码的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncodeToBytes(System.String)">
            <summary>
            自定义扩展方法：使用指定的编码对象将字符串转换为 URL 编码的字节数组
            </summary>
            <param name="str">要编码的文本</param>
            <returns>一个已编码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlEncodeToBytes(System.String,System.Text.Encoding)">
            <summary>
            自定义扩展方法：使用指定的编码对象将字符串转换为 URL 编码的字节数组
            </summary>
            <param name="str">要编码的文本</param>
            <param name="e">指定编码方案的 System.Text.Encoding 对象</param>
            <returns>一个已编码的字节数组</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.UrlPathEncode(System.String)">
            <summary>
            自定义扩展方法：对 URL 字符串的路径部分进行编码，以进行从 Web 服务器到客户端的可靠的 HTTP 传输
            </summary>
            <param name="str">要进行 URL 编码的文本</param>
            <returns> URL 编码的文本</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.AsReadOnly``1(``0[])">
            <summary>
            自定义扩展方法：返回指定数组的只读包装
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Exists``1(``0[],System.Predicate{``0})">
            <summary>
             自定义扩展方法：确定指定数组包含的元素是否与指定谓词定义的条件匹配
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Find``1(``0[],System.Predicate{``0})">
            <summary>
             自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回整个 System.Array 中的第一个匹配项。
             如果找到与指定谓词定义的条件匹配的第一个元素，则为该元素；否则为类型 T 的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindAll``1(``0[],System.Predicate{``0})">
            <summary>
            自定义扩展方法：检索与指定谓词定义的条件匹配的所有元素。
            如果找到一个其中所有元素均与指定谓词定义的条件匹配的 System.Array，则为该数组；否则为一个空 System.Array
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindIndex``1(``0[],System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回整个 System.Array 中第一个匹配项的从零开始的索引。
            
            如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回 System.Array 中从指定索引到最后一个元素的元素范围内
            第一个匹配项的从零开始的索引。
            
            如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回 System.Array 中从指定索引开始并包含指定元素个数的元素范围内
            第一个匹配项的从零开始的索引。
            
            如果找到与 match 定义的条件相匹配的第一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindLast``1(``0[],System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回整个 System.Array 中的最后一个匹配项。
            
            如果找到与指定谓词定义的条件匹配的最后一个元素，则为该元素；否则为类型 T 的默认值
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindLastIndex``1(``0[],System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回整个 System.Array 中最后一个匹配项的从零开始的索引。
            如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回 System.Array 中从指定索引到最后一个元素的元素范围内
            最后一个匹配项的从零开始的索引。
            如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})">
            <summary>
            自定义扩展方法：搜索与指定谓词定义的条件匹配的元素，然后返回 System.Array 中从指定索引开始并包含指定元素个数的元素范围内
            最后一个匹配项的从零开始的索引。
            如果找到与 match 定义的条件相匹配的最后一个元素，则为该元素的从零开始的索引；否则为 -1
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="startIndex">从零开始的搜索的起始索引</param>
            <param name="count">要搜索的部分中的元素数</param>
            <param name="match">定义要搜索的元素的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.ForEach``1(``0[],System.Action{``0})">
            <summary>
            自定义扩展方法：对指定数组的每个元素执行指定操作
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="action">要对 array 的每个元素执行的方法</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.TrueForAll``1(``0[],System.Predicate{``0})">
            <summary>
            自定义扩展方法：确定数组中的每个元素是否都与指定谓词定义的条件匹配。
            
            如果 array 中的每个元素都与指定谓词定义的条件匹配，则为 true；否则为 false。
            如果数组中没有元素，则返回值为 true
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="match">定义检查元素时要对照的条件</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CommonExtensions.Sub``1(``0[],System.Int32,System.Int32)">
            <summary>
            自定义扩展方法：从数组start开始到指定长度复制一份
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="array">扩展对象。从零开始的一维数组</param>
            <param name="start">数组的起始位置</param>
            <param name="count">指定长度</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.Extensions">
            <summary>
            自定义扩展类
            </summary>
            <summary>
            自定义扩展类
            </summary>
            <summary>
            自定义扩展类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.Extensions.ToByte(System.SByte)">
            <summary>
            自定义扩展方法：将指定 8 位有符号整数的值转换为等效的 8 位无符号整数。
            如果参数小于0，则返回 default(byte)值
            </summary>
            <param name="value">要转换的 8 位有符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位无符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.Extensions.ToSByte(System.Byte)">
            <summary>
            自定义扩展方法：将指定的 8 位无符号整数的值转换为等效的 8 位有符号整数。
            如果参数大于 SByte.MaxValue，则返回 default(sbyte)值
            </summary>
            <param name="value">要转换的 8 位无符号整数。</param>
            <returns>一个与 <paramref name="value" /> 等效的 8 位带符号整数。</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.Extensions.ClearAll``1(``0[])">
            <summary>
             自定义扩展方法：将 System.Array 中的一系列元素设置为零、false 或 null，具体取决于元素类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。从零开始的一维数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.Extensions.ClearAt``1(``0[],System.Int32,System.Int32)">
            <summary>
             自定义扩展方法：从指定索引处开始指定数量的元素设置为零、false 或 null，具体取决于元素类型
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。从零开始的一维数组</param>
            <param name="index">要清除的一系列元素的起始索引</param>
            <param name="length">要清除的元素数</param>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.Extensions.ToDataTable``1(``0[])">
            <summary>
             自定义扩展方法：将一维数组转换为 DataTable
            </summary>
            <typeparam name="T">泛型类型参数</typeparam>
            <param name="this">扩展对象。从零开始的一维数组</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.ObjectShredder`1.Shred(System.Collections.Generic.IEnumerable{`0},System.Data.DataTable,System.Nullable{System.Data.LoadOption})">
            <summary>
            从一系列对象加载数据表
            </summary>
            <param name="source">要加载到DataTable中的对象序列</param>
            <param name="table">输入表。表的架构必须与类型T匹配。如果表为null，则将使用从T类型的公共属性和字段创建的架构创建新表。</param>
            <param name="options">指定如何将源序列中的值应用于表中的现有行</param>
            <returns>从源序列创建的数据表</returns>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.SortableBindingList`1">
            <summary>
                自定义类，继承BindingList(默认BindingList不支持排序),
                使集合支持排序功能，提供支持数据绑定的泛型集合
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.SortableBindingList`1.#ctor">
            <summary>
                空构造函数
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.SortableBindingList`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
                构造函数
            </summary>
            <param name="list"></param>
        </member>
        <member name="P:ZCN.NET.Common.Extensions.SortableBindingList`1.DefaultSortItem">
            <summary>
                获取或设置默认排序项
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.SortableBindingList`1.Sort">
            <summary>
                排序
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.SortableBindingList`1.CompareCore(`0,`0)">
            <summary>
                比较2个泛型对象
            </summary>
            <param name="o1">泛型对象1</param>
            <param name="o2">泛型对象2</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.SortableBindingList`1.CompareValue(System.Object,System.Object,System.Type)">
            <summary>
                对比2个值
            </summary>
            <param name="o1">值1</param>
            <param name="o2">值2</param>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.UnixTimestampUtils">
            <summary>
             时间戳与日期时间转换
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.UnixTimestampUtils.BaseDateTime">
            <summary>
            基准时间
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.UnixTimestampUtils.TICK_BASE">
            <summary>
            时间戳末尾7位(补0或截断)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.UnixTimestampUtils.GetUnixTimestamp(System.Int64)">
            <summary>
            自定义扩展方法：从现在(调用此函数时刻)起若干秒以后那个时间点的时间戳
            </summary>
            <param name="secondsAfterNow">从现在起多少秒以后</param>
            <returns>Unix时间戳</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.UnixTimestampUtils.ConvertToTimestamp(System.DateTime)">
            <summary>
            自定义扩展方法：日期时间转换为时间戳
            </summary>
            <param name="dt">日期时间</param>
            <returns>时间戳</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.UnixTimestampUtils.ConvertToDateTime(System.String)">
            <summary>
            自定义扩展方法：从时间戳转换为DateTime
            </summary>
            <param name="timestamp">时间戳字符串</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.UnixTimestampUtils.ConvertToDateTime(System.Int64)">
            <summary>
            自定义扩展方法：从时间戳转换为DateTime
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>日期时间</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.UnixTimestampUtils.IsContextExpired(System.Int64)">
            <summary>
            自定义扩展方法：检查Ctx是否过期，给当前时间加上一天来看看是否超过了过期时间
            而不是直接比较是否超过了过期时间，是给这个文件最大1天的上传持续时间
            </summary>
            <param name="expiredAt"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:ZCN.NET.Common.Extensions.TransExpressionConvert`2" -->
        <member name="M:ZCN.NET.Common.Extensions.TransExpressionConvert`2.Trans(`0)">
            <summary>
              将 Tin 输入对象转换为 TOut 对象
            </summary>
            <param name="tIn">被转换(拷贝)的对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.CCalendar">
            <summary>
             常用显示日期时间、农历、生肖的日历类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.CCalendarDateFile">
            <summary>
            自定义的CCalendarDate.XML的限定名称，命名空间修改，必须也跟着修改，
            右键查看CCalendarData.xml文件的属性可以看到它的命名空间。
            必须设置为嵌入的资源
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.CCalendar.StructDate">
            <summary>
            结构。日期对象
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo">
            <summary>
            结构。完整的日期对象
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Year">
            <summary>
            公历年
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Month">
            <summary>
            公历月
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Day">
            <summary>
            公历日
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.IsLeap">
            <summary>
            是否闰月
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CYear">
            <summary>
            农历年
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.ScYear">
            <summary>
            农历年名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CYearCyl">
            <summary>
            干支
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CMonth">
            <summary>
            农历月
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.ScMonth">
            <summary>
            农历月名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CMonthCyl">
            <summary>
            干支月
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CDay">
            <summary>
            农历日
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.ScDay">
            <summary>
            农历日名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.CDayCyl">
            <summary>
            干支日
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Solarterm">
            <summary>
            节气
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.DayInWeek">
            <summary>
            星期几
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Feast">
            <summary>
            节日
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Info">
            <summary>
            系统问候语
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.Image">
            <summary>
            主题图片
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.FullInfo">
            <summary>
            完整的日期信息
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Extensions.CCalendar.StructDateFullInfo.SayHello">
            <summary>
            有特别的问候语吗
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CCalendar.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CCalendar.GetDateInfo(System.DateTime)">
            <summary>
            获取日期信息
            </summary>
            <param name="dt">待检查的日子。默认为 DateTime.Now</param>
            <returns>日期信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CCalendar.GetDateTidyInfo(System.DateTime)">
            <summary>
            得到精简日期信息（不含节日）
            </summary>
            <param name="d">待检查的日子</param>
            <returns>日期信息</returns>
        </member>
        <member name="M:ZCN.NET.Common.Extensions.CCalendar.ReadFileFromEmbedded(System.String)">
            <summary>
            从嵌入资源中读取文件内容(e.g: xml).
            </summary>
            <param name="fileWholeName">嵌入资源文件名，包括项目的命名空间以及文件的存储路径</param>
            <returns>资源中的文件内容.</returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpContentType">
            <summary>
            HTTP 内容类型(Content-Type)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.TEXT_PLAIN">
            <summary>
            资源类型：普通文本
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.APPLICATION_JSON">
            <summary>
            资源类型：JSON字符串
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.APPLICATION_JSON_UTF8">
            <summary>
            资源类型：JSON字符串。使用 utf-8 编码
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.APPLICATION_OCTET_STREAM">
            <summary>
            资源类型：未知类型(数据流)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.WWW_FORM_URLENCODED">
            <summary>
            资源类型：表单数据(键值对)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.WWW_FORM_URLENCODED_GB2312">
            <summary>
            资源类型：表单数据(键值对)。编码方式为 gb2312
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.WWW_FORM_URLENCODED_UTF8">
            <summary>
            资源类型：表单数据(键值对)。编码方式为 utf-8
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpContentType.MULTIPART_FORM_DATA">
            <summary>
            资源类型：多分部数据
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpHeaders">
            <summary>
             HTTP Headers 集合
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpManager">
            <summary>
             基于 HttpWebRequest 与 HttpWebResponse 类封装的 HTTP 请求与响应辅助类（上传或下载普通文本、数据流、文件等）
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpManager.CookieContainer">
            <summary>
             获取或设置CookieContainer的值
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpManager.HeaderCollection">
            <summary>
             获取或设置与请求或响应关联的协议标头
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpManager.EncodingType">
            <summary>
             获取或设置解析网页源码时使用的编码，默认
            </summary>
            <value></value>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpManager.ReadMode">
            <summary>
             获取或设置读取响应内容的方式。默认为 ResponseReadMode.Stream
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.#ctor(System.Boolean)">
            <summary>
            初始化
            </summary>
            <param name="allowAutoRedirect">是否允许HttpWebRequest的“重定向”，默认禁止</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.#ctor(System.Net.CookieContainer,System.Boolean)">
            <summary>
            使用 CookieContainer 对象来初始化该类的一个实例
            </summary>
            <param name="cookieContainer">指定CookieContainer的值</param>
            <param name="allowAutoRedirect">是否允许HttpWebRequest的“重定向”，默认禁止</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.#ctor(System.Net.WebHeaderCollection,System.Boolean)">
            <summary>
            使用 WebHeaderCollection 协议标头对象来初始化该类的一个实例
            </summary>
            <param name="headerCollection">与请求或响应关联的协议标头</param>
            <param name="allowAutoRedirect">是否允许HttpWebRequest的“重定向”，默认禁止</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.#ctor(System.Net.CookieContainer,System.Net.WebHeaderCollection,System.Boolean)">
            <summary>
            使用 CookieContainer 对象与WebHeaderCollection 协议标头对象来初始化该类的一个实例
            </summary>
            <param name="cookieContainer">指定CookieContainer的值</param>
            <param name="headerCollection">与请求或响应关联的协议标头</param>
            <param name="allowAutoRedirect">是否允许HttpWebRequest的“重定向”，默认禁止</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.RequestString(System.String,System.String,System.String,System.String)">
            <summary>
             HTTP请求(包含文本的body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.RequestData(System.String,System.Byte[],System.String,System.String)">
            <summary>
             将数据缓冲区(一般是指文件流或内存流对应的字节数组)上载到由 URI 标识的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)。如果没有请传递null</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 ContentType 类的常量来获取。默认为 application/octet-stream</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Get(System.String)">
            <summary>
            HTTP-GET方法，(不包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <returns>HTTP-GET的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Post(System.String)">
            <summary>
            HTTP-POST方法，(不包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Put(System.String)">
            <summary>
            HTTP-PUT方法，(不包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Delete(System.String)">
            <summary>
            HTTP-DELETE方法，(不包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Get(System.String,System.String,System.String)">
            <summary>
            HTTP-GET方法，(包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取</param>
            <returns>HTTP-GET的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Post(System.String,System.String,System.String)">
            <summary>
            HTTP-POST方法，(包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Put(System.String,System.String,System.String)">
            <summary>
            HTTP-PUT方法，(包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.Delete(System.String,System.String,System.String)">
            <summary>
            HTTP-DELETE方法，(包含body数据)。
            发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadString(System.String,System.String,System.String,System.String)">
            <summary>
             将普通文本或者JSON文本上载到具有指定的 URI 的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本或者JSON文本)。如果参数中有中文，请使用合适的编码方式进行编码，例如：gb2312或者utf-8</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取。默认为 application/octet-stream</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFile(System.String,System.String,System.String,System.String)">
            <summary>
             将指定的本地文件上载到具有指定的 URI 的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="fileFullName">待上传的文件(包含全路径的完全限定名)</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取。默认为 application/octet-stream</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadStream(System.String,System.IO.Stream,System.String,System.String)">
            <summary>
             将指定的数据流对象(一般指文件流或内存流)上载到具有指定的 URI 的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="stream">一般指文件流或内存流</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取。默认为 application/octet-stream</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadData(System.String,System.Byte[],System.String,System.String)">
            <summary>
             将数据缓冲区(一般是指文件流或内存流对应的字节数组)上载到由 URI 标识的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)。如果没有请传递null</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="contentType"><see langword="Content-type" /> HTTP 标头的值。请使用 HttpContentType 类的常量来获取。默认为 application/octet-stream</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadForm(System.String,System.String,System.String)">
            <summary>
             HTTP请求(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(普通文本)</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadForm(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            HTTP请求(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kvDatas">请求时表单键值对数据</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadForm(System.String,System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
             HTTP请求(包含表单数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kvDatas">请求时表单键值对数据</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadForm(System.String,System.Byte[],System.String)">
            <summary>
             HTTP请求(包含表单数据)。将数据缓冲区上载到由 URI 标识的资源。(包含body数据)
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据(字节数据)</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <returns>HTTP-POST的响应结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.Byte[],System.String)">
            <summary>
             HTTP请求方法(包含多分部数据,multipart/form-data)
             将数据缓冲区内的内容以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="data">主体数据</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            HTTP请求(包含多分部数据,multipart/form-data)。
            将多个参数以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kVDatas">【必填】请求时表单键值对数据。</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="timeOut">获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和
                                  <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                                  -1 表示永不超时
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            HTTP请求(包含多分部数据,multipart/form-data)。
            将多个参数以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="kVDatas">【必填】请求时表单键值对数据。</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="timeOut">获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和
                                  <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                                  -1 表示永不超时
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            HTTP请求(包含多分部数据,multipart/form-data)。
            将文件以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="fileFullName">待上传的文件(包含全路径的完全限定名)</param>
            <param name="kVDatas">请求时表单键值对数据。</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="timeOut">获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和
                                  <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                                  -1 表示永不超时
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.String,System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            HTTP请求(包含多分部数据,multipart/form-data)。
            将文件以及多个参数以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="fileFullName">待上传的文件(包含全路径的完全限定名)</param>
            <param name="kVDatas">请求时表单键值对数据。</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="timeOut">获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和
                                  <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                                  -1 表示永不超时
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.UploadFormByMultipart(System.String,System.String[],System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            HTTP请求(包含多分部数据,multipart/form-data)。
            将多个文件以及多个参数以多分部数据表单方式上传到指定url的服务器
            </summary>
            <param name="url">请求目标URL</param>
            <param name="fileFullNames">待上传的文件列表(包含全路径的完全限定名)。如果某个文件不存在，则忽略不上传</param>
            <param name="kVDatas">请求时表单键值对数据。</param>
            <param name="method">请求的方法。请使用 HttpMethod 的枚举值</param>
            <param name="timeOut">获取或设置 <see cref="M:System.Net.HttpWebRequest.GetResponse" /> 和
                                  <see cref="M:System.Net.HttpWebRequest.GetRequestStream" /> 方法的超时值（以毫秒为单位）。
                                  -1 表示永不超时
            </param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetHeaders(ZCN.NET.Common.Http.HttpResult@,System.Net.HttpWebResponse)">
            <summary>
             获取返回信息头
            </summary>
            <param name="httpResult">即将被HTTP请求封装函数返回的HttpResult变量</param>
            <param name="httpWebResponse">正在被读取的HTTP响应</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetResponse(ZCN.NET.Common.Http.HttpResult@,System.Net.HttpWebResponse)">
            <summary>
            获取HTTP的响应信息
            </summary>
            <param name="httpResult">即将被HTTP请求封装函数返回的HttpResult变量</param>
            <param name="httpWebResponse">正在被读取的HTTP响应</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetWebExceptionResponse(ZCN.NET.Common.Http.HttpResult@,System.Net.WebException)">
            <summary>
            获取HTTP访问网络期间发生错误时引发的异常响应信息
            </summary>
            <param name="httpResult">即将被HTTP请求封装函数返回的HttpResult变量</param>
            <param name="webException">访问网络期间发生错误时引发的异常对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetExceptionResponse(ZCN.NET.Common.Http.HttpResult@,System.Exception,System.String,System.String)">
            <summary>
            获取HTTP的异常响应信息
            </summary>
            <param name="httpResult">即将被HTTP请求封装函数返回的HttpResult变量</param>
            <param name="ex">异常对象</param>
            <param name="method">HTTP请求的方式</param>
            <param name="contentType">HTTP的标头类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetUserAgent">
            <summary>
            获取客户端标识(UserAgent)，示例："SpecifiedClient/1.1 (Universal)"
            </summary>
            <returns>客户端标识UA</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.SetUserAgent(System.String)">
            <summary>
            设置自定义的客户端标识(UserAgent)，示例："SpecifiedClient/1.1 (Universal)"
            如果设置为空白或者不设置，SDK会自动使用默认的UserAgent
            </summary>
            <param name="userAgent">用户自定义的UserAgent</param>
            <returns>客户端标识UA</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.CreateFormDataBoundary">
            <summary>
            创建多部分表单数据(multi-part form-data)的分界(boundary)标识
            </summary>
            <returns>分界(boundary)标识字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpManager.GetParameter(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
             获取POST请求附带的参数
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpMethod">
            <summary>
             Http请求的方法
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.OPTIONS">
            <summary>
             返回服务器支持的 HTTP 请求方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.GET">
            <summary>
             向服务器获取指定资源。参数放在URL后面。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.HEAD">
            <summary>
             与 GET 相同，但只返回 HTTP 报头，不返回文档主体。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.POST">
            <summary>
             向服务器提交数据，数据放在请求体里。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.PUT">
            <summary>
             上传指定的 URI 表示。与POST相似，只是具有幂等特性，一般用于更新。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.DELETE">
            <summary>
             删除服务器上的指定资源。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.TRACE">
            <summary>
             回显服务器端收到的请求，测试的时候会用到这个。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpMethod.CONNECT">
            <summary>
             把请求连接转换到透明的 TCP/IP 通道。
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpRequestUtils">
            <summary>
             基于 HttpWebRequest 与 HttpWebResponse 技术封装的 HTTP 请求与响应辅助类（获取网页数据）
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.ContentType">
            <summary>
             内容类型，默认为"application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.Accept">
            <summary>
             Accept值，默认支持各种类型
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.UserAgent">
            <summary>
             UserAgent，默认支持Mozilla/MSIE等
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.CookieContainer">
            <summary>
             Cookie容器
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.Encoding">
            <summary>
             获取网页源码时使用的编码
            </summary>
            <value></value>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.NetworkDelay">
            <summary>
             网络延时
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpRequestUtils.MaxTry">
            <summary>
             最大尝试次数
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.#ctor">
            <summary>
             默认构造函数
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.#ctor(System.Net.CookieContainer)">
            <summary>
             使用指定CookieContainer的值来初始化该类的实例
            </summary>
            <param name="cookieContainer">指定CookieContainer的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.#ctor(System.String,System.String,System.String)">
            <summary>
             使用内容类型、Accept类型、UserAgent内容来初始化该类的实例
            </summary>
            <param name="contentType">内容类型</param>
            <param name="accept">Accept类型</param>
            <param name="userAgent">UserAgent内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.#ctor(System.Net.CookieContainer,System.String,System.String,System.String)">
            <summary>
             使用指定CookieContainer的值、内容类型、Accept类型、UserAgent内容来初始化该类的实例
            </summary>
            <param name="cookieContainer">指定CookieContainer的值</param>
            <param name="contentType">内容类型</param>
            <param name="accept">Accept类型</param>
            <param name="userAgent">UserAgent内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetBrowserInfo">
            <summary>
             获取浏览器的信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String)">
            <summary>
             以 GET 方式发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.String)">
            <summary>
             以 GET 方式发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="reference">页面引用</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.String,System.Boolean)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.Net.WebHeaderCollection,System.String,System.Boolean)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="headerCollection">请求的头部信息</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.Net.CookieContainer,System.String)">
            <summary>
             以 GET 方式发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="cookieContainer">Cookie集合</param>
            <param name="reference">页面引用</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.Net.CookieContainer,System.String,System.Boolean)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="cookieContainer">Cookie集合</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHtml(System.String,System.Net.CookieContainer,System.String,System.Boolean,System.String,System.Net.WebHeaderCollection)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(HTML代码)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="cookieContainer">Cookie集合对象</param>
            <param name="postData">回发的数据</param>
            <param name="isPost">是否以post方式发送请求</param>
            <param name="referer">页面引用</param>
            <param name="headerCollection">请求的头部信息</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetStream(System.String,System.String@,System.Net.CookieContainer)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(指定页面的 Stream 对象)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="fileName">文件名称</param>
            <param name="cookieContainer">Cookie集合对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetStream(System.String,System.String@,System.Net.CookieContainer,System.String)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(指定页面的 Stream 对象)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="fileName"></param>
            <param name="cookieContainer">Cookie对象</param>
            <param name="reference">页面引用</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetStream(System.String,System.String@,System.Net.CookieContainer,System.String,System.Boolean)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(指定页面的 Stream 对象)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="fileName"></param>
            <param name="cookieContainer">Cookie对象</param>
            <param name="postData">请求参数(json格式)</param>
            <param name="isPost">是否以Post方式提交</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetStream(System.String,System.String@,System.Net.CookieContainer,System.String,System.Boolean,System.String,System.Net.WebHeaderCollection)">
            <summary>
             发送 HTTP 请求并返回来自 Internet 资源的响应(指定页面的 Stream 对象)
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="fileName"></param>
            <param name="cookieContainer">Cookie对象</param>
            <param name="postData">请求参数(json格式)</param>
            <param name="isPost">是否以Post方式提交</param>
            <param name="reference">页面引用</param>
            <param name="headerCollection">请求的头部信息</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.PostStream(System.String,System.String[],System.Collections.Specialized.NameValueCollection,System.Net.CookieContainer,System.String,System.Net.WebHeaderCollection)">
            <summary>
             提交文件流到服务地址
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="files">提交的文件列表</param>
            <param name="nvc">其他内容（名称-值键值）</param>
            <param name="cookieContainer">Cookie对象</param>
            <param name="reference">页面引用</param>
            <param name="headerCollection">发送请求的头内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.PostStream2(System.String,System.String[],System.Collections.Specialized.NameValueCollection,System.Net.CookieContainer,System.String,System.Net.WebHeaderCollection)">
            <summary>
             提交文件流到服务地址
            </summary>
            <param name="url">指定页面的路径</param>
            <param name="files">提交的文件列表</param>
            <param name="nvc">其他内容（名称-值键值）</param>
            <param name="cookieContainer">Cookie对象</param>
            <param name="reference">页面引用</param>
            <param name="headerCollection">发送请求的头内容</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetCookieCollection(System.String)">
            <summary>
            根据Cookie字符串获取Cookie的集合
            </summary>
            <param name="cookieString">Cookie字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetHiddenKeyValue(System.String,System.String)">
            <summary>
             获取HTML页面内容指定隐藏域Key的Value内容
            </summary>
            <param name="html">待操作的HTML页面内容</param>
            <param name="key">隐藏域的名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetEncoding(System.String)">
            <summary>
             发送 HTTP 请求并返回网页的编码格式
            </summary>
            <param name="url">网页地址</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetUrlError(System.String)">
            <summary>
             判断URL是否有效
            </summary>
            <param name="url">待判断的URL，可以是网页以及图片链接等</param>
            <returns>200为正确，其余为大致网页错误代码</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.RemoveHtml(System.String)">
            <summary>
            移除Html标记
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.HtmlEncode(System.String)">
            <summary>
             返回 HTML 字符串的编码结果
            </summary>
            <param name="inputData">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.HtmlDecode(System.String)">
            <summary>
             返回 HTML 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.Download(System.String,System.IO.Stream)">
            <summary>
             从Url下载
            </summary>
            <param name="url"></param>
            <param name="stream"></param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.Download(System.String,System.String,System.Int32)">
            <summary>
            从Url下载，并保存到指定目录
            </summary>
            <param name="url">需要下载文件的Url</param>
            <param name="filePathName">保存文件的路径，如果下载文件包含文件名，按照文件名储存，否则将分配Ticks随机文件名</param>
            <param name="timeOut">超时时间</param>
            <returns>返回文件的全路径</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils.GetRandomFileName">
            <summary>
            获取随机文件名
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpRequestUtils2">
            <summary>
              基于 WebClient 技术封装的网络请求工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadData(System.String,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
             作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI，并返回字节数组作为结果（没有加入Cookie）
            </summary>
            <param name="url">请求资源的地址</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadData(System.Uri,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI，并返回字节数组作为结果（没有加入Cookie）
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadDataTaskAsync(System.Uri,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              作为资源下载 <see cref="T:System.Byte" /> 从 URI 指定为异步操作使用 task 对象的数组
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadFile(System.String,System.String,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
             作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI，并返回字节数组作为结果（没有加入Cookie）
            </summary>
            <param name="url">请求资源的地址</param>
            <param name="fileName">若要接收的数据的本地文件的名称</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadFile(System.Uri,System.String,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              作为资源下载 <see cref="T:System.Byte" /> 数组中指定的 URI，并返回字节数组作为结果（没有加入Cookie）
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="fileName">若要接收的数据的本地文件的名称</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadFileTaskAsync(System.Uri,System.String,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              作为资源下载 <see cref="T:System.Byte" /> 从 URI 指定为异步操作使用 task 对象的数组
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="fileName">若要接收的数据的本地文件的名称</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadString(System.String,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
             使用Get方法获取指定路径的资源，并返回字符串结果（没有加入Cookie）
            </summary>
            <param name="url">请求资源的地址</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadString(System.Uri,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              下载请求的资源(相当于Get方式)，并返回字符串形式的请求结果
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpRequestUtils2.DownloadStringTaskAsync(System.Uri,System.Text.Encoding,System.Net.WebProxy)">
            <summary>
              作为资源下载 <see cref="T:System.String" /> 从 URI 指定为使用 task 对象的异步操作。
            </summary>
            <param name="uri">请求资源的对象</param>
            <param name="encoding">编码格式</param>
            <param name="webProxy">代理服务器对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpResult">
            <summary>
             HTTP请求(GET,POST等)的响应返回消息
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpResult.STATUS_SUCCESS">
            <summary>
             HTTP 响应成功，即状态码为200。【用于判断请求是否正常】
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpResult.STATUS_FAIL">
            <summary>
             HTTP 响应失败。【用于判断请求是否正常】
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.Status">
            <summary>
             获取或设置请求的响应状态，success 或者 fail。建议使用常量：HttpResult.STATUS_SUCCESS 与 HttpResult.STATUS_FAIL
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.StatusDescription">
            <summary>
             获取或设置请求的响应状态描述
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.StatusCode">
            <summary>
            状态码。与 HttpWebResponse.StatusCode 完全相同
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.Text">
            <summary>
            响应消息或错误文本
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.Data">
            <summary>
            响应消息或错误(用于存放二进制格式数据)
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.RefCode">
            <summary>
            参考代码(用户自定义)。
            当 Status 等于 success 时，该值为 null；
            当 Status 等于 fail 时，该值为程序给出的用户自定义编码。
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.RefText">
            <summary>
            附加信息(用户自定义内容，如Exception内容或者自定义提示信息)。
            当 Status 等于 success 时，该值为为空
            当 Status 等于 fail 时，该值为程序给出的用户自定义内容，如Exception内容或者自定义提示信息。
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Http.HttpResult.HttpWebResponse">
            <summary>
             获取或设置Http的请求响应。
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpResult.#ctor">
            <summary>
            初始化(所有成员默认值，需要后续赋值)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpResult.Shadow(ZCN.NET.Common.Http.HttpResult)">
            <summary>
            对象复制
            </summary>
            <param name="httpResultSource">要复制其内容的来源</param>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpResult.ToString">
            <summary>
            转换为易读或便于打印的字符串格式
            </summary>
            <returns>便于打印和阅读的字符串</returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.HttpStatusCode2">
            <summary>
                包含为 HTTP 定义的状态代码的值 以及 用户自定义的状态代码的值
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Continue">
            <summary>
                等效于 HTTP 状态 100。
                <see cref="F:System.Net.HttpStatusCode.Continue" /> 指示客户端可以继续其请求。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.SwitchingProtocols">
            <summary>
                等效于 HTTP 状态为 101。
                <see cref="F:System.Net.HttpStatusCode.SwitchingProtocols" /> 指示正在更改的协议版本或协议。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.OK">
            <summary>
                等效于 HTTP 状态 200。
                <see cref="F:System.Net.HttpStatusCode.OK" /> 指示请求成功，且请求的信息包含在响应中。
                这是要接收的最常见状态代码。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Created">
            <summary>
                等效于 HTTP 状态 201。
                <see cref="F:System.Net.HttpStatusCode.Created" /> 指示请求导致已发送响应之前创建一个新的资源。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Accepted">
            <summary>
                等效于 HTTP 状态 202。
                <see cref="F:System.Net.HttpStatusCode.Accepted" /> 指示请求已被接受进行进一步处理。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NonAuthoritativeInformation">
            <summary>
                等效于 HTTP 状态 203。
                <see cref="F:System.Net.HttpStatusCode.NonAuthoritativeInformation" /> 指示返回的元信息来自而不是原始服务器的缓存副本，因此可能不正确。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NoContent">
            <summary>
                等效于 HTTP 状态 204。
                <see cref="F:System.Net.HttpStatusCode.NoContent" /> 指示已成功处理请求和响应是有意留为空白。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.ResetContent">
            <summary>
                等效于 HTTP 状态 205。
                <see cref="F:System.Net.HttpStatusCode.ResetContent" /> 指示客户端应重置 （而不是重新加载） 的当前资源。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.PartialContent">
            <summary>
                等效于 HTTP 206 状态。
                <see cref="F:System.Net.HttpStatusCode.PartialContent" /> 指示根据包括字节范围的 GET 请求的请求的响应是部分响应。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Ambiguous">
            <summary>
                等效于 HTTP 状态 300。
                <see cref="F:System.Net.HttpStatusCode.Ambiguous" /> 指示所需的信息有多种表示形式。
                默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.MultipleChoices">
            <summary>
                等效于 HTTP 状态 300。
                <see cref="F:System.Net.HttpStatusCode.MultipleChoices" /> 指示所需的信息有多种表示形式。
                默认操作是将此状态视为一个重定向，并按照与此响应关联的位置标头的内容。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Moved">
            <summary>
                等效于 HTTP 状态 301。
                <see cref="F:System.Net.HttpStatusCode.Moved" /> 指示已将所需的信息移动到的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
                当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.MovedPermanently">
            <summary>
                等效于 HTTP 状态 301。
                <see cref="F:System.Net.HttpStatusCode.MovedPermanently" /> 指示已将所需的信息移动到的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Found">
            <summary>
                等效于 HTTP 状态 302。
                <see cref="F:System.Net.HttpStatusCode.Found" /> 指示所需的信息位于的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
                当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Redirect">
            <summary>
                等效于 HTTP 状态 302。
                <see cref="F:System.Net.HttpStatusCode.Redirect" /> 指示所需的信息位于的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
                当原始请求方法是 POST 时，重定向的请求将使用 GET 方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RedirectMethod">
            <summary>
                等效于 HTTP 状态 303。
                <see cref="F:System.Net.HttpStatusCode.RedirectMethod" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。
                对指定的位置标头的资源的请求将会执行与 GET。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.SeeOther">
            <summary>
                等效于 HTTP 状态 303。
                <see cref="F:System.Net.HttpStatusCode.SeeOther" /> 自动将客户端重定向到的位置标头中指定作为公告的结果的 URI。
                对指定的位置标头的资源的请求将会执行与 GET。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NotModified">
            <summary>
                等效于 HTTP 状态 304。
                <see cref="F:System.Net.HttpStatusCode.NotModified" /> 指示客户端的缓存的副本是最新。
                不会传输资源的内容。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.UseProxy">
            <summary>
                等效于 HTTP 状态 305。
                <see cref="F:System.Net.HttpStatusCode.UseProxy" /> 指示该请求应使用的位置标头中指定的 uri 的代理服务器。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Unused">
            <summary>
                等效于 HTTP 状态 306。
                <see cref="F:System.Net.HttpStatusCode.Unused" /> 是对未完全指定的 HTTP/1.1 规范建议的扩展。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RedirectKeepVerb">
            <summary>
                等效于 HTTP 状态 307。
                <see cref="F:System.Net.HttpStatusCode.RedirectKeepVerb" /> 指示请求信息位于的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
                当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.TemporaryRedirect">
            <summary>
                等效于 HTTP 状态 307。
                <see cref="F:System.Net.HttpStatusCode.TemporaryRedirect" /> 指示请求信息位于的位置标头中指定的 URI。
                当收到此状态时的默认操作是遵循与响应关联的位置标头。
                当原始请求方法是 POST 时，重定向的请求还将使用 POST 方法。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.BadRequest">
            <summary>
                等效于 HTTP 状态 400。
                <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 指示无法由服务器理解此请求。
                <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 如果没有其他错误适用，或者如果具体的错误是未知的或不具有其自己的错误代码发送。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Unauthorized">
            <summary>
                等效于 HTTP 状态 401。
                <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 指示所请求的资源需要身份验证。
                Www-authenticate 标头包含如何执行身份验证的详细信息。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.PaymentRequired">
            <summary>
                等效于 HTTP 状态 402。
                <see cref="F:System.Net.HttpStatusCode.PaymentRequired" /> 已保留供将来使用。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Forbidden">
            <summary>
                等效于 HTTP 状态 403。
                <see cref="F:System.Net.HttpStatusCode.Forbidden" /> 指示服务器拒绝无法完成请求。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NotFound">
            <summary>
                等效于 HTTP 状态 404。
                <see cref="F:System.Net.HttpStatusCode.NotFound" /> 指示所请求的资源不存在的服务器上。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.MethodNotAllowed">
            <summary>
                等效于 HTTP 状态 405。
                <see cref="F:System.Net.HttpStatusCode.MethodNotAllowed" /> 指示请求方法 （POST 或 GET） 不允许对所请求的资源。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NotAcceptable">
            <summary>
                等效于 HTTP 状态 406。
                <see cref="F:System.Net.HttpStatusCode.NotAcceptable" /> 表示客户端已指定使用 Accept 标头，它将不接受任何可用的资源表示。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.ProxyAuthenticationRequired">
            <summary>
                等效于 HTTP 状态 407。
                <see cref="F:System.Net.HttpStatusCode.ProxyAuthenticationRequired" /> 指示请求的代理要求身份验证。
                代理服务器进行身份验证标头包含如何执行身份验证的详细信息。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RequestTimeout">
            <summary>
                等效于 HTTP 状态 408。
                <see cref="F:System.Net.HttpStatusCode.RequestTimeout" /> 指示客户端的服务器预期请求的时间内没有未发送请求。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Conflict">
            <summary>
                等效于 HTTP 状态 409。
                <see cref="F:System.Net.HttpStatusCode.Conflict" /> 指示该请求可能不会执行由于在服务器上发生冲突。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.Gone">
            <summary>
                等效于 HTTP 状态 410。
                <see cref="F:System.Net.HttpStatusCode.Gone" /> 指示所请求的资源不再可用。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.LengthRequired">
            <summary>
                等效于 HTTP 状态 411。
                <see cref="F:System.Net.HttpStatusCode.LengthRequired" /> 指示缺少必需的内容长度标头。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.PreconditionFailed">
            <summary>
                等效于 HTTP 状态 412。
                <see cref="F:System.Net.HttpStatusCode.PreconditionFailed" /> 表示失败，此请求的设置的条件，无法执行请求。
                使用条件请求标头，如果匹配项，如设置条件无-If-match，或如果-修改-自从。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RequestEntityTooLarge">
            <summary>
                等效于 HTTP 状态 413。
                <see cref="F:System.Net.HttpStatusCode.RequestEntityTooLarge" /> 指示请求来说太大的服务器能够处理。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RequestUriTooLong">
            <summary>
                等效于 HTTP 状态 414。
                <see cref="F:System.Net.HttpStatusCode.RequestUriTooLong" /> 指示 URI 太长。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.UnsupportedMediaType">
            <summary>
                等效于 HTTP 状态 415。
                <see cref="F:System.Net.HttpStatusCode.UnsupportedMediaType" /> 指示该请求是不受支持的类型。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.RequestedRangeNotSatisfiable">
            <summary>
                等效于 HTTP 416 状态。
                <see cref="F:System.Net.HttpStatusCode.RequestedRangeNotSatisfiable" />
                指示从资源请求的数据范围不能返回，或者因为范围的开始处，然后该资源的开头或范围的末尾后在资源的结尾。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.ExpectationFailed">
            <summary>
                等效于 HTTP 状态 417。
                <see cref="F:System.Net.HttpStatusCode.ExpectationFailed" /> 指示无法由服务器满足 Expect 标头中给定。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.UpgradeRequired">
            <summary>
                等效于 HTTP 状态 426。
                <see cref="F:System.Net.HttpStatusCode.UpgradeRequired" /> 指示客户端应切换到不同的协议，例如 TLS/1.0。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.InternalServerError">
            <summary>
                等效于 HTTP 状态 500。
                <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 表示在服务器上发生一般性错误。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.NotImplemented">
            <summary>
                等效于 HTTP 状态 501。
                <see cref="F:System.Net.HttpStatusCode.NotImplemented" /> 指示服务器不支持所请求的功能。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.BadGateway">
            <summary>
                等效于 HTTP 状态 502。
                <see cref="F:System.Net.HttpStatusCode.BadGateway" /> 指示中间代理服务器从另一个代理或原始服务器接收到错误响应。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.ServiceUnavailable">
            <summary>
                等效于 HTTP 状态 503。
                <see cref="F:System.Net.HttpStatusCode.ServiceUnavailable" /> 指示将服务器暂时不可用，通常是由于高负载或维护。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.GatewayTimeout">
            <summary>
                等效于 HTTP 状态 504。
                <see cref="F:System.Net.HttpStatusCode.GatewayTimeout" /> 指示中间代理服务器在等待来自另一个代理或原始服务器的响应时已超时。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.HttpVersionNotSupported">
            <summary>
                等效于 HTTP 状态 505。
                <see cref="F:System.Net.HttpStatusCode.HttpVersionNotSupported" /> 指示服务器不支持请求的 HTTP 版本。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_OBJECT_HAS_NO_ELEMENTS_">
            <summary>
            自定义HTTP状态码（指定的参数对象(集合)没有元素）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_OBJECT_IS_NULL">
            <summary>
            自定义HTTP状态码（指定的参数对象为NULL）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_FILE_NOT_EXISTS">
            <summary>
            自定义HTTP状态码（指定的文件不存在）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_STREAM_NULL">
            <summary>
            自定义HTTP状态码（流对象为NULL）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_INVALID_TOKEN">
            <summary>
            自定义HTTP状态码（凭证不合法）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_INVALID_ARGUMENT">
            <summary>
            自定义HTTP状态码 (异常或错误)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_INVALID_FILE">
            <summary>
            自定义HTTP状态码（文件不合法）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_CANCELED">
            <summary>
            自定义HTTP状态码 (用户取消)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_EXCEPTION">
            <summary>
            自定义HTTP状态码 (程序出现异常)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_UNDEF">
            <summary>
            自定义HTTP状态码 (默认值)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_PAUSED">
            <summary>
            自定义HTTP状态码 (用户暂停)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_RESUMED">
            <summary>
            自定义HTTP状态码 (用户继续)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.HttpStatusCode2.USER_NEED_RETRY">
            <summary>
            自定义HTTP状态码 (需要重试)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.Request01_ByGet">
            <summary>
            普通 GET 方式请求
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.Request02_ByPost">
            <summary>
            普通 POST 方式请求
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.Request03_ByGet">
            <summary>
            使用 GET 方式提交中文数据
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.Request04_ByPost">
            <summary>
            使用 POST 方式提交中文数据
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.GetWebRequest(System.String)">
            <summary>
            Get数据接口
            </summary>
            <param name="getUrl">接口地址</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.PostWebRequest(System.String,System.String,System.Text.Encoding)">
            <summary>
            Post数据接口
            </summary>
            <param name="postUrl">接口地址</param>
            <param name="paramData">提交json数据</param>
            <param name="dataEncode">编码方式(Encoding.UTF8)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.HttpPost(System.String,System.Collections.Generic.Dictionary{System.String,System.String},System.Net.CookieContainer,System.String@)">
            <summary>
            发起Post请求（采用HttpWebRequest，支持传Cookie）
            </summary>
            <param name="strUrl">请求Url</param>
            <param name="formData">发送的表单数据</param>
            <param name="strResult">返回请求结果（如果请求失败，返回异常消息）</param>
            <param name="cookieContainer">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>
            <returns>返回：是否请求成功</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.HttpPostFile(System.String,System.String,System.String,System.Net.CookieContainer,System.String@)">
            <summary>
            发起Post文件请求（采用HttpWebRequest，支持传Cookie）
            </summary>
            <param name="strUrl">请求Url</param>
            <param name="strFilePostName">上传文件的PostName</param>
            <param name="strFilePath">上传文件路径</param>
            <param name="cookieContainer">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>
            <param name="strResult">返回请求结果（如果请求失败，返回异常消息）</param>
            <returns>返回：是否请求成功</returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.HttpTest.GetResponseResult(System.Net.HttpWebRequest,System.Net.CookieContainer)">
            <summary>
            获取请求结果字符串
            </summary>
            <param name="request">请求对象（发起请求之后）</param>
            <param name="cookieContainer">随同HTTP请求发送的Cookie信息，如果不需要身份验证可以为空</param>
            <returns>返回请求结果字符串</returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.NetworkUtils">
            <summary>
              网络操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.NetworkUtils.IsLocalConnectedInternet">
            <summary> 
              检测本机是否联网 
            </summary> 
            <returns></returns> 
        </member>
        <member name="M:ZCN.NET.Common.Http.NetworkUtils.CheckConnect(System.String,System.Int32)">
            <summary>
             检测本地网络是否能正常访问到远程主机或者服务器。访问正常时返回true，否则返回false
            </summary>
            <param name="ip">远程主机的名称</param>
            <param name="port">远程主机的端口号</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Http.ResponseReadMode">
            <summary>
             HTTP应内容的读取响模式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.ResponseReadMode.Binary">
            <summary>
             二进制方式(一般用于读取响应的文件信息)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Http.ResponseReadMode.Stream">
            <summary>
            文件流方式(一般用于读取响应的文本信息)
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Http.UrlUtils">
            <summary>
             URL辅助工具(RegExp)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Http.UrlUtils.IsValidUrl(System.String)">
            <summary>
            是否合法URL
            </summary>
            <param name="url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.UrlUtils.IsNormalUrl(System.String)">
            <summary>
            是否一般URL(不包含？等后缀参数)
            </summary>
            <param name="url">待判断的url</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.UrlUtils.IsValidDir(System.String)">
            <summary>
            是否合法URL目录
            </summary>
            <param name="dir">待判断的url目录</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.UrlUtils.GetNormalUrl(System.String)">
            <summary>
            从原始URL转换为一般URL(根据需要截断)
            </summary>
            <param name="url">待转换的url</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Http.UrlUtils.UrlSplit(System.String,System.String@,System.String@,System.String@,System.String@)">
            <summary>
            URL分析，拆分出Host,Path,File,Query各个部分
            </summary>
            <param name="url">原始URL</param>
            <param name="host">host部分</param>
            <param name="path">path部分</param>
            <param name="file">文件名</param>
            <param name="query">参数</param>
        </member>
        <member name="T:ZCN.NET.Common.Id.SequentialGuidGenerator">
            <summary>
             有序 Guid 生成器。解决了多数据库(SQLServer、MySql、PostgreSQL、Oracle)以及集群环境的问题。
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Id.SequentialGuidGenerator.Instance">
            <summary>
            获取 SequentialGuidGenerator 类的唯一实例
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Id.SequentialGuidGenerator.DatabaseType">
            <summary>
            获取或设置目标数据库类型
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Id.SequentialGuidGenerator.#ctor">
            <summary>
            防止创建类的默认实例。
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Id.SequentialGuidGenerator.Create">
            <summary>
            根据 SqlServer 数据库中 uniqueidentifier 类型的排序规则，生成一个有序的 Guid 值
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Id.SequentialGuidGenerator.Create(ZCN.NET.Common.Id.SequentialGuidDatabaseType)">
            <summary>
             根据指定的数据库类型，生成一个有序的 Guid 值
            </summary>
            <param name="databaseType"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Id.SequentialGuidGenerator.Create(ZCN.NET.Common.Id.SequentialGuidType)">
            <summary>
            生成一个有序Guid
            </summary>
            <param name="guidType">有序Guid的类型枚举</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Id.SequentialGuidType">
            <summary>
             有序Guid的类型
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Id.SequentialGuidType.SequentialAsString">
            <summary>
            使用 Guid.ToString() 格式化 
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Id.SequentialGuidType.SequentialAsBinary">
            <summary>
            使用 Guid.ToByteArray() 格式化
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Id.SequentialGuidType.SequentialAtEnd">
            <summary>
            Guid 的顺序部分应该位于 Data4 块的末尾
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Id.SequentialGuidDatabaseType">
            <summary>
            生成Guid的数据库类型
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Id.SnowflakeIdCreator">
            <summary>
            C#版的雪花ID生成器(性能极高，适用于分布式集群环境)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Id.SnowflakeIdCreator.SetWorkerId(System.Int64)">
            <summary>
            设置机器码
            </summary>
            <param name="id">机器码</param>
        </member>
        <member name="M:ZCN.NET.Common.Id.SnowflakeIdCreator.NextId">
            <summary>
             生成一个Id
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Id.SnowflakeIdCreator.TillNextMillis(System.Int64)">
            <summary>
            获取下一微秒时间戳
            </summary>
            <param name="lastTimestamp"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Id.SnowflakeIdCreator.GenTime">
            <summary>
            生成当前时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Logging.LogLevel">
            <summary>
                日志级别
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Fatal">
            <summary>
                致命异常
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Error">
            <summary>
                错误
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Warn">
            <summary>
                警告
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Info">
            <summary>
                信息
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Trace">
            <summary>
                跟踪(一般用于开发与测试阶段)。Trace 在 Debug 与 Release 状态下都会输出。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogLevel.Debug">
            <summary>
                调试(一般用于开发阶段)。Debug 只在 Debug 状态下会输出。
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Logging.LogUtils">
            <summary>
                文本类型日志工具类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Logging.LogUtils.LogPath">
            <summary>
                日志输出目录
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Logging.LogUtils.EncodingType">
            <summary>
                记录日志时使用的编码方式
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfo(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将提示信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfo(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将提示信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfo(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将提示息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfo(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将提示信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarn(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将警告信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarn(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将警告信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarn(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将警告息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarn(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将警告信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteError(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将错误信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteError(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将错误信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteError(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将错误信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteError(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将错误信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTrace(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTrace(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将调试信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTrace(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTrace(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebug(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebug(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将调试信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebug(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试息与异常信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebug(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息与异常信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.Write(System.String,System.Exception,System.Text.Encoding,ZCN.NET.Common.Logging.LogLevel)">
            <summary>
                【同步方式】使用指定的编码方式将自定义信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="exception">异常对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
            <param name="logLevel">日志类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfoAsync(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将提示信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfoAsync(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将提示信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfoAsync(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将提示息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteInfoAsync(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将提示信息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarnAsync(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将警告信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarnAsync(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将警告信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarnAsync(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将警告息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteWarnAsync(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将警告信息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteErrorAsync(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将错误信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteErrorAsync(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将错误信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteErrorAsync(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将错误信息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteErrorAsync(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将错误信息与异常信息写入文本文件。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTraceAsync(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTraceAsync(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将调试信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTraceAsync(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteTraceAsync(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebugAsync(System.String)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebugAsync(System.String,System.Text.Encoding)">
            <summary>
                使用指定的编码方式将调试信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebugAsync(System.String,System.Exception)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试息与异常信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteDebugAsync(System.String,System.Exception,System.Text.Encoding)">
            <summary>
                使用操作系统的当前ANSI代码页的编码方式将调试信息与异常信息写入文本文件。该方法仅在 Debug 模式下记录日志。
            【在对文件进行异步操作时，对大数据量读写操作使用异步方法的效果更好；而对于数据量较少的读写操作，使用异步方式的速度可能会比同步方式要慢。请根据应用程序的实际情况选择是否使用异步方式操作】
            </summary>
            <param name="msg">自定义消息</param>
            <param name="ex">异常信息对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
        </member>
        <member name="M:ZCN.NET.Common.Logging.LogUtils.WriteAsync(System.String,System.Exception,System.Text.Encoding,ZCN.NET.Common.Logging.LogLevel)">
            <summary>
                【异步方式】使用指定的编码方式将自定义信息与异常信息写入文本文件
            </summary>
            <param name="msg">自定义消息</param>
            <param name="exception">异常对象</param>
            <param name="encoding">编码方式(建议使用 EncodingNames 编码方式常量类获取不同的编码方式名称)</param>
            <param name="logLevel">日志类型</param>
        </member>
        <member name="T:ZCN.NET.Common.Objects.INamedObject">
            <summary>
              名称对象接口
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Objects.INamedObject.Name">
            <summary>
              获取或设置一个值,该值表示对象的名称
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Objects.NamedObjectBase`1">
            <summary>
                名称对象基类
            </summary>
            <typeparam name="T">泛型类型参数，具体的名称对象(例如：数据库架构名称、类的实例名称、属性名称等等)</typeparam>
        </member>
        <member name="M:ZCN.NET.Common.Objects.NamedObjectBase`1.Equals(`0)">
            <summary>
                判断当前对象是否等于同一类型的另一个对象
            </summary>
            <param name="other">目标对比对象</param>
        </member>
        <member name="P:ZCN.NET.Common.Objects.NamedObjectBase`1.Name">
            <summary>
                获取或设置一个值,该值表示对象的名称
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Objects.NamedObjectBase`1.Tag">
            <summary>
                定义一个标签，用于保存该类的其他自定义信息
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Objects.NamedObjectBase`1.Equals(System.Object)">
            <summary>
                判断当前对象是否等于同一类型的另一个对象
            </summary>
            <param name="obj">目标对比对象</param>
        </member>
        <member name="M:ZCN.NET.Common.Objects.NamedObjectBase`1.GetHashCode">
            <summary>
                获取当前类对象的名称的哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Objects.NamedObjectBase`1.ToString">
            <summary>
                返回属性Name的值
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Objects.ISequenceObject">
            <summary>
             序号接口
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Objects.ISequenceObject.Sequence">
            <summary>
              获取或设置一个值,该值表示序号
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Objects.SequenceObjectBase">
            <summary>
             序号基类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Objects.SequenceObjectBase.Sequence">
            <summary>
              获取或设置一个值,该值表示序号
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.CryptoUtils">
            <summary>
             加密解密工具类(AES、DES、RSA等方式)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByAES(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             使用 AES RijndaelManaged(对称加密) 算法加密字符串。 (RijndaelManaged（AES）算法是块式加密算法)。字符串的编码方式为UTF8
            </summary>
            <param name="this">待加密字符串。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByAES(System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 算法解密字符串。字符串的编码方式为UTF8
            </summary>
            <param name="this">待解密的字符串。、编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns>解密成功返回解密后的字符串,失败返源串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByAES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             使用 AES RijndaelManaged(对称加密) 算法加密字符串。 (RijndaelManaged（AES）算法是块式加密算法)。字符串的编码方式为UTF8
            </summary>
            <param name="this">待加密字符串。编码方式为UTF8</param>
            <param name="key">加密密钥，须半角字符。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns>加密结果字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByAES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 算法解密字符串。字符串的编码方式为UTF8
            </summary>
            <param name="this">待解密的字符串</param>
            <param name="key">解密密钥,和加密密钥相同。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns>解密成功返回解密后的字符串,失败返回空</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByAES(System.IO.FileStream,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密)加密文件流
            </summary>
            <param name="this">文件流对象</param>
            <param name="key">加密键。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByAES(System.IO.FileStream,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密)解密文件流
            </summary>
            <param name="this">文件流对象</param>
            <param name="key">解密键。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptFileByAES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 对指定文件加密
            </summary>
            <param name="inputFile">输入文件</param>
            <param name="outputFile">输出文件</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptFileByAES(System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 对指定的文件解密
            </summary>
            <param name="inputFile">输入文件</param>
            <param name="outputFile">输出文件</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptFileByAES(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 对指定文件加密
            </summary>
            <param name="inputFile">输入文件</param>
            <param name="outputFile">输出文件</param>
            <param name="key">加密键。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为 CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptFileByAES(System.String,System.String,System.String,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
             自定义扩展方法：使用 AES RijndaelManaged(对称加密) 对指定的文件解密
            </summary>
            <param name="inputFile">输入文件</param>
            <param name="outputFile">输出文件</param>
            <param name="key">解密键。编码方式为UTF8</param>
            <param name="cipherMode">对称算法的运算模式，默认为CipherMode.CBC</param>
            <param name="paddingMode">对称算法的填充模式，默认为 PaddingMode.PKCS7</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetSubString(System.String,System.Int32,System.String)">
            <summary>
             按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetSubString(System.String,System.Int32,System.Int32,System.String)">
            <summary>
             按字节长度(按字节,一个汉字为2个字节)取得某字符串的一部分
            </summary>
            <param name="sourceString">源字符串</param>
            <param name="startIndex">索引位置，以0开始</param>
            <param name="length">所取字符串字节长度</param>
            <param name="tailString">附加字符串(当字符串不够长时，尾部所添加的字符串，一般为"...")</param>
            <returns>某字符串的一部分</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.CreateSymmetricAlgorithmKey``1(System.String@,System.String@,System.Int32)">
            <summary>
             随机生成秘钥（对称算法）
            </summary>
            <param name="key">秘钥(base64格式)</param>
            <param name="iv">iv向量(base64格式)</param>
            <param name="keySize">要生成的KeySize，每8个byte是一个字节，注意每种算法支持的KeySize均有差异，实际可通过输出LegalKeySizes来得到支持的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.CreateSymmetricAlgorithmKey``1(System.String@,System.String@,``0)">
            <summary>
             随机生成秘钥（非对称算法）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="publicKey">公钥（Xml格式）</param>
            <param name="privateKey">私钥（Xml格式）</param>
            <param name="provider">用于生成秘钥的非对称算法实现类，因为非对称算法长度需要在构造函数传入，所以这里只能传递算法类</param>
        </member>
        <member name="F:ZCN.NET.Common.Utils.CryptoUtils.DEFAULT_DES_KEY">
            <summary>
             注意 DEFAULT_DES_KEY 的长度为10位(如果要增加或者减少key长度,调整IV的长度就可以) 
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByDES(System.String)">
            <summary> 
             使用RSA(对称加密)算法加密字符串
            </summary> 
            <param name="this">待加密字符串</param> 
            <returns></returns> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByDES(System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法加密字符串。注意 key 的长度为10位。字符串的编码方式为UTF8
            </summary> 
            <param name="this">待加密字符串。字符串的编码方式为UTF8</param> 
            <param name="key">加密键。编码方式为UTF8</param> 
            <returns></returns> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByDES(System.String)">
            <summary> 
             使用RSA(对称加密)算法解密字符串
            </summary> 
            <param name="this">待解密的字符串</param>  
            <returns>解密后的字符串</returns> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByDES(System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法解密字符串。注意 key 的长度为10位
            </summary> 
            <param name="this">待解密的字符串</param> 
            <param name="key">解密键。编码方式为UTF8</param> 
            <returns>解密后的字符串</returns> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptFileByDES(System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法加密文件
            </summary> 
            <param name="inFilePath">待加密的文件路径</param> 
            <param name="outFilePath">输出文件路径</param> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptFileByDES(System.String,System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法加密文件。注意 key 的长度为10位
            </summary> 
            <param name="inFilePath">待加密的文件路径</param> 
            <param name="outFilePath">输出文件路径</param> 
            <param name="key">加密键。编码方式为UTF8</param> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptFileByDES(System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法解密文件
            </summary> 
            <param name="inFilePath">待解密的文件路径</param> 
            <param name="outFilePath">输出路径</param>  
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptFileByDES(System.String,System.String,System.String)">
            <summary> 
             使用RSA(对称加密)算法解密文件。注意 key 的长度为10位
            </summary> 
            <param name="inFilePath">待解密的文件路径</param> 
            <param name="outFilePath">输出路径</param> 
            <param name="key">解密键。编码方式为UTF8</param> 
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA1(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用 SHA1(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encoding">字符串编码方式。如果设置为null，则默认使用 Encoding.UTF8进行编码</param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA1(System.String,System.String)">
            <summary>
              自定义扩展方法：使用 SHA1(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encodingName">字符串编码名称。建议使用 EncodingNames 类获取编码名称</param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA1(System.Byte[])">
            <summary>
              自定义扩展方法：使用 SHA1(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this"></param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA256(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用 SHA256(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this"></param>
            <param name="encoding">字符串编码方式。如果设置为null，则默认使用 Encoding.UTF8进行编码</param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA256(System.String,System.String)">
            <summary>
              自定义扩展方法：使用 SHA256(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encodingName">字符串编码名称。建议使用 EncodingNames 类获取编码名称</param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA256(System.Byte[])">
            <summary>
              自定义扩展方法：使用 SHA256(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this"></param>
            <returns>SHA256结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA384(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用 SHA384(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encoding">字符串编码方式。如果设置为null，则默认使用 Encoding.UTF8进行编码</param>
            <returns>SHA384结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA384(System.String,System.String)">
            <summary>
              自定义扩展方法：使用 SHA384(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encodingName">字符串编码名称。建议使用 EncodingNames 类获取编码名称</param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA384(System.Byte[])">
            <summary>
              自定义扩展方法：使用 SHA384(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this"></param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA512(System.String,System.Text.Encoding)">
            <summary>
              自定义扩展方法：使用 SHA512(不可逆加密)方式加密字符串。  返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encoding">字符串编码方式。如果设置为null，则默认使用 Encoding.UTF8进行编码</param>
            <returns>SHA512结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA512(System.String,System.String)">
            <summary>
              自定义扩展方法：使用 SHA512(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this">扩展对象。待加密的字符串</param>
            <param name="encodingName">字符串编码名称。建议使用 EncodingNames 类获取编码名称</param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptBySHA512(System.Byte[])">
            <summary>
              自定义扩展方法：使用 SHA512(不可逆加密)方式加密字符串。返回长度为44字节的字符串
            </summary>
            <param name="this"></param>
            <returns>SHA1结果(返回长度为44字节的字符串)</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByHash(System.String)">
            <summary>
             自定义扩展方法：使用 自定义 Hash(不可逆加密) 算法加密字符串
            </summary>
            <param name="this"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByMD5(System.String,ZCN.NET.Common.Enums.CaseType)">
            <summary>
             自定义扩展方法：使用 MD5(不可逆加密) 算法加密字符串。返回二进制形式的字符串。字符串的编码方式为UTF8。
            </summary>
            <param name="this">扩展对象。字符串。编码方式为UTF8</param>
            <param name="caseType">字符串大小写。默认小写</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByMD5(System.String,System.Int32,ZCN.NET.Common.Enums.CaseType)">
            <summary>
             自定义扩展方法：使用 MD5(不可逆加密) 算法加密字符串(可多次加密)
            </summary>
            <param name="this">扩展对象。字符串</param>
            <param name="count">使用MD5方式加密的次数(介于1到10之间)</param>
            <param name="caseType">字符串大小写。默认小写</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByMD5(System.Byte[])">
            <summary>
             自定义扩展方法：使用 MD5(不可逆加密) 算法加密字节数组
            </summary>
            <param name="data">待加密数据</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByMD5(System.IO.Stream)">
            <summary>
             自定义扩展方法：使用 MD5(不可逆加密) 算法加密字节流
            </summary>
            <param name="stream">待加密流</param>
            <returns>加密后的字串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetMD5_32(System.String)">
            <summary>
            自定义扩展方法： 获得32位长度的MD5加密字符串
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetMD5_16(System.String)">
            <summary>
            自定义扩展方法：获得16位长度的MD5加密字符串
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetMD5_8(System.String)">
            <summary>
             自定义扩展方法：获得8位长度的MD5加密字符串
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GetMD5_4(System.String)">
            <summary>
            自定义扩展方法： 获得4位长度的MD5加密字符串
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.AddMD5Profix(System.String)">
            <summary>
             添加MD5的前缀，便于检查有无篡改
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.RemoveMD5Profix(System.String)">
            <summary>
            移除MD5的前缀
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.ValidateValue(System.String)">
            <summary>
             验证MD5前缀处理的字符串有无被篡改
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.AddMD5(System.String)">
            <summary>
             对给定文件路径的文件加上标签
            </summary>
            <param name="path">要加密的文件的路径</param>
            <returns>标签的值</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.CheckMD5(System.String)">
            <summary>
            对给定路径的文件进行验证，如果一致返回True，否则返回False
            </summary>
            <param name="path"></param>
            <returns>是否加了标签或是否标签值与内容值一致</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.MD5Buffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            计算文件的MD5值
            </summary>
            <param name="fileByteArray">MD5签名文件字符数组</param>
            <param name="index">计算起始位置</param>
            <param name="count">计算终止位置</param>
            <returns>计算结果</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByRSA(System.String,System.String)">
            <summary>
             自定义扩展方法：使用RSA(非对称加密)算法加密字符串。字符串的编码方式为UTF8。
            </summary>
            <param name="this">扩展对象，待加密的字符串。编码方式为UTF8</param>
            <param name="publicKey">公钥。xml格式</param>
            <returns>加密密后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByRSA(System.String,System.String)">
            <summary>
             自定义扩展方法：使用(非对称加密)算法解密字符串。字符串的编码方式为UTF8。
            </summary>
            <param name="this">扩展对象，待解密的字符串。编码方式为UTF8。</param>
            <param name="privateKey">私钥。xml格式</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.EncryptByRSA(System.Byte[],System.String)">
            <summary>
             自定义扩展方法：使用RSA(非对称加密)算法加密字节数组
            </summary>
            <param name="this">扩展对象，待加密字节数组</param>
            <param name="publicKey">公钥。xml格式</param>
            <returns>加密密后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.DecryptByRSA(System.Byte[],System.String)">
            <summary>
             自定义扩展方法：使用RSA(非对称加密)算法解密字节数组
            </summary>
            <param name="this">扩展对象，待解密字节数组</param>
            <param name="privateKey">私钥</param>
            <returns>解密后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.SignatureByRSA(System.String,System.String)">
            <summary>
             自定义扩展方法：使用RSA(非对称加密)算法签名数据。字符串的编码方式为UTF8。
            </summary>
            <param name="this">扩展对象，待签名的字符串。编码方式为UTF8</param>
            <param name="privateKey">私钥。xml格式</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.SignatureByRSA(System.Byte[],System.String)">
            <summary>
             自定义扩展方法：使用RSA(非对称加密)算法签名数据
            </summary>
            <param name="this">待加密的字符串</param>
            <param name="privateKey">私钥。xml格式</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.VerifySignatureByRSA(System.String,System.String,System.String)">
            <summary>
             自定义扩展方法：对私钥加密的字符串，使用公钥对其进行验证。字符串的编码方式为UTF8。
            </summary>
            <param name="originalString">未加密的文本，如机器码。字符串的编码方式为UTF8。</param>
            <param name="encrytedString">加密后的文本，如注册序列号</param>
            <param name="publicKey">非对称加密的公钥。xml格式</param>
            <returns>如果验证成功返回True，否则为False</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.CryptoUtils.GenerateRSAKeyPair(System.String@,System.String@)">
            <summary>
             随机生成一对非对称加密的私钥和公钥
            </summary>
            <param name="privateKey">输出参数，私钥</param>
            <param name="publicKey">输出参数，公钥</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.Base64Utils">
            <summary>
             对字符串进行Base64方式加密解密工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Base64Utils.EncryptByBase64(System.String)">
            <summary>
             使用 UTF8 编码格式，对字符串进行进行 Base64 方式编码（加密）
            </summary>
            <param name="this">扩展对象</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Base64Utils.DecryptByBase64(System.String)">
            <summary>
             使用 UTF8 编码格式，对字符串进行进行 Base64 方式解码（解密）
            </summary>
            <param name="this">扩展对象</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Base64Utils.EncryptByBase64(System.String,System.String)">
            <summary>
             使用自定义的编码格式，对字符串进行进行 Base64 方式编码（加密）
            </summary>
            <param name="this">扩展对象</param>
            <param name="encodingName">编码方式。建议使用 EncodingNames 类获取编码名称</param>
            <returns>编码后的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Base64Utils.DecryptByBase64(System.String,System.String)">
            <summary>
             使用自定义的编码格式，对字符串进行进行 Base64 方式解码（解密）
            </summary>
            <param name="this">扩展对象</param>
            <param name="encodingName">编码方式，需要与加密时使用相同的编码方式</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.HashNames">
            <summary>
             用于创建签名的哈希算法的名称类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.HashNames.SHA1">
            <summary>
             SHA1
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.HashNames.SHA256">
            <summary>
             SHA256 
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.HashNames.SHA384">
            <summary>
             SHA384
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.HashNames.SHA512">
            <summary>
             SHA512
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.RSAHelper">
            <summary>
                RSA操作类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.#ctor(System.Int32)">
            <summary>
             使用指定的密钥大小初始化 <see cref="T:System.Security.Cryptography.RSACryptoServiceProvider" /> 类的新实例。
            <para>如果需要转换已知的XML或PEM格式的秘钥，请使用RSAHelper(string xmlOrPem, RSAKeyType keyType)重载方法</para>
            </summary>
            <param name="keySize">要使用的密钥的大小（以位为单位）。默认为1024。如果手动设置建议使用：512、1024、2048、4096</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.#ctor(System.String,ZCN.NET.Common.Utils.RSAKeyType)">
            <summary>
             通过 XML 字符串中的密钥(公钥或者私钥)信息初始化 <see cref="T:System.Security.Cryptography.RSA" /> 对象。
            </summary>
            <param name="xmlOrPem"> XML 字符串或者 PEM 格式字符串，其中包含公钥或者私钥</param>
            <param name="keyType">RSA 密钥格式</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.ToXML(System.Boolean)">
            <summary>
                导出XML格式密钥对，如果convertToPublic含私钥的RSA将只返回公钥，仅含公钥的RSA不受影响
            </summary>
            <param name="convertToPublic">是否导出为公钥。false时导出私钥</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.ToPEM_PKCS1(System.Boolean)">
            <summary>
                导出PEM PKCS#1格式密钥对，如果convertToPublic含私钥的RSA将只返回公钥，仅含公钥的RSA不受影响
            </summary>
            <param name="convertToPublic">是否导出为公钥。false时导出私钥</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.ToPEM_PKCS8(System.Boolean)">
            <summary>
                导出PEM PKCS#8格式密钥对，如果convertToPublic含私钥的RSA将只返回公钥，仅含公钥的RSA不受影响
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.Encode(System.String)">
            <summary>
                加密字符串（utf-8），出错抛异常
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.Encode(System.Byte[])">
            <summary>
                加密数据，出错抛异常
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.DecodeOrNull(System.String)">
            <summary>
                解密字符串（utf-8），解密异常返回null
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.DecodeOrNull(System.Byte[])">
            <summary>
                解密数据，解密异常返回null
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.SignData(System.String,System.String)">
            <summary>
                对str进行签名，并指定hash算法（如：SHA256）
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.SignData(System.String,System.Byte[])">
            <summary>
                对data进行签名，并指定hash算法（如：SHA256）
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.VerifyData(System.String,System.String,System.String)">
            <summary>
                验证字符串str的签名是否是sign，并指定hash算法（如：SHA256）
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSAHelper.VerifyData(System.String,System.Byte[],System.Byte[])">
            <summary>
                验证data的签名是否是sign，并指定hash算法（如：SHA256）
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.RSAKeyType">
            <summary>
             RSA 密钥格式
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.RSAKeyType.XML">
            <summary>
             xml 格式(DotNet支持的格式)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.RSAKeyType.PEM">
            <summary>
             PME 格式(Java或其他编程语言支持的格式)
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.RSA_PEM_Utility">
            <summary>
             RSA PEM格式秘钥对的解析和导出
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.RSA_PEM_Utility.PUBLIC_KEY">
            <summary>
             PEM 公钥开头中包含的 PUBLIC KEY
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.RSA_PEM_Utility.PRIVATE_KEY">
            <summary>
             PEM 私钥开头中包含的 PRIVATE KEY
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSA_PEM_Utility.FromPEM(System.String)">
            <summary>
             用PEM格式密钥对创建RSA对象，支持PKCS#1、PKCS#8格式的PEM
            </summary>
            <param name="pem">pem格式密钥</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RSA_PEM_Utility.ToPEM(System.Security.Cryptography.RSACryptoServiceProvider,System.Boolean,System.Boolean)">
            <summary>
            将RSA中的密钥对转换成PEM格式，usePKCS8=false时返回PKCS#1格式，否则返回PKCS#8格式。
            如果convertToPublic含私钥的RSA将只返回公钥，仅含公钥的RSA不受影响
            </summary>
            <param name="rsa">RSA加密对象</param>
            <param name="convertToPublic">是否导出为公钥。false时导出私钥</param>
            <param name="usePKCS8">是否返回PKCS8格式</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.Pinyin">
            <summary>
                一个非常完善的拼音辅助类库
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetFirstPY(System.String)">
            <summary>
                取中文文本的拼音首字母
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <returns>返回中文对应的拼音首字母</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetFirstPY(System.String,System.Text.Encoding)">
            <summary>
                取中文文本的拼音首字母
            </summary>
            <param name="text">文本</param>
            <param name="encoding">源文本的编码</param>
            <returns>返回encoding编码类型中文对应的拼音首字母</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetPinyin(System.String)">
            <summary>
                取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <returns>返回中文文本的拼音</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetPinyin(System.String,System.Text.Encoding)">
            <summary>
                取中文文本的拼音
            </summary>
            <param name="text">编码为UTF8的文本</param>
            <param name="encoding">源文本的编码</param>
            <returns>返回encoding编码类型的中文文本的拼音</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetChineseText(System.String)">
            <summary>
                取和拼音相同的汉字列表
            </summary>
            <param name="pinyin">编码为UTF8的拼音</param>
            <returns>取拼音相同的汉字列表，如拼音“ai”将会返回“唉爱……”等</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetChineseText(System.String,System.Text.Encoding)">
            <summary>
                取和拼音相同的汉字列表，编码同参数encoding
            </summary>
            <param name="pinyin">编码为encoding的拼音</param>
            <param name="encoding">编码</param>
            <returns>返回编码为encoding的拼音为pinyin的汉字列表，如拼音“ai”将会返回“唉爱……”等</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.ConvertEncoding(System.String,System.Text.Encoding,System.Text.Encoding)">
            <summary>
                转换编码
            </summary>
            <param name="text">文本</param>
            <param name="srcEncoding">源编码</param>
            <param name="dstEncoding">目标编码</param>
            <returns>目标编码文本</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetPinyin(System.Char)">
            <summary>
                返回单个字符的汉字拼音
            </summary>
            <param name="ch">编码为UTF8的中文字符</param>
            <returns>ch对应的拼音</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetPinyin(System.Char,System.Text.Encoding)">
            <summary>
                返回单个字符的汉字拼音
            </summary>
            <param name="ch">编码为encoding的中文字符</param>
            <param name="encoding">编码</param>
            <returns>编码为encoding的ch对应的拼音</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.Pinyin.GetHashIndex(System.Char)">
            <summary>
                取文本索引值
            </summary>
            <param name="ch">字符</param>
            <returns>文本索引值</returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.PinYinUtils">
            <summary>
              中文字符串转换为拼音或者拼音首字母的辅助类，另一个辅助类可以使用Pinyin类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.PinYinUtils.PinyinValues">
            <SUMMARY>
            包含字符 ASC 码的整形数组。
            </SUMMARY>
        </member>
        <member name="F:ZCN.NET.Common.Utils.PinYinUtils.PinyinNames">
            <SUMMARY>
            包含汉字拼音的字符串数组。
            </SUMMARY>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.CHSToPinyin(System.String,System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.CHSToPinyin(System.String,System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="separator">连接拼音之间的分隔符</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.CHSToPinyin(System.String,System.Boolean)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <param name="initialCap">指定是否将首字母大写</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.CHSToPinyin(System.String)">
            <summary>
            将指定中文字符串转换为拼音形式
            </summary>
            <param name="chs">要转换的中文字符串</param>
            <returns>包含中文字符串的拼音的字符串</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.GetFirstPY(System.String)">
            <summary>
            这个方法是用来获得一个字符串的每个字的拼音首字母组成所需的字符串
            </summary>
            <param name="chsStr">要转换的中文或字母字符串</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.PinYinUtils.GetSpell(System.String)">
            <summary>
            用来获得一个字的拼音首字母
            </summary>
            <param name="cnChar"></param>
            <returns></returns>
        </member>
        <member name="P:ZCN.NET.Common.Utils.PinYinUtils.CHSPhraseSpecial">
            <summary>
            设置或获取包含例外词组读音的键/值对的组合
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ConsoleUtils">
            <summary>
              控制台程序的工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteError(System.String)">
            <summary>
                写入一行错误信息【红色字体，黑色背景】
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteLineError(System.String)">
            <summary>
                写入一行错误信息【红色字体，黑色背景】，并换行
            </summary>
            <param name="text">文本</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteWarn(System.String)">
            <summary>
                写入一行警告信息【黄色字体，黑色背景】
            </summary>
            <param name="text">文本内容</param>
            时间：2016/9/2 17:30
            备注：
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteLineWarn(System.String)">
            <summary>
                写入一行警告信息【黄色字体，黑色背景】，并换行
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteInfo(System.String)">
            <summary>
                写入一行信息【绿色字体，黑色背景】
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteLineInfo(System.String)">
            <summary>
                写入一行信息【绿色字体，黑色背景】，并换行
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.Write(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
                写入一行【自定义字体颜色(默认白色)，黑色背景】
            </summary>
            <param name="text">文本内容</param>
            <param name="color">文本颜色。默认白色</param>
            <param name="backgroundColor">控制台北京颜色，默认黑色</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ConsoleUtils.WriteLine(System.String,System.ConsoleColor,System.ConsoleColor)">
            <summary>
                写入一行【自定义字体颜色(默认白色)，黑色背景】，并换行
            </summary>
            <param name="text">文本内容</param>
            <param name="color">文本颜色。默认白色</param>
            <param name="backgroundColor">控制台北京颜色，默认黑色</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.DataTableUtils">
            <summary>
             DataTable 操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.DataTableUtils.CreateDataTable(System.String)">
            <summary>
             使用指定的表名称创建一个空的 DataTable(不包含列、行信息)
            </summary>
            <param name="tableName">表名称</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.DataTableUtils.CreateDataTable(System.String,System.Globalization.CultureInfo)">
            <summary>
             使用指定的表名称与区域性信息对象创建一个空的 DataTable(不包含列、行信息)
            </summary>
            <param name="tableName">表名称</param>
            <param name="cultureInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.DateTimeUtils">
            <summary>
            日期时间操作工具类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.DateTimeUtils.MiniValue">
            <summary>
             开发框架中自定义的日期时间的最小值：1900-01-01 00:00:00
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.DateTimeUtils.MaxValue">
            <summary>
             开发框架中自定义的日期时间的最大值：9999-12-31 23:23:23
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ProcessUtils">
            <summary>
              系统进程操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ProcessUtils.CheckAppIsRunning(System.String)">
            <summary>
              检测指定的程序是否已经正在运行
            </summary>
            <param name="appName">应用程序名称(提示：传递的参数是软件发布后，用户使用软件时双击的 exe 文件名称)</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ProcessUtils.RunAsAdministrator(System.String)">
            <summary>
             以管理员身份运行指定路径的应用程序
            </summary>
            <param name="fileName">应用程序名称，包含全路径</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ProcessUtils.OpenDirectory(System.String)">
            <summary>
             打开指定的目录(仅限本地操作系统)
            </summary>
            <param name="path">目录</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ImageUtility">
            <summary>
              图片操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.CaptureDesktop">
            <summary>
              截取操作系统的桌面并保存为图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.CaptureForegroundWindow">
            <summary>
              截取当前前台窗体句柄并保存为图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.CaptureWindow(System.IntPtr)">
            <summary>
             截取屏幕并保存为图片
            </summary>
            <param name="handle">句柄对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.ToFile(System.Drawing.Image,System.Int64,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>
              将Image对象写入文件中
            </summary>
            <param name="image"></param>
            <param name="quality"></param>
            <param name="format"></param>
            <param name="fileName"></param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.ToStream(System.Drawing.Image,System.Int64,System.Drawing.Imaging.ImageFormat)">
            <summary>
              将图像对象转换为流
            </summary>
            <param name="image"></param>
            <param name="quality"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ImageUtility.GetBytes(System.Drawing.Image)">
            <summary>
             将Image对象转换为二进制数组
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.EnumUtils">
            <summary>
                枚举操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetInstance``1(System.String,System.Boolean)">
            <summary>
               将一个或多个枚举常数的名称或数字值的字符串表示转换成等效的枚举对象。
            当此方法返回时，如果分析操作成功，结果将包含值由 <paramref name="member" /> 表示的 TEnum 类型的对象。 如果分析操作失败，结果将包含 TEnum 的基础类型的默认值。 请注意，此值无需为 TEnum 枚举的成员。
            </summary>
            <typeparam name="TEnum">要将 <paramref name="member" /> 转换到的枚举类型。</typeparam>
            <param name="member">
                枚举成员的常量名或常量值,
                范例:Enum1枚举有两个成员A=0,B=1,则传入"A"或"0"获取 Enum1.A 枚举类型
            </param>
            <param name="ignoreCase">是否忽略大小写</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetMemberKeyValue``1">
            <summary>
                获取枚举成员名称和成员值的键值对集合
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetMemberNames``1">
            <summary>
                获取枚举所有成员名称
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetMemberName``1(System.Object)">
            <summary>
                获取枚举成员的名称
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
            <param name="member">
                枚举成员实例或成员值,
                范例:Enum1枚举有两个成员A=0,B=1,则传入Enum1.A或0,获取成员名称"A"
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetMemberValues``1">
            <summary>
                获取枚举所有成员值
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetMemberValue``1(System.String)">
            <summary>
                获取枚举成员的值
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
            <param name="memberName">
                枚举成员的常量名,
                范例:Enum1枚举有两个成员A=0,B=1,则传入"A"获取0
            </param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetUnderlyingType(System.Type)">
            <summary>
                获取枚举的基础类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.IsDefined``1(System.String)">
            <summary>
                检测枚举是否包含指定成员
            </summary>
            <typeparam name="TEnum">枚举名,比如Enum1</typeparam>
            <param name="member">枚举成员名或成员值</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetDescription(System.Type,System.Object)">
            <summary>
                返回指定枚举类型的指定值的描述
            </summary>
            <param name="t">枚举类型</param>
            <param name="v">枚举值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetName(System.Type,System.Object)">
            <summary>
                返回指定枚举类型的指定值的名称
            </summary>
            <param name="t">指定枚举类型</param>
            <param name="v">指定值</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EnumUtils.GetStatus(System.Type)">
            <summary>
                获取枚举类型的对应序号及描述名称
            </summary>
            <param name="t">枚举类型</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.FileUtils">
            <summary>
              文件操作辅助工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.FileUtils.ReadFileFromEmbedded(System.String)">
            <summary>
              从嵌入资源中读取文件内容。如果文件不存在则返回 null
            </summary>
            <param name="fileFullName">嵌入资源文件名，包括项目的命名空间.</param>
            <returns>资源中的文件内容.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.FileUtils.ReadFileContent(System.String)">
            <summary>
             读取文件的全部内容，并返回字符串
            </summary>
            <param name="filePath">文件名称，包含全路径</param>
            <returns>文件的内容，字符串形式</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.FileUtils.CheckFileIsOpenOrInUse(System.String,System.String@)">
            <summary>
             判断文件是否被打开或被其他程序使用中。
             true 表示文件被打开或被其他程序使用中，false 没有没有。 
            </summary>
            <param name="filePath">带检测的文件名称，包含绝对路径</param>
            <param name="msg">检测的结果信息</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.IOUtils">
            <summary>
             文件输入输入工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.IOUtils.DeleteDirectory(System.String)">
            <summary>
             删除指定目录及其子目录以及所有文件
            </summary>
            <param name="targetDir">目标目录</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.IOUtils.DeleteDirectoryChild(System.String)">
            <summary>
             删除指定目录下的子目录以及所有文件
            </summary>
            <param name="targetDir">目标目录</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StreamUtils">
            <summary>
             Stream 流操作辅助类
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StreamUtils.DEFAULT_BUFFER_SIZE">
            <summary>默认缓存大小</summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.Byte[],System.Byte[],System.Int64)">
            <summary>
              复制字节数据
            </summary>
            <param name="input">输入字节数组</param>
            <param name="output">输出字节数组</param>
            <param name="outputOffset">字节偏移位置</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.Byte[],System.IO.Stream)">
            <summary>
             向当前流中写入字节序列，并将此流中的当前位置提升写入的字节数
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="output">流(输出)</param>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>		
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.Byte[],System.IO.StreamWriter)">
            <summary>
              使用操作系统默认的编码方式将输入中的字节复制并转换为 streamwriter 上的字符
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="outputWriter">流(输出)</param>
            <exception cref="T:System.IO.IOException">in the case of an I/O problem</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.Byte[],System.IO.StreamWriter,System.String)">
            <summary>
             使用指定的的编码方式将输入中的字节复制并转换为 streamwriter 上的字符
            <see cref="T:System.IO.StreamWriter"/>.
            </summary>
            <param name="input">字节数组(输入)</param>
            <param name="outputWriter">流(输出)</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>将输入中的整个内容复制到输出中.</summary>
            <param name="input">流(输入)</param>
            <param name="output">流(输出)</param> 
            <returns>复制的字节数</returns>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>		
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>将输入中的内容复制到输出中</summary>
            <param name="input">流(输入)</param>
            <param name="output">流(输出)</param>
            <param name="copyFromBeginning">将true设置为从输入流的开头复制，例如input.position=0，否则，它将从输入流中的当前位置开始复制。 </param>
            <returns>复制的字节数</returns>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.StreamReader,System.IO.StreamWriter)">
            <summary>将字符从<see cref="T:System.IO.StreamReader"/>复制到<see cref="T:System.IO.StreamWriter"/></summary>
            <param name="inputStreamReader"><see cref="T:System.IO.StreamReader"/>输入</param>
            <param name="outputStreamWriter"><see cref="T:System.IO.StreamWriter"/>输出/// </param>
            <returns>复制的字符数</returns>        
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.Stream,System.IO.StreamWriter)">
            <summary>
             使用操作系统默认的编码方式将输入中的字节复制并转换为 streamwriter上的字符
            </summary>
            <param name="inputStream">流(输入)
            </param>
            <param name="outputStreamWriter">StreamWriter 对象(输出)
            </param>
            <exception cref="T:System.IO.IOException">if an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.Stream,System.IO.StreamWriter,System.String)">
            <summary>
             使用指定的的编码方式将输入中的字节复制并转换为 streamwriter上的字符
            </summary>
            <param name="inputStream"></param>
            <param name="outputWriter"></param>
            <param name="encoding">编码方式</param>
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.IO.StreamReader,System.IO.Stream)">
            <summary>
            将<see cref="T:System.IO.StreamReader"/>中的字符序列化为输出上的字节，然后刷新输出。
            </summary>
            <param name="inputReader"><see cref="T:System.IO.StreamReader"/>输入</param>
            <param name="output"><see cref="T:System.IO.Stream"/>输出</param>
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.String,System.IO.Stream)">
            <summary>
            将字符串中的字符序列化为输出上的字节，然后刷新输出。
            </summary>
            <param name="input">字符串输入</param>
            <param name="output"><see cref="T:System.IO.Stream"/>输出</param>  
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Copy(System.String,System.IO.StreamWriter)">
            <summary>
             将字符从a<see cref="T:System.String"/>复制到a<see cref="T:System.IO.StreamWriter"/>
            </summary>
            <param name="input">字符串输入</param>
            <param name="output"><see cref="T:System.IO.StreamWriter"/>输出</param>  
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>      
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.CopyExact(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
             将源中的确切字节数<see cref="T:System.IO.Stream"/>复制到目标中<see cref="T:System.IO.Stream"/>。
            </summary>
            <param name="source">源 <see cref="T:System.IO.Stream"/></param>
            <param name="target">目标 <see cref="T:System.IO.Stream"/></param>
            <param name="len">要复制的字节数</param>        
            <exception cref="T:System.IO.IOException">if the source stream does not have enough data.</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadIntoByteArray(System.IO.Stream,System.Byte[])">
            <summary>
            将数据读取到一个完整的数组中。如果流首先耗尽数据，或者如果IOException自然发生，引发EndOfStreamException。
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="byteArray">要读取字节的数组。数组将从流中完全填充，因此必须给出适当的大小。</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetBytes(System.IO.Stream)">
            <summary>
             从流的开头读取数据，直到到达结尾。数据作为字节数组返回。(这种读取流的方法效率不太高)
            <para>如果您事先不知道流的长度（例如网络流），只想将整批数据读取到一个缓冲区中，请使用此方法。</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <exception cref="T:System.IO.IOException">在任何基础IO调用失败时引发</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetBytes(System.IO.Stream,System.Int64)">
            <summary>
            从流中读取数据，直到到达结尾。这个数据作为字节数组返回。
            <para>如果知道要开始的数据的预期长度，请使用此方法获取数据</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="initialLength">初始缓冲区长度。如果长度小于1，则设置为<see cref="F:System.Int16.MaxValue"/> 
            </param>
            <exception cref="T:System.IO.IOException">如果任何基础IO调用失败，则引发异常</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetAsciiString(System.IO.Stream)">
            <summary>
             从数据流返回一个ASCII字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetString(System.IO.Stream)">
            <summary>
             从数据流返回一个utf8编码的字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从数据流返回一个指定编码方式的字符串
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadExact(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             将源流中任何位置的指定字节数读取到特定起始索引位置的特定字节数组中。字节数组必须具有读取所需流部分所需的大小。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="target">要写入的目标字节数组</param>
            <param name="targetOffset">目标中的偏移索引</param>
            <param name="sourceOffset">流中的偏移位置</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadPartial(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
             从偏移位置开始读取流的部分段。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="sourceOffset">流中的起始偏移位置。如果要从头读取流，则设置为0</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
            <returns>return partial segment as an array of bytes.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.Stream,System.Int32)">
            <summary>
             尝试跳过输入流中的字节，并返回跳过的实际字节数。
            </summary>
            <param name="stream">将用于跳过字节的输入流</param>
            <param name="skipBytes">要跳过的字节数</param>
            <returns>当前字节数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.StreamReader,System.Int64)">
            <summary>
            将给定数量的字符跳过到给定的流中。
            </summary>
            <param name="stream">完成跳过操作的流</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.StringReader,System.Int64)">
            <summary>
             将给定数量的字符跳过到给定的StringReader中
            </summary>
            <param name="strReader">跳过的 StringReader 对象</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数。</returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ComputerManageUtils">
            <summary>
             计算机硬件信息管理工具类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.OsVersion">
            <summary>
             获取系统标识符和版本号
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.WorkingSet">
            <summary>
             获取映射到进程上下文的物理内存量
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.TickCount">
            <summary>
             获取系统启动后经过的毫秒数
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.SystemDirectory">
            <summary>
             获取系统目录的完全限定路径
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.MachineName">
            <summary>
             获取此本地计算机的 NetBIOS 名称
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.UserDomainName">
            <summary>
             获取与当前用户关联的网络域名
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetComputerName">
            <summary>
             获取电脑名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetCpuSerialNumber">
            <summary>
             获取 Cpu 序列号。
             通过 Win32_Processor 获取 CPUID 不正确，或者说 Win32_Processor 字段就不包含 CPU 编号信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetBaseBoardSerialNumber">
            <summary>
             获取主板序列号。
             通过Win32_BaseBoard获取主板信息，但不是所有的主板都有编号，或者说不是能获取所有系统主板的编号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetBiosSerialNumber">
            <summary>
             获取 BIOS 序列号。
             通过 Win32_BIOS 获取 BIOS 信息，基本和获取主板信息差不多。就是说：不是所有的主板 BIOS 信息都有编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetMacAddress">
            <summary>
             获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetIpAddress">
            <summary>
             获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetDiskId">
            <summary>
              获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetDiskSerialNumber">
            <summary>
              获取硬盘序列号。
              网上有提到，用 Win32_DiskDrive，但是用 Win32_DiskDrive 获得的硬盘信息中并不包含 SerialNumber 属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetUserName">
            <summary>
             操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetSystemType">
            <summary>
             获取计算机操作系统类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetTotalPhysicalMemory">
            <summary>
             获取电脑物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ComputerWMIEnum">
            <summary>
                计算机硬件名称配置枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_BaseBoard">
            <summary>
                主板
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_BIOS">
            <summary>
                BIOS 芯片
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_CDROMDrive">
            <summary>
                光盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DiskDrive">
            <summary>
                硬盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DesktopMonitor">
            <summary>
                显示器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DisplayConfiguration">
            <summary>
                显卡
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DisplayControllerConfiguration">
            <summary>
                显卡设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_FloppyDrive">
            <summary>
                软盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Keyboard">
            <summary>
                键盘
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_NetworkAdapter">
            <summary>
                网络适配器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_NetworkAdapterConfiguration">
            <summary>
                网络适配器设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_ParallelPort">
            <summary>
                并口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Processor">
            <summary>
                CPU 处理器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PhysicalMemory">
            <summary>
                物理内存条
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PhysicalMedia">
            <summary>
            物理媒介
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PointingDevice">
            <summary>
                输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Printer">
            <summary>
                打印机
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PrinterConfiguration">
            <summary>
                打印机设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PrintJob">
            <summary>
                打印机任务
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_POTSModem">
            <summary>
                Moden
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_POTSModemToSerialPort">
            <summary>
                Moden端口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SerialPort">
            <summary>
                串口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SerialPortConfiguration">
            <summary>
                串口配置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SoundDevice">
            <summary>
                多媒体设置，一般指声卡。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SystemSlot" -->
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_TCPIPPrinterPort">
            <summary>
                打印机端口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_USBController">
            <summary>
                USB 控制器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_VideoController">
            <summary>
                显卡细节
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_VideoSettings">
            <summary>
                显卡支持的显示模式
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.RandomUtils">
            <summary>
             自定义类：扩展 Random 随机方法
            </summary>
            <summary>
             自定义类：扩展 Random 随机方法
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomInt(System.Int32,System.Int32,System.Random)">
            <summary>
             随机生成一个整数。
             第三个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="lowerBound">区间范围下限值</param>
            <param name="upperBound">区间范围上限值</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomDouble(System.Random)">
            <summary>
             随机生成一个双精度浮点数。
             第1个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomDecimal(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
             随机生成一个Decimal类型数字,1位小数。
             第4个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="lowerBound">区间范围下限值</param>
            <param name="upperBound">区间范围上限值</param>
            <param name="length">小数点后的小数位数，大于0</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomString(System.String[],System.Random)">
            <summary>
              根据传入的字符串数组，随机返回其中的一个字符串。
              第2个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
              如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="arrStr">字符串数组</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomCode(System.Int32,System.Random)">
            <summary>
             随机生成指定位数的编码
            </summary>
            <param name="codeLen">长度。如果长度小于等于0，则默认返回16位长度</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.AssemblyReferencesUtils">
            <summary>
                自定义类：用于发现同一依赖程序集的不同版本之间存在冲突的警告
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.FindConflictingReferences(System.String)">
            <summary>
                查找指定目录下程序集之间的引用冲突。如果没有冲突，则返回空字符串；如果有冲入，则返回冲突的具体信息。
            </summary>
            <param name="path">指定的目录</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.GetAllAssemblies(System.String)">
            <summary>
                查找指定目录下的所有 .dll 与 .exe 的程序集集合
            </summary>
            <param name="path">指定的目录</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.GetReferencesFromAllAssemblies(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
                从指定的程序集集合中查找引用的所有程序集，返回 <see cref="T:SparkSoft.Platform.Common.Utility.Reference" /> 对象集合
            </summary>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.FindReferencesWithTheSameShortNameButDifferentFullNames(System.Collections.Generic.List{ZCN.NET.Common.Utils.Reference})">
            <summary>
                从指定的集合中查找短名称相同但全名不同的引用
            </summary>
            <param name="references"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.Reference">
            <summary>
             引用集合类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.Reference.Assembly">
            <summary>
             原程序集的名称
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.Reference.ReferencedAssembly">
            <summary>
             被引用的程序集的名称
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.AssemblyUtils">
            <summary>
                自定义类：用户管理项目的“AssemblyInfo.cs”文件
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyAlgorithmIdAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyAlgorithmIdAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCompanyAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCompanyAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCopyrightAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCopyrightAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyConfigurationAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyConfigurationAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCultureAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCultureAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDefaultAliasAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDefaultAliasAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDelaySignAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDelaySignAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDescriptionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDescriptionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyFlagsAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyFlagsAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyInformationalVersionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyInformationalVersionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyKeyFileAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyKeyFileAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyKeyNameAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyKeyNameAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyProductAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyProductAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTitleAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTitleAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTrademarkAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTrademarkAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyVersionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyVersionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetApplicationScopedSettingAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的ApplicationScopedSettingAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTargetedPatchBandAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTargetedPatchBandAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyVersion(System.String)">
            <summary>
                获取dll或者exe程序集的版本信息
            </summary>
            <param name="filePath">dll或者exe程序集的文件全路径</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyFileVersion(System.String)">
            <summary>
                获取dll或者exe程序集的文件版本信息
            </summary>
            <param name="filePath">dll或者exe程序集的文件全路径</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.WindowsIdentityUtility">
            <summary>
              windows系统身份认证操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.WindowsIdentityUtility.CheckCurrentLoginUserIsAdministrator">
            <summary>
              检查当前系统的登录身份是否是管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils">
            <summary>
              字符串操作辅助类
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.Symbol">
            <summary>
            字符串中一些常用的符号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Space1">
            <summary>
             获取一个值，该值表示字符串中的一个空格
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot1">
            <summary>
             获取一个值，该值表示英文状态下的一个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot3">
            <summary>
             获取一个值，该值表示英文状态下的三个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot6">
            <summary>
             获取一个值，该值表示英文状态下的六个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号左边部分【
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号右边部分】
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号左边部分[
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号右边部分]
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Left">
            <summary>
             获取一个值，该值表示花括号左边部分{
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Right">
            <summary>
             获取一个值，该值表示花括号右边部分}
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号左边部分（
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号右边部分）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号左边部分(
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号右边部分)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Underline">
            <summary>
             获取一个值，该值表示下划线_
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_Zh">
            <summary>
             获取一个值，该值表示中文状态下中划线—
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_En">
            <summary>
             获取一个值，该值表示英文状态下中划线-
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_Zh">
            <summary>
             获取一个值，该值表示中文状态下的逗号，
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_En">
            <summary>
             获取一个值，该值表示英文状态下的逗号,
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_Zh">
            <summary>
             获取一个值，该值表示中文状态下的冒号：
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_En">
            <summary>
             获取一个值，该值表示英文状态下的冒号:
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号左边部分‘
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号右边部分’
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号左边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号右边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号左边部分“
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号右边部分”
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号左边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号右边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.KEY_SUFFIX">
            <summary>
             后缀符号。用于拼接某些场景下 FormData 数据的键值对中的键，避免某些键是C#关键字而无法添加。
             解析时再去除该后缀。
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.PickList">
            <summary>
             选项集合
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyString">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemText">
            <summary>
             获取一个值，该值表示选择项的空项，值为 ===请选择===
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemValue">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="T:ZCN.NET.Common.Utils.RegularUtils">
            <summary>
            正则表达式操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.XmlUtils">
            <summary>
             xml 操作辅助类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.XmlUtils.ConvertXmlToDataSet(System.String)">
            <summary>
             自定义工具类，将 XML 字符串转换为 DataSet 数据集
            </summary>
            <param name="xml">有效的xml字符串</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ArgumentValidator">
            <summary>
                参数校验工具类类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForEmptyString(System.String,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空字符串。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForNullReference(System.Object,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空引用(Null)。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">待检查变量的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
                验证输入的参数messageName非空字符串，也非空引用
            </summary>
            <param name="name">参数名称</param>
            <param name="messageName">参数的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
                <para>验证参数<paramref name="bytes" />非零长度，如果为零长度，则抛出异常<see cref="T:System.ArgumentException" />。</para>
            </summary>
            <param name="bytes">待检查的字节数组</param>
            <param name="variableName">待检查参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckExpectedType(System.Object,System.Type)">
            <summary>
                <para>检查参数<paramref name="variable" />是否符合指定的类型。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="type">参数variable的类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
                检查variable是否一个有效的<paramref name="enumType" />枚举类型
            </summary>
            <param name="variable">待检查的值</param>
            <param name="enumType">参数variable的枚举类型</param>
            <param name="variableName">变量variable的名称</param>
        </member>
        <member name="T:ZCN.NET.Common.Win32.NativeMethods">
            <summary>
              操作系统中原生的方法汇总集合类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
              删除对象
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
              选中对象
            </summary>
            <param name="hDC"></param>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetForegroundWindow">
            <summary>
              获取当前前台窗体句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetDesktopWindow">
            <summary>
              获取当前桌面句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetActiveWindow">
            <summary>
              获取当前激活窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.ZCN_NET_SDK">
            <summary>
             ZCN.NET 程序集版本号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.RTFX">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.ALIAS">
            <summary>
            SDK名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.VERSION">
            <summary>
            SDK 版本号
            </summary>
        </member>
    </members>
</doc>
   <summary>
             给实体类中的属性赋值。
             使用Emit执行时间大概是直接赋值的两倍，使用反射执行时间大概是直接赋值的三十多倍。Emit效率是反射的十倍以上。
            </summary>
            <typeparam name="T">泛型实体类</typeparam>
            <param name="propertyName">实体类中的属性名称</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.WindowsIdentityUtility">
            <summary>
              windows系统身份认证操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.WindowsIdentityUtility.CheckCurrentLoginUserIsAdministrator">
            <summary>
              检查当前系统的登录身份是否是管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils">
            <summary>
              字符串操作辅助类
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.Symbol">
            <summary>
            字符串中一些常用的符号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Space1">
            <summary>
             获取一个值，该值表示字符串中的一个空格
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot1">
            <summary>
             获取一个值，该值表示英文状态下的一个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot3">
            <summary>
             获取一个值，该值表示英文状态下的三个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot6">
            <summary>
             获取一个值，该值表示英文状态下的六个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号左边部分【
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号右边部分】
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号左边部分[
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号右边部分]
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Left">
            <summary>
             获取一个值，该值表示花括号左边部分{
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Right">
            <summary>
             获取一个值，该值表示花括号右边部分}
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号左边部分（
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号右边部分）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号左边部分(
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号右边部分)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Underline">
            <summary>
             获取一个值，该值表示下划线_
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_Zh">
            <summary>
             获取一个值，该值表示中文状态下中划线—
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_En">
            <summary>
             获取一个值，该值表示英文状态下中划线-
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_Zh">
            <summary>
             获取一个值，该值表示中文状态下的逗号，
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_En">
            <summary>
             获取一个值，该值表示英文状态下的逗号,
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_Zh">
            <summary>
             获取一个值，该值表示中文状态下的冒号：
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_En">
            <summary>
             获取一个值，该值表示英文状态下的冒号:
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号左边部分‘
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号右边部分’
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号左边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号右边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号左边部分“
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号右边部分”
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号左边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号右边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.KEY_SUFFIX">
            <summary>
             后缀符号。用于拼接某些场景下 FormData 数据的键值对中的键，避免某些键是C#关键字而无法添加。
             解析时再去除该后缀。
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.PickList">
            <summary>
             选项集合
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyString">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemText">
            <summary>
             获取一个值，该值表示选择项的空项，值为 ===请选择===
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemValue">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="T:ZCN.NET.Common.Utils.RegularUtils">
            <summary>
            正则表达式操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.JsUtils">
            <summary>
             JS 操作工具类。类中的方法适用于WebForm项目中，如果是MVC项目，弹框一般是调用封装的的div层。
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.Alert(System.String)">
            <summary>
            弹出提示信息
            </summary>
            <param name="message">提示信息</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.AlertAndRedirect(System.String,System.String)">
            <summary>
            弹出提示信息,并跳转到指定页面
            </summary>
            <param name="message">提示信息</param>
            <param name="toUrl">指定页面</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.AlertAndGoHistory(System.String,System.Int32)">
            <summary>
            弹出提示信息,并返回历史页面
            </summary>
            <param name="message">提示信息</param>
            <param name="value">history.go()具体的返回页面索引</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.Redirect(System.String)">
            <summary>
            直接跳转到指定的页面
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.AlertAndRedirectToParentUrl(System.String,System.String)">
            <summary>
            弹出提示信息 并在父窗口中打开指定页面
            </summary>
            <param name="message">提示信息</param>
            <param name="toUrl">指定页面</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.RedirectToParentUrl(System.String)">
            <summary>
            在父窗口中打开指定页面
            </summary>
            <param name="toUrl">指定页面</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.GoHistory(System.Int32)">
            <summary>
            返回历史页面
            </summary>
            <param name="value">history.go()具体的返回页面索引</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.JsUtils.RegisterScriptBlock(System.Web.UI.Page,System.String)">
            <summary>
            注册脚本块
            </summary>
            <param name="page">具体的页面对象</param>
            <param name="scriptString">脚本内容</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.XmlUtils">
            <summary>
             xml 操作辅助类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.XmlUtils.ConvertXmlToDataSet(System.String)">
            <summary>
             自定义工具类，将 XML 字符串转换为 DataSet 数据集
            </summary>
            <param name="xml">有效的xml字符串</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ArgumentValidator">
            <summary>
                参数校验工具类类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForEmptyString(System.String,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空字符串。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForNullReference(System.Object,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空引用(Null)。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">待检查变量的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
                验证输入的参数messageName非空字符串，也非空引用
            </summary>
            <param name="name">参数名称</param>
            <param name="messageName">参数的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
                <para>验证参数<paramref name="bytes" />非零长度，如果为零长度，则抛出异常<see cref="T:System.ArgumentException" />。</para>
            </summary>
            <param name="bytes">待检查的字节数组</param>
            <param name="variableName">待检查参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckExpectedType(System.Object,System.Type)">
            <summary>
                <para>检查参数<paramref name="variable" />是否符合指定的类型。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="type">参数variable的类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
                检查variable是否一个有效的<paramref name="enumType" />枚举类型
            </summary>
            <param name="variable">待检查的值</param>
            <param name="enumType">参数variable的枚举类型</param>
            <param name="variableName">变量variable的名称</param>
        </member>
        <member name="T:ZCN.NET.Common.Win32.NativeMethods">
            <summary>
              操作系统中原生的方法汇总集合类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
              删除对象
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
              选中对象
            </summary>
            <param name="hDC"></param>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetForegroundWindow">
            <summary>
              获取当前前台窗体句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetDesktopWindow">
            <summary>
              获取当前桌面句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetActiveWindow">
            <summary>
              获取当前激活窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.ZCN_NET_SDK">
            <summary>
             ZCN.NET 程序集版本号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.RTFX">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.ALIAS">
            <summary>
            SDK名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.VERSION">
            <summary>
            SDK 版本号
            </summary>
        </member>
        <member name="T:SparkSoft.Platform.Utils.ConfigUtils">
            <summary>
                web.config 或者 app.Config 文件操作
            </summary>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.GetAppSettingValue(System.String)">
            <summary>
                获取appSetting节点下指定Key对应的Value值
            </summary>
            <param name="key">appSetting节点下指定Key</param>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.SetAppSettingValue(System.String,System.String,System.String)">
            <summary>
                修改appSetting节点下指定Key对应的Value值
            </summary>
            <param name="key">appSetting节点下指定Key</param>
            <param name="value">要修改为的值</param>
            <param name="filePath">要修改的web.config 或者 app.Config文件或者自定义配置文件的相对路径。
                <para>例如自定义配置文件 ~/XmlConfig/system.config 。</para>
                <para>正常配置的Web.config或App.config</para>
            </param>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.GetConnectionStringSettings(System.String)">
            <summary>
              获取connectionStrings节点下指定名称的配置对象
            </summary>
            <param name="name">connectionStrings节点下指定名称</param>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.GetConnectionString(System.String)">
            <summary>
              获取connectionStrings节点下指定名称对应的数据库连接字符串
            </summary>
            <param name="name">connectionStrings节点下指定名称</param>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.GetProviderName(System.String)">
            <summary>
              获取connectionStrings节点下指定名称对应的数据库提供程序名称
            </summary>
            <param name="name">connectionStrings节点下指定名称</param>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.UpdateOrCreateConnectionString(System.String,System.String,System.String,System.String)">
            <summary>
                更新或新增[connectionStrings]节点的子节点值，存在则更新子节点,不存在则新增子节点，返回成功与否布尔值
            </summary>
            <param name="configurationFile">要操作的配置文件名称,枚举常量</param>
            <param name="name">子节点name值</param>
            <param name="connectionString">子节点connectionString值</param>
            <param name="providerName">子节点providerName值</param>
            <returns>返回成功与否布尔值</returns>
        </member>
        <member name="M:SparkSoft.Platform.Utils.ConfigUtils.GetDatabaseName(System.String)">
            <summary>
             从数据库连接字符串中提取数据库的名称。
            <para>推荐使用数据库产品的 ConnectionStringBuilder 类获取数据库的详细配置信息</para>
            </summary>
            <param name="connectionString">数据库连接字符串</param>
            <returns></returns>
        </member>
        <member name="T:SparkSoft.Platform.Common.Utils.WebServiceUtils">
            <summary>
            动态调用WebService的帮助类
            </summary>
        </member>
        <member name="M:SparkSoft.Platform.Common.Utils.WebServiceUtils.InvokeWebService(System.String,System.String,System.Object[])">
             <summary>
             动态调用web服务
            </summary> 
             <param name="url">WSDL服务地址</param>
             <param name="methodName">方法名</param>
             <param name="args">参数</param>
             <returns></returns>
        </member>
        <member name="M:SparkSoft.Platform.Common.Utils.WebServiceUtils.InvokeWebService(System.String,System.String,System.String,System.String,System.Object[])">
            <summary>
            动态调用web服务
            </summary>
            <param name="url">WSDL服务地址</param>
            <param name="nameSpace">命名空间</param>
            <param name="classname">类名</param>
            <param name="methodName">方法名</param> 
            <param name="args">参数</param> 
            <returns></returns> 
        </member>
    </members>
</doc>

            <param name="input">字符串输入</param>
            <param name="output"><see cref="T:System.IO.StreamWriter"/>输出</param>  
            <exception cref="T:System.IO.IOException">an I/O problem occurs</exception>      
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.CopyExact(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
             将源中的确切字节数<see cref="T:System.IO.Stream"/>复制到目标中<see cref="T:System.IO.Stream"/>。
            </summary>
            <param name="source">源 <see cref="T:System.IO.Stream"/></param>
            <param name="target">目标 <see cref="T:System.IO.Stream"/></param>
            <param name="len">要复制的字节数</param>        
            <exception cref="T:System.IO.IOException">if the source stream does not have enough data.</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadIntoByteArray(System.IO.Stream,System.Byte[])">
            <summary>
            将数据读取到一个完整的数组中。如果流首先耗尽数据，或者如果IOException自然发生，引发EndOfStreamException。
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="byteArray">要读取字节的数组。数组将从流中完全填充，因此必须给出适当的大小。</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetBytes(System.IO.Stream)">
            <summary>
             从流的开头读取数据，直到到达结尾。数据作为字节数组返回。(这种读取流的方法效率不太高)
            <para>如果您事先不知道流的长度（例如网络流），只想将整批数据读取到一个缓冲区中，请使用此方法。</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <exception cref="T:System.IO.IOException">在任何基础IO调用失败时引发</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetBytes(System.IO.Stream,System.Int64)">
            <summary>
            从流中读取数据，直到到达结尾。这个数据作为字节数组返回。
            <para>如果知道要开始的数据的预期长度，请使用此方法获取数据</para>
            </summary>
            <param name="stream">从中读取数据的流</param>
            <param name="initialLength">初始缓冲区长度。如果长度小于1，则设置为<see cref="F:System.Int16.MaxValue"/> 
            </param>
            <exception cref="T:System.IO.IOException">如果任何基础IO调用失败，则引发异常</exception>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetAsciiString(System.IO.Stream)">
            <summary>
             从数据流返回一个ASCII字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetString(System.IO.Stream)">
            <summary>
             从数据流返回一个utf8编码的字符串
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.GetString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从数据流返回一个指定编码方式的字符串
            </summary>
            <param name="stream"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadExact(System.IO.Stream,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
             将源流中任何位置的指定字节数读取到特定起始索引位置的特定字节数组中。字节数组必须具有读取所需流部分所需的大小。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="target">要写入的目标字节数组</param>
            <param name="targetOffset">目标中的偏移索引</param>
            <param name="sourceOffset">流中的偏移位置</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.ReadPartial(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
             从偏移位置开始读取流的部分段。
            </summary>
            <param name="source">要读取的源流</param>
            <param name="sourceOffset">流中的起始偏移位置。如果要从头读取流，则设置为0</param>
            <param name="bytesToRead">要在流中读取的字节数</param>
            <returns>return partial segment as an array of bytes.</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.Stream,System.Int32)">
            <summary>
             尝试跳过输入流中的字节，并返回跳过的实际字节数。
            </summary>
            <param name="stream">将用于跳过字节的输入流</param>
            <param name="skipBytes">要跳过的字节数</param>
            <returns>当前字节数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.StreamReader,System.Int64)">
            <summary>
            将给定数量的字符跳过到给定的流中。
            </summary>
            <param name="stream">完成跳过操作的流</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数</returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.StreamUtils.Skip(System.IO.StringReader,System.Int64)">
            <summary>
             将给定数量的字符跳过到给定的StringReader中
            </summary>
            <param name="strReader">跳过的 StringReader 对象</param>
            <param name="number">要跳过的字符数</param>
            <returns>跳过的字符数。</returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ComputerManageUtils">
            <summary>
             计算机硬件信息管理工具类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.OsVersion">
            <summary>
             获取系统标识符和版本号
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.WorkingSet">
            <summary>
             获取映射到进程上下文的物理内存量
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.TickCount">
            <summary>
             获取系统启动后经过的毫秒数
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.SystemDirectory">
            <summary>
             获取系统目录的完全限定路径
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.MachineName">
            <summary>
             获取此本地计算机的 NetBIOS 名称
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.ComputerManageUtils.UserDomainName">
            <summary>
             获取与当前用户关联的网络域名
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetComputerName">
            <summary>
             获取电脑名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetCpuSerialNumber">
            <summary>
             获取 Cpu 序列号。
             通过 Win32_Processor 获取 CPUID 不正确，或者说 Win32_Processor 字段就不包含 CPU 编号信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetBaseBoardSerialNumber">
            <summary>
             获取主板序列号。
             通过Win32_BaseBoard获取主板信息，但不是所有的主板都有编号，或者说不是能获取所有系统主板的编号。
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetBiosSerialNumber">
            <summary>
             获取 BIOS 序列号。
             通过 Win32_BIOS 获取 BIOS 信息，基本和获取主板信息差不多。就是说：不是所有的主板 BIOS 信息都有编号
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetMacAddress">
            <summary>
             获取网卡硬件地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetIpAddress">
            <summary>
             获取IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetDiskId">
            <summary>
              获取硬盘ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetDiskSerialNumber">
            <summary>
              获取硬盘序列号。
              网上有提到，用 Win32_DiskDrive，但是用 Win32_DiskDrive 获得的硬盘信息中并不包含 SerialNumber 属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetUserName">
            <summary>
             操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetSystemType">
            <summary>
             获取计算机操作系统类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ComputerManageUtils.GetTotalPhysicalMemory">
            <summary>
             获取电脑物理内存
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ComputerWMIEnum">
            <summary>
                计算机硬件名称配置枚举
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_BaseBoard">
            <summary>
                主板
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_BIOS">
            <summary>
                BIOS 芯片
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_CDROMDrive">
            <summary>
                光盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DiskDrive">
            <summary>
                硬盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DesktopMonitor">
            <summary>
                显示器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DisplayConfiguration">
            <summary>
                显卡
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_DisplayControllerConfiguration">
            <summary>
                显卡设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_FloppyDrive">
            <summary>
                软盘驱动器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Keyboard">
            <summary>
                键盘
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_NetworkAdapter">
            <summary>
                网络适配器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_NetworkAdapterConfiguration">
            <summary>
                网络适配器设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_ParallelPort">
            <summary>
                并口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Processor">
            <summary>
                CPU 处理器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PhysicalMemory">
            <summary>
                物理内存条
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PhysicalMedia">
            <summary>
            物理媒介
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PointingDevice">
            <summary>
                输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_Printer">
            <summary>
                打印机
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PrinterConfiguration">
            <summary>
                打印机设置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_PrintJob">
            <summary>
                打印机任务
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_POTSModem">
            <summary>
                Moden
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_POTSModemToSerialPort">
            <summary>
                Moden端口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SerialPort">
            <summary>
                串口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SerialPortConfiguration">
            <summary>
                串口配置
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SoundDevice">
            <summary>
                多媒体设置，一般指声卡。
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_SystemSlot" -->
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_TCPIPPrinterPort">
            <summary>
                打印机端口
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_USBController">
            <summary>
                USB 控制器
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_VideoController">
            <summary>
                显卡细节
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.ComputerWMIEnum.Win32_VideoSettings">
            <summary>
                显卡支持的显示模式
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.RandomUtils">
            <summary>
             自定义类：扩展 Random 随机方法
            </summary>
            <summary>
             自定义类：扩展 Random 随机方法
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomInt(System.Int32,System.Int32,System.Random)">
            <summary>
             随机生成一个整数。
             第三个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="lowerBound">区间范围下限值</param>
            <param name="upperBound">区间范围上限值</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomDouble(System.Random)">
            <summary>
             随机生成一个双精度浮点数。
             第1个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomDecimal(System.Int32,System.Int32,System.Int32,System.Random)">
            <summary>
             随机生成一个Decimal类型数字,1位小数。
             第4个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
             如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="lowerBound">区间范围下限值</param>
            <param name="upperBound">区间范围上限值</param>
            <param name="length">小数点后的小数位数，大于0</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomString(System.String[],System.Random)">
            <summary>
              根据传入的字符串数组，随机返回其中的一个字符串。
              第2个参数，如果传递一个不为null的对象(并且该对象定义在循环之外)，则在同一个循环中可以避免产生全部相同的结果。
              如果不传递该值，则同一个循环中会产生全部相同的结果。
            </summary>
            <param name="arrStr">字符串数组</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RandomUtils.CreateRandomCode(System.Int32,System.Random)">
            <summary>
             随机生成指定位数的编码
            </summary>
            <param name="codeLen">长度。如果长度小于等于0，则默认返回16位长度</param>
            <param name="random">Random对象</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.AssemblyReferencesUtils">
            <summary>
                自定义类：用于发现同一依赖程序集的不同版本之间存在冲突的警告
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.FindConflictingReferences(System.String)">
            <summary>
                查找指定目录下程序集之间的引用冲突。如果没有冲突，则返回空字符串；如果有冲入，则返回冲突的具体信息。
            </summary>
            <param name="path">指定的目录</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.GetAllAssemblies(System.String)">
            <summary>
                查找指定目录下的所有 .dll 与 .exe 的程序集集合
            </summary>
            <param name="path">指定的目录</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.GetReferencesFromAllAssemblies(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
                从指定的程序集集合中查找引用的所有程序集，返回 <see cref="T:SparkSoft.Platform.Common.Utility.Reference" /> 对象集合
            </summary>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyReferencesUtils.FindReferencesWithTheSameShortNameButDifferentFullNames(System.Collections.Generic.List{ZCN.NET.Common.Utils.Reference})">
            <summary>
                从指定的集合中查找短名称相同但全名不同的引用
            </summary>
            <param name="references"></param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.Reference">
            <summary>
             引用集合类
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.Reference.Assembly">
            <summary>
             原程序集的名称
            </summary>
        </member>
        <member name="P:ZCN.NET.Common.Utils.Reference.ReferencedAssembly">
            <summary>
             被引用的程序集的名称
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.AssemblyUtils">
            <summary>
                自定义类：用户管理项目的“AssemblyInfo.cs”文件
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyAlgorithmIdAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyAlgorithmIdAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCompanyAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCompanyAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCopyrightAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCopyrightAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyConfigurationAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyConfigurationAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyCultureAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyCultureAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDefaultAliasAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDefaultAliasAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDelaySignAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDelaySignAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyDescriptionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyDescriptionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyFlagsAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyFlagsAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyInformationalVersionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyInformationalVersionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyKeyFileAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyKeyFileAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyKeyNameAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyKeyNameAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyProductAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyProductAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTitleAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTitleAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTrademarkAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTrademarkAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyVersionAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyVersionAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetApplicationScopedSettingAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的ApplicationScopedSettingAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyTargetedPatchBandAttribute">
            <summary>
                获取程序集配置文件【AssemblyInfo.cs】中的AssemblyTargetedPatchBandAttribute属性
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyVersion(System.String)">
            <summary>
                获取dll或者exe程序集的版本信息
            </summary>
            <param name="filePath">dll或者exe程序集的文件全路径</param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Utils.AssemblyUtils.GetAssemblyFileVersion(System.String)">
            <summary>
                获取dll或者exe程序集的文件版本信息
            </summary>
            <param name="filePath">dll或者exe程序集的文件全路径</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.EmitUtils">
            <summary>
             Emit 反射操作辅助类(性能极高)
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.EmitUtils.EmitSetter``1(System.String)">
            <summary>
             给实体类中的属性赋值。
             使用Emit执行时间大概是直接赋值的两倍，使用反射执行时间大概是直接赋值的三十多倍。Emit效率是反射的十倍以上。
            </summary>
            <typeparam name="T">泛型实体类</typeparam>
            <param name="propertyName">实体类中的属性名称</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.WindowsIdentityUtility">
            <summary>
              windows系统身份认证操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.WindowsIdentityUtility.CheckCurrentLoginUserIsAdministrator">
            <summary>
              检查当前系统的登录身份是否是管理员
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils">
            <summary>
              字符串操作辅助类
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.Symbol">
            <summary>
            字符串中一些常用的符号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Space1">
            <summary>
             获取一个值，该值表示字符串中的一个空格
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot1">
            <summary>
             获取一个值，该值表示英文状态下的一个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot3">
            <summary>
             获取一个值，该值表示英文状态下的三个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Dot6">
            <summary>
             获取一个值，该值表示英文状态下的六个点.
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号左边部分【
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的方括号右边部分】
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号左边部分[
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Brackets_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的方括号右边部分]
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Left">
            <summary>
             获取一个值，该值表示花括号左边部分{
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Braces_Right">
            <summary>
             获取一个值，该值表示花括号右边部分}
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号左边部分（
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的圆括号右边部分）
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号左边部分(
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Parentheses_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的圆括号右边部分)
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Underline">
            <summary>
             获取一个值，该值表示下划线_
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_Zh">
            <summary>
             获取一个值，该值表示中文状态下中划线—
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Middileline_En">
            <summary>
             获取一个值，该值表示英文状态下中划线-
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_Zh">
            <summary>
             获取一个值，该值表示中文状态下的逗号，
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Comma_En">
            <summary>
             获取一个值，该值表示英文状态下的逗号,
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_Zh">
            <summary>
             获取一个值，该值表示中文状态下的冒号：
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.Colon_En">
            <summary>
             获取一个值，该值表示英文状态下的冒号:
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号左边部分‘
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的单引号右边部分’
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号左边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.SingleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的单引号右边部分'
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号左边部分“
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_Zh">
            <summary>
             获取一个值，该值表示中文状态下的双引号右边部分”
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Left_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号左边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.DoubleQuotation_Right_En">
            <summary>
             获取一个值，该值表示英文状态下的双引号右边部分"
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.Symbol.KEY_SUFFIX">
            <summary>
             后缀符号。用于拼接某些场景下 FormData 数据的键值对中的键，避免某些键是C#关键字而无法添加。
             解析时再去除该后缀。
            </summary>
        </member>
        <member name="T:ZCN.NET.Common.Utils.StringUtils.PickList">
            <summary>
             选项集合
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyString">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemText">
            <summary>
             获取一个值，该值表示选择项的空项，值为 ===请选择===
            </summary> 
        </member>
        <member name="F:ZCN.NET.Common.Utils.StringUtils.PickList.EmptyItemValue">
            <summary>
             获取一个值，该值表示选择项的空项，值为空字符串
            </summary> 
        </member>
        <member name="T:ZCN.NET.Common.Utils.RegularUtils">
            <summary>
            正则表达式操作工具类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入字符串</param>
            <param name="pattern">模式字符串</param>        
        </member>
        <member name="M:ZCN.NET.Common.Utils.RegularUtils.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            验证输入字符串是否与模式字符串匹配，匹配返回true
            </summary>
            <param name="input">输入的字符串</param>
            <param name="pattern">模式字符串</param>
            <param name="options">筛选条件</param>
        </member>
        <member name="T:ZCN.NET.Common.Utils.XmlUtils">
            <summary>
             xml 操作辅助类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.XmlUtils.ConvertXmlToDataSet(System.String)">
            <summary>
             自定义工具类，将 XML 字符串转换为 DataSet 数据集
            </summary>
            <param name="xml">有效的xml字符串</param>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.Utils.ArgumentValidator">
            <summary>
                参数校验工具类类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForEmptyString(System.String,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空字符串。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForNullReference(System.Object,System.String)">
            <summary>
                <para>检查参数<paramref name="variable" />是否为空引用(Null)。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="variableName">待检查变量的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForInvalidNullNameReference(System.String,System.String)">
            <summary>
                验证输入的参数messageName非空字符串，也非空引用
            </summary>
            <param name="name">参数名称</param>
            <param name="messageName">参数的值</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckForZeroBytes(System.Byte[],System.String)">
            <summary>
                <para>验证参数<paramref name="bytes" />非零长度，如果为零长度，则抛出异常<see cref="T:System.ArgumentException" />。</para>
            </summary>
            <param name="bytes">待检查的字节数组</param>
            <param name="variableName">待检查参数的名称</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckExpectedType(System.Object,System.Type)">
            <summary>
                <para>检查参数<paramref name="variable" />是否符合指定的类型。</para>
            </summary>
            <param name="variable">待检查的值</param>
            <param name="type">参数variable的类型</param>
        </member>
        <member name="M:ZCN.NET.Common.Utils.ArgumentValidator.CheckEnumeration(System.Type,System.Object,System.String)">
            <summary>
                检查variable是否一个有效的<paramref name="enumType" />枚举类型
            </summary>
            <param name="variable">待检查的值</param>
            <param name="enumType">参数variable的枚举类型</param>
            <param name="variableName">变量variable的名称</param>
        </member>
        <member name="T:ZCN.NET.Common.Win32.NativeMethods">
            <summary>
              操作系统中原生的方法汇总集合类
            </summary>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.DeleteObject(System.IntPtr)">
            <summary>
              删除对象
            </summary>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
              选中对象
            </summary>
            <param name="hDC"></param>
            <param name="hObject"></param>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetForegroundWindow">
            <summary>
              获取当前前台窗体句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetDesktopWindow">
            <summary>
              获取当前桌面句柄
            </summary>
            <returns></returns>
        </member>
        <member name="M:ZCN.NET.Common.Win32.NativeMethods.GetActiveWindow">
            <summary>
              获取当前激活窗口句柄
            </summary>
            <returns></returns>
        </member>
        <member name="T:ZCN.NET.Common.ZCN_NET_SDK">
            <summary>
             ZCN.NET 程序集版本号
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.RTFX">
            <summary>
            目标框架
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.ALIAS">
            <summary>
            SDK名称
            </summary>
        </member>
        <member name="F:ZCN.NET.Common.ZCN_NET_SDK.VERSION">
            <summary>
            SDK 版本号
            </summary>
        </member>
    </members>
</doc>
